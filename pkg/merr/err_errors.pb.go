// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package merr

import (
	context "context"
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
	i18n "github.com/nicksnyder/go-i18n/v2/i18n"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

type localizeKey struct{}

func FromContext(ctx context.Context) (*i18n.Localizer, bool) {
	local, ok := ctx.Value(localizeKey{}).(*i18n.Localizer)
	return local, ok
}

func WithLocalize(ctx context.Context, localize *i18n.Localizer) context.Context {
	return context.WithValue(ctx, localizeKey{}, localize)
}

// GetI18nMessage 获取错误信息
func GetI18nMessage(ctx context.Context, id string, args ...interface{}) string {
	if id == "" {
		return id
	}
	config := &i18n.LocalizeConfig{
		MessageID: id,
	}
	if len(args) > 0 {
		config.TemplateData = args[0]
	}
	local, ok := FromContext(ctx)
	if !ok {
		return id
	}
	localize, err := local.Localize(config)
	if err != nil {
		return id
	}
	return localize
}

const ErrorAlertID = "ALERT"

// IsAlert 用于表单验证错误
func IsAlert(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorAlertID && e.Code == 400
}

// ErrorAlert 用于表单验证错误
func ErrorAlert(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorAlertID, fmt.Sprintf(format, args...))
}

// ErrorAlertWithContext 用于表单验证错误
//
//	带上下文，支持国际化输出元数据
func ErrorAlertWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorAlertID, fmt.Sprintf(format, args...))
}

// ErrorI18nAlert 用于表单验证错误
//
//	支持国际化输出
func ErrorI18nAlert(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "参数错误"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(400, ErrorAlertID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorAlertID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(400, ErrorAlertID, msg).WithCause(err1)
		} else {
			err = errors.New(400, ErrorAlertID, localize)
		}
	}

	return err
}

const ErrorAlertCreateAlarmGroupRequestNameLenID = "ALERT__CreateAlarmGroupRequest_Name_Len"

// IsAlertCreateAlarmGroupRequestNameLen 用于表单验证错误
//
//	CreateAlarmGroupRequest_Name_Len
//	用户名错误
func IsAlertCreateAlarmGroupRequestNameLen(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorAlertCreateAlarmGroupRequestNameLenID && e.Code == 400
}

// ErrorAlertCreateAlarmGroupRequestNameLen 用于表单验证错误
//
//	CreateAlarmGroupRequest_Name_Len
//	用户名错误
func ErrorAlertCreateAlarmGroupRequestNameLen(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorAlertCreateAlarmGroupRequestNameLenID, fmt.Sprintf(format, args...))
}

// ErrorAlertCreateAlarmGroupRequestNameLenWithContext 用于表单验证错误
//
//	CreateAlarmGroupRequest_Name_Len
//	用户名错误
//	带上下文，支持国际化输出元数据
func ErrorAlertCreateAlarmGroupRequestNameLenWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorAlertCreateAlarmGroupRequestNameLenID, fmt.Sprintf(format, args...))
}

// ErrorI18nAlertCreateAlarmGroupRequestNameLen 用于表单验证错误
//
//	CreateAlarmGroupRequest_Name_Len
//	用户名错误
//	支持国际化输出
func ErrorI18nAlertCreateAlarmGroupRequestNameLen(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "用户名错误"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(400, ErrorAlertCreateAlarmGroupRequestNameLenID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorAlertCreateAlarmGroupRequestNameLenID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(400, ErrorAlertCreateAlarmGroupRequestNameLenID, msg).WithCause(err1)
		} else {
			err = errors.New(400, ErrorAlertCreateAlarmGroupRequestNameLenID, localize)
		}
	}

	return err
}

const ErrorAlertCreateAlarmGroupRequestRemarkLenID = "ALERT__CreateAlarmGroupRequest_Remark_Len"

// IsAlertCreateAlarmGroupRequestRemarkLen 用于表单验证错误
//
//	CreateAlarmGroupRequest_Remark_Len
//	告警组说明长度限制在0-200个字符
func IsAlertCreateAlarmGroupRequestRemarkLen(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorAlertCreateAlarmGroupRequestRemarkLenID && e.Code == 400
}

// ErrorAlertCreateAlarmGroupRequestRemarkLen 用于表单验证错误
//
//	CreateAlarmGroupRequest_Remark_Len
//	告警组说明长度限制在0-200个字符
func ErrorAlertCreateAlarmGroupRequestRemarkLen(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorAlertCreateAlarmGroupRequestRemarkLenID, fmt.Sprintf(format, args...))
}

// ErrorAlertCreateAlarmGroupRequestRemarkLenWithContext 用于表单验证错误
//
//	CreateAlarmGroupRequest_Remark_Len
//	告警组说明长度限制在0-200个字符
//	带上下文，支持国际化输出元数据
func ErrorAlertCreateAlarmGroupRequestRemarkLenWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorAlertCreateAlarmGroupRequestRemarkLenID, fmt.Sprintf(format, args...))
}

// ErrorI18nAlertCreateAlarmGroupRequestRemarkLen 用于表单验证错误
//
//	CreateAlarmGroupRequest_Remark_Len
//	告警组说明长度限制在0-200个字符
//	支持国际化输出
func ErrorI18nAlertCreateAlarmGroupRequestRemarkLen(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "告警组说明长度限制在0-200个字符"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(400, ErrorAlertCreateAlarmGroupRequestRemarkLenID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorAlertCreateAlarmGroupRequestRemarkLenID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(400, ErrorAlertCreateAlarmGroupRequestRemarkLenID, msg).WithCause(err1)
		} else {
			err = errors.New(400, ErrorAlertCreateAlarmGroupRequestRemarkLenID, localize)
		}
	}

	return err
}

const ErrorAlertPasswordErrID = "ALERT__PASSWORD_ERR"

// IsAlertPasswordErr 用于表单验证错误
//
//	PASSWORD_ERR
//	密码错误
func IsAlertPasswordErr(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorAlertPasswordErrID && e.Code == 400
}

// ErrorAlertPasswordErr 用于表单验证错误
//
//	PASSWORD_ERR
//	密码错误
func ErrorAlertPasswordErr(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorAlertPasswordErrID, fmt.Sprintf(format, args...))
}

// ErrorAlertPasswordErrWithContext 用于表单验证错误
//
//	PASSWORD_ERR
//	密码错误
//	带上下文，支持国际化输出元数据
func ErrorAlertPasswordErrWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorAlertPasswordErrID, fmt.Sprintf(format, args...))
}

// ErrorI18nAlertPasswordErr 用于表单验证错误
//
//	PASSWORD_ERR
//	密码错误
//	支持国际化输出
func ErrorI18nAlertPasswordErr(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "密码错误"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(400, ErrorAlertPasswordErrID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorAlertPasswordErrID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(400, ErrorAlertPasswordErrID, msg).WithCause(err1)
		} else {
			err = errors.New(400, ErrorAlertPasswordErrID, localize)
		}
	}

	return err
}

const ErrorAlertPasswordSameErrID = "ALERT__PASSWORD_SAME_ERR"

// IsAlertPasswordSameErr 用于表单验证错误
//
//	PASSWORD_SAME_ERR
//	新旧密码不能相同
func IsAlertPasswordSameErr(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorAlertPasswordSameErrID && e.Code == 400
}

// ErrorAlertPasswordSameErr 用于表单验证错误
//
//	PASSWORD_SAME_ERR
//	新旧密码不能相同
func ErrorAlertPasswordSameErr(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorAlertPasswordSameErrID, fmt.Sprintf(format, args...))
}

// ErrorAlertPasswordSameErrWithContext 用于表单验证错误
//
//	PASSWORD_SAME_ERR
//	新旧密码不能相同
//	带上下文，支持国际化输出元数据
func ErrorAlertPasswordSameErrWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorAlertPasswordSameErrID, fmt.Sprintf(format, args...))
}

// ErrorI18nAlertPasswordSameErr 用于表单验证错误
//
//	PASSWORD_SAME_ERR
//	新旧密码不能相同
//	支持国际化输出
func ErrorI18nAlertPasswordSameErr(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "新旧密码不能相同"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(400, ErrorAlertPasswordSameErrID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorAlertPasswordSameErrID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(400, ErrorAlertPasswordSameErrID, msg).WithCause(err1)
		} else {
			err = errors.New(400, ErrorAlertPasswordSameErrID, localize)
		}
	}

	return err
}

const ErrorAlertTeamNameExistErrID = "ALERT__TEAM_NAME_EXIST_ERR"

// IsAlertTeamNameExistErr 用于表单验证错误
//
//	TEAM_NAME_EXIST_ERR
//	团队名称已存在
func IsAlertTeamNameExistErr(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorAlertTeamNameExistErrID && e.Code == 400
}

// ErrorAlertTeamNameExistErr 用于表单验证错误
//
//	TEAM_NAME_EXIST_ERR
//	团队名称已存在
func ErrorAlertTeamNameExistErr(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorAlertTeamNameExistErrID, fmt.Sprintf(format, args...))
}

// ErrorAlertTeamNameExistErrWithContext 用于表单验证错误
//
//	TEAM_NAME_EXIST_ERR
//	团队名称已存在
//	带上下文，支持国际化输出元数据
func ErrorAlertTeamNameExistErrWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorAlertTeamNameExistErrID, fmt.Sprintf(format, args...))
}

// ErrorI18nAlertTeamNameExistErr 用于表单验证错误
//
//	TEAM_NAME_EXIST_ERR
//	团队名称已存在
//	支持国际化输出
func ErrorI18nAlertTeamNameExistErr(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "团队名称已存在"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(400, ErrorAlertTeamNameExistErrID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorAlertTeamNameExistErrID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(400, ErrorAlertTeamNameExistErrID, msg).WithCause(err1)
		} else {
			err = errors.New(400, ErrorAlertTeamNameExistErrID, localize)
		}
	}

	return err
}

const ErrorAlertCaptchaErrID = "ALERT__CAPTCHA_ERR"

// IsAlertCaptchaErr 用于表单验证错误
//
//	CAPTCHA_ERR
//	验证码错误
func IsAlertCaptchaErr(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorAlertCaptchaErrID && e.Code == 400
}

// ErrorAlertCaptchaErr 用于表单验证错误
//
//	CAPTCHA_ERR
//	验证码错误
func ErrorAlertCaptchaErr(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorAlertCaptchaErrID, fmt.Sprintf(format, args...))
}

// ErrorAlertCaptchaErrWithContext 用于表单验证错误
//
//	CAPTCHA_ERR
//	验证码错误
//	带上下文，支持国际化输出元数据
func ErrorAlertCaptchaErrWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorAlertCaptchaErrID, fmt.Sprintf(format, args...))
}

// ErrorI18nAlertCaptchaErr 用于表单验证错误
//
//	CAPTCHA_ERR
//	验证码错误
//	支持国际化输出
func ErrorI18nAlertCaptchaErr(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "验证码错误"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(400, ErrorAlertCaptchaErrID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorAlertCaptchaErrID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(400, ErrorAlertCaptchaErrID, msg).WithCause(err1)
		} else {
			err = errors.New(400, ErrorAlertCaptchaErrID, localize)
		}
	}

	return err
}

const ErrorAlertCaptchaExpireID = "ALERT__CAPTCHA_EXPIRE"

// IsAlertCaptchaExpire 用于表单验证错误
//
//	CAPTCHA_EXPIRE
//	验证码已过期
func IsAlertCaptchaExpire(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorAlertCaptchaExpireID && e.Code == 400
}

// ErrorAlertCaptchaExpire 用于表单验证错误
//
//	CAPTCHA_EXPIRE
//	验证码已过期
func ErrorAlertCaptchaExpire(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorAlertCaptchaExpireID, fmt.Sprintf(format, args...))
}

// ErrorAlertCaptchaExpireWithContext 用于表单验证错误
//
//	CAPTCHA_EXPIRE
//	验证码已过期
//	带上下文，支持国际化输出元数据
func ErrorAlertCaptchaExpireWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorAlertCaptchaExpireID, fmt.Sprintf(format, args...))
}

// ErrorI18nAlertCaptchaExpire 用于表单验证错误
//
//	CAPTCHA_EXPIRE
//	验证码已过期
//	支持国际化输出
func ErrorI18nAlertCaptchaExpire(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "验证码已过期"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(400, ErrorAlertCaptchaExpireID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorAlertCaptchaExpireID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(400, ErrorAlertCaptchaExpireID, msg).WithCause(err1)
		} else {
			err = errors.New(400, ErrorAlertCaptchaExpireID, localize)
		}
	}

	return err
}

const ErrorAlertStrategyGroupNotEnableID = "ALERT__STRATEGY_GROUP_NOT_ENABLE"

// IsAlertStrategyGroupNotEnable 用于表单验证错误
//
//	STRATEGY_GROUP_NOT_ENABLE
//	策略组[%s]未启用, 不允许开启策略[%s]
func IsAlertStrategyGroupNotEnable(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorAlertStrategyGroupNotEnableID && e.Code == 400
}

// ErrorAlertStrategyGroupNotEnable 用于表单验证错误
//
//	STRATEGY_GROUP_NOT_ENABLE
//	策略组[%s]未启用, 不允许开启策略[%s]
func ErrorAlertStrategyGroupNotEnable(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorAlertStrategyGroupNotEnableID, fmt.Sprintf(format, args...))
}

// ErrorAlertStrategyGroupNotEnableWithContext 用于表单验证错误
//
//	STRATEGY_GROUP_NOT_ENABLE
//	策略组[%s]未启用, 不允许开启策略[%s]
//	带上下文，支持国际化输出元数据
func ErrorAlertStrategyGroupNotEnableWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorAlertStrategyGroupNotEnableID, fmt.Sprintf(format, args...))
}

// ErrorI18nAlertStrategyGroupNotEnable 用于表单验证错误
//
//	STRATEGY_GROUP_NOT_ENABLE
//	策略组[%s]未启用, 不允许开启策略[%s]
//	支持国际化输出
func ErrorI18nAlertStrategyGroupNotEnable(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "策略组[%s]未启用, 不允许开启策略[%s]"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(400, ErrorAlertStrategyGroupNotEnableID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorAlertStrategyGroupNotEnableID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(400, ErrorAlertStrategyGroupNotEnableID, msg).WithCause(err1)
		} else {
			err = errors.New(400, ErrorAlertStrategyGroupNotEnableID, localize)
		}
	}

	return err
}

const ErrorAlertAlertObjectDuplicateID = "ALERT__ALERT_OBJECT_DUPLICATE"

// IsAlertAlertObjectDuplicate 用于表单验证错误
//
//	ALERT_OBJECT_DUPLICATE
//	告警对象重复
func IsAlertAlertObjectDuplicate(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorAlertAlertObjectDuplicateID && e.Code == 400
}

// ErrorAlertAlertObjectDuplicate 用于表单验证错误
//
//	ALERT_OBJECT_DUPLICATE
//	告警对象重复
func ErrorAlertAlertObjectDuplicate(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorAlertAlertObjectDuplicateID, fmt.Sprintf(format, args...))
}

// ErrorAlertAlertObjectDuplicateWithContext 用于表单验证错误
//
//	ALERT_OBJECT_DUPLICATE
//	告警对象重复
//	带上下文，支持国际化输出元数据
func ErrorAlertAlertObjectDuplicateWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorAlertAlertObjectDuplicateID, fmt.Sprintf(format, args...))
}

// ErrorI18nAlertAlertObjectDuplicate 用于表单验证错误
//
//	ALERT_OBJECT_DUPLICATE
//	告警对象重复
//	支持国际化输出
func ErrorI18nAlertAlertObjectDuplicate(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "告警对象重复"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(400, ErrorAlertAlertObjectDuplicateID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorAlertAlertObjectDuplicateID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(400, ErrorAlertAlertObjectDuplicateID, msg).WithCause(err1)
		} else {
			err = errors.New(400, ErrorAlertAlertObjectDuplicateID, localize)
		}
	}

	return err
}

const ErrorAlertAlertLevelDuplicateID = "ALERT__ALERT_LEVEL_DUPLICATE"

// IsAlertAlertLevelDuplicate 用于表单验证错误
//
//	ALERT_LEVEL_DUPLICATE
//	策略告警等级重复
func IsAlertAlertLevelDuplicate(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorAlertAlertLevelDuplicateID && e.Code == 400
}

// ErrorAlertAlertLevelDuplicate 用于表单验证错误
//
//	ALERT_LEVEL_DUPLICATE
//	策略告警等级重复
func ErrorAlertAlertLevelDuplicate(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorAlertAlertLevelDuplicateID, fmt.Sprintf(format, args...))
}

// ErrorAlertAlertLevelDuplicateWithContext 用于表单验证错误
//
//	ALERT_LEVEL_DUPLICATE
//	策略告警等级重复
//	带上下文，支持国际化输出元数据
func ErrorAlertAlertLevelDuplicateWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorAlertAlertLevelDuplicateID, fmt.Sprintf(format, args...))
}

// ErrorI18nAlertAlertLevelDuplicate 用于表单验证错误
//
//	ALERT_LEVEL_DUPLICATE
//	策略告警等级重复
//	支持国际化输出
func ErrorI18nAlertAlertLevelDuplicate(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "策略告警等级重复"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(400, ErrorAlertAlertLevelDuplicateID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorAlertAlertLevelDuplicateID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(400, ErrorAlertAlertLevelDuplicateID, msg).WithCause(err1)
		} else {
			err = errors.New(400, ErrorAlertAlertLevelDuplicateID, localize)
		}
	}

	return err
}

const ErrorAlertEmailCaptchaErrID = "ALERT__EMAIL_CAPTCHA_ERR"

// IsAlertEmailCaptchaErr 用于表单验证错误
//
//	EMAIL_CAPTCHA_ERR
//	邮箱验证码错误
func IsAlertEmailCaptchaErr(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorAlertEmailCaptchaErrID && e.Code == 400
}

// ErrorAlertEmailCaptchaErr 用于表单验证错误
//
//	EMAIL_CAPTCHA_ERR
//	邮箱验证码错误
func ErrorAlertEmailCaptchaErr(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorAlertEmailCaptchaErrID, fmt.Sprintf(format, args...))
}

// ErrorAlertEmailCaptchaErrWithContext 用于表单验证错误
//
//	EMAIL_CAPTCHA_ERR
//	邮箱验证码错误
//	带上下文，支持国际化输出元数据
func ErrorAlertEmailCaptchaErrWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorAlertEmailCaptchaErrID, fmt.Sprintf(format, args...))
}

// ErrorI18nAlertEmailCaptchaErr 用于表单验证错误
//
//	EMAIL_CAPTCHA_ERR
//	邮箱验证码错误
//	支持国际化输出
func ErrorI18nAlertEmailCaptchaErr(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "邮箱验证码错误"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(400, ErrorAlertEmailCaptchaErrID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorAlertEmailCaptchaErrID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(400, ErrorAlertEmailCaptchaErrID, msg).WithCause(err1)
		} else {
			err = errors.New(400, ErrorAlertEmailCaptchaErrID, localize)
		}
	}

	return err
}

const ErrorAlertSelectAlertPageErrID = "ALERT__SELECT_ALERT_PAGE_ERR"

// IsAlertSelectAlertPageErr 用于表单验证错误
//
//	SELECT_ALERT_PAGE_ERR
//	选择告警页面错误，请重新选择
func IsAlertSelectAlertPageErr(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorAlertSelectAlertPageErrID && e.Code == 400
}

// ErrorAlertSelectAlertPageErr 用于表单验证错误
//
//	SELECT_ALERT_PAGE_ERR
//	选择告警页面错误，请重新选择
func ErrorAlertSelectAlertPageErr(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorAlertSelectAlertPageErrID, fmt.Sprintf(format, args...))
}

// ErrorAlertSelectAlertPageErrWithContext 用于表单验证错误
//
//	SELECT_ALERT_PAGE_ERR
//	选择告警页面错误，请重新选择
//	带上下文，支持国际化输出元数据
func ErrorAlertSelectAlertPageErrWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorAlertSelectAlertPageErrID, fmt.Sprintf(format, args...))
}

// ErrorI18nAlertSelectAlertPageErr 用于表单验证错误
//
//	SELECT_ALERT_PAGE_ERR
//	选择告警页面错误，请重新选择
//	支持国际化输出
func ErrorI18nAlertSelectAlertPageErr(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "选择告警页面错误，请重新选择"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(400, ErrorAlertSelectAlertPageErrID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorAlertSelectAlertPageErrID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(400, ErrorAlertSelectAlertPageErrID, msg).WithCause(err1)
		} else {
			err = errors.New(400, ErrorAlertSelectAlertPageErrID, localize)
		}
	}

	return err
}

const ErrorAlertHookNameDuplicateID = "ALERT__HOOK_NAME_DUPLICATE"

// IsAlertHookNameDuplicate 用于表单验证错误
//
//	HOOK_NAME_DUPLICATE
//	hook名称重复
func IsAlertHookNameDuplicate(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorAlertHookNameDuplicateID && e.Code == 400
}

// ErrorAlertHookNameDuplicate 用于表单验证错误
//
//	HOOK_NAME_DUPLICATE
//	hook名称重复
func ErrorAlertHookNameDuplicate(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorAlertHookNameDuplicateID, fmt.Sprintf(format, args...))
}

// ErrorAlertHookNameDuplicateWithContext 用于表单验证错误
//
//	HOOK_NAME_DUPLICATE
//	hook名称重复
//	带上下文，支持国际化输出元数据
func ErrorAlertHookNameDuplicateWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorAlertHookNameDuplicateID, fmt.Sprintf(format, args...))
}

// ErrorI18nAlertHookNameDuplicate 用于表单验证错误
//
//	HOOK_NAME_DUPLICATE
//	hook名称重复
//	支持国际化输出
func ErrorI18nAlertHookNameDuplicate(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "hook名称重复"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(400, ErrorAlertHookNameDuplicateID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorAlertHookNameDuplicateID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(400, ErrorAlertHookNameDuplicateID, msg).WithCause(err1)
		} else {
			err = errors.New(400, ErrorAlertHookNameDuplicateID, localize)
		}
	}

	return err
}

const ErrorAlertAlertGroupNameDuplicateID = "ALERT__ALERT_GROUP_NAME_DUPLICATE"

// IsAlertAlertGroupNameDuplicate 用于表单验证错误
//
//	ALERT_GROUP_NAME_DUPLICATE
//	告警组名称重复
func IsAlertAlertGroupNameDuplicate(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorAlertAlertGroupNameDuplicateID && e.Code == 400
}

// ErrorAlertAlertGroupNameDuplicate 用于表单验证错误
//
//	ALERT_GROUP_NAME_DUPLICATE
//	告警组名称重复
func ErrorAlertAlertGroupNameDuplicate(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorAlertAlertGroupNameDuplicateID, fmt.Sprintf(format, args...))
}

// ErrorAlertAlertGroupNameDuplicateWithContext 用于表单验证错误
//
//	ALERT_GROUP_NAME_DUPLICATE
//	告警组名称重复
//	带上下文，支持国际化输出元数据
func ErrorAlertAlertGroupNameDuplicateWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorAlertAlertGroupNameDuplicateID, fmt.Sprintf(format, args...))
}

// ErrorI18nAlertAlertGroupNameDuplicate 用于表单验证错误
//
//	ALERT_GROUP_NAME_DUPLICATE
//	告警组名称重复
//	支持国际化输出
func ErrorI18nAlertAlertGroupNameDuplicate(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "告警组名称重复"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(400, ErrorAlertAlertGroupNameDuplicateID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorAlertAlertGroupNameDuplicateID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(400, ErrorAlertAlertGroupNameDuplicateID, msg).WithCause(err1)
		} else {
			err = errors.New(400, ErrorAlertAlertGroupNameDuplicateID, localize)
		}
	}

	return err
}

const ErrorAlertStrategyGroupNameDuplicateID = "ALERT__STRATEGY_GROUP_NAME_DUPLICATE"

// IsAlertStrategyGroupNameDuplicate 用于表单验证错误
//
//	STRATEGY_GROUP_NAME_DUPLICATE
//	策略组名称重复
func IsAlertStrategyGroupNameDuplicate(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorAlertStrategyGroupNameDuplicateID && e.Code == 400
}

// ErrorAlertStrategyGroupNameDuplicate 用于表单验证错误
//
//	STRATEGY_GROUP_NAME_DUPLICATE
//	策略组名称重复
func ErrorAlertStrategyGroupNameDuplicate(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorAlertStrategyGroupNameDuplicateID, fmt.Sprintf(format, args...))
}

// ErrorAlertStrategyGroupNameDuplicateWithContext 用于表单验证错误
//
//	STRATEGY_GROUP_NAME_DUPLICATE
//	策略组名称重复
//	带上下文，支持国际化输出元数据
func ErrorAlertStrategyGroupNameDuplicateWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorAlertStrategyGroupNameDuplicateID, fmt.Sprintf(format, args...))
}

// ErrorI18nAlertStrategyGroupNameDuplicate 用于表单验证错误
//
//	STRATEGY_GROUP_NAME_DUPLICATE
//	策略组名称重复
//	支持国际化输出
func ErrorI18nAlertStrategyGroupNameDuplicate(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "策略组名称重复"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(400, ErrorAlertStrategyGroupNameDuplicateID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorAlertStrategyGroupNameDuplicateID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(400, ErrorAlertStrategyGroupNameDuplicateID, msg).WithCause(err1)
		} else {
			err = errors.New(400, ErrorAlertStrategyGroupNameDuplicateID, localize)
		}
	}

	return err
}

const ErrorAlertStrategyNameDuplicateID = "ALERT__STRATEGY_NAME_DUPLICATE"

// IsAlertStrategyNameDuplicate 用于表单验证错误
//
//	STRATEGY_NAME_DUPLICATE
//	策略名称重复
func IsAlertStrategyNameDuplicate(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorAlertStrategyNameDuplicateID && e.Code == 400
}

// ErrorAlertStrategyNameDuplicate 用于表单验证错误
//
//	STRATEGY_NAME_DUPLICATE
//	策略名称重复
func ErrorAlertStrategyNameDuplicate(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorAlertStrategyNameDuplicateID, fmt.Sprintf(format, args...))
}

// ErrorAlertStrategyNameDuplicateWithContext 用于表单验证错误
//
//	STRATEGY_NAME_DUPLICATE
//	策略名称重复
//	带上下文，支持国际化输出元数据
func ErrorAlertStrategyNameDuplicateWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorAlertStrategyNameDuplicateID, fmt.Sprintf(format, args...))
}

// ErrorI18nAlertStrategyNameDuplicate 用于表单验证错误
//
//	STRATEGY_NAME_DUPLICATE
//	策略名称重复
//	支持国际化输出
func ErrorI18nAlertStrategyNameDuplicate(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "策略名称重复"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(400, ErrorAlertStrategyNameDuplicateID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorAlertStrategyNameDuplicateID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(400, ErrorAlertStrategyNameDuplicateID, msg).WithCause(err1)
		} else {
			err = errors.New(400, ErrorAlertStrategyNameDuplicateID, localize)
		}
	}

	return err
}

const ErrorAlertStrategyGroupTypeNotExistID = "ALERT__STRATEGY_GROUP_TYPE_NOT_EXIST"

// IsAlertStrategyGroupTypeNotExist 用于表单验证错误
//
//	STRATEGY_GROUP_TYPE_NOT_EXIST
//	策略组类型不存在
func IsAlertStrategyGroupTypeNotExist(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorAlertStrategyGroupTypeNotExistID && e.Code == 400
}

// ErrorAlertStrategyGroupTypeNotExist 用于表单验证错误
//
//	STRATEGY_GROUP_TYPE_NOT_EXIST
//	策略组类型不存在
func ErrorAlertStrategyGroupTypeNotExist(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorAlertStrategyGroupTypeNotExistID, fmt.Sprintf(format, args...))
}

// ErrorAlertStrategyGroupTypeNotExistWithContext 用于表单验证错误
//
//	STRATEGY_GROUP_TYPE_NOT_EXIST
//	策略组类型不存在
//	带上下文，支持国际化输出元数据
func ErrorAlertStrategyGroupTypeNotExistWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorAlertStrategyGroupTypeNotExistID, fmt.Sprintf(format, args...))
}

// ErrorI18nAlertStrategyGroupTypeNotExist 用于表单验证错误
//
//	STRATEGY_GROUP_TYPE_NOT_EXIST
//	策略组类型不存在
//	支持国际化输出
func ErrorI18nAlertStrategyGroupTypeNotExist(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "策略组类型不存在"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(400, ErrorAlertStrategyGroupTypeNotExistID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorAlertStrategyGroupTypeNotExistID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(400, ErrorAlertStrategyGroupTypeNotExistID, msg).WithCause(err1)
		} else {
			err = errors.New(400, ErrorAlertStrategyGroupTypeNotExistID, localize)
		}
	}

	return err
}

const ErrorAlertStrategyTypeNotExistID = "ALERT__STRATEGY_TYPE_NOT_EXIST"

// IsAlertStrategyTypeNotExist 用于表单验证错误
//
//	STRATEGY_TYPE_NOT_EXIST
//	策略分类不存在
func IsAlertStrategyTypeNotExist(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorAlertStrategyTypeNotExistID && e.Code == 400
}

// ErrorAlertStrategyTypeNotExist 用于表单验证错误
//
//	STRATEGY_TYPE_NOT_EXIST
//	策略分类不存在
func ErrorAlertStrategyTypeNotExist(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorAlertStrategyTypeNotExistID, fmt.Sprintf(format, args...))
}

// ErrorAlertStrategyTypeNotExistWithContext 用于表单验证错误
//
//	STRATEGY_TYPE_NOT_EXIST
//	策略分类不存在
//	带上下文，支持国际化输出元数据
func ErrorAlertStrategyTypeNotExistWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorAlertStrategyTypeNotExistID, fmt.Sprintf(format, args...))
}

// ErrorI18nAlertStrategyTypeNotExist 用于表单验证错误
//
//	STRATEGY_TYPE_NOT_EXIST
//	策略分类不存在
//	支持国际化输出
func ErrorI18nAlertStrategyTypeNotExist(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "策略分类不存在"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(400, ErrorAlertStrategyTypeNotExistID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorAlertStrategyTypeNotExistID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(400, ErrorAlertStrategyTypeNotExistID, msg).WithCause(err1)
		} else {
			err = errors.New(400, ErrorAlertStrategyTypeNotExistID, localize)
		}
	}

	return err
}

const ErrorAlertAlertGroupNotFoundID = "ALERT__ALERT_GROUP_NOT_FOUND"

// IsAlertAlertGroupNotFound 用于表单验证错误
//
//	ALERT_GROUP_NOT_FOUND
//	告警组不存在
func IsAlertAlertGroupNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorAlertAlertGroupNotFoundID && e.Code == 400
}

// ErrorAlertAlertGroupNotFound 用于表单验证错误
//
//	ALERT_GROUP_NOT_FOUND
//	告警组不存在
func ErrorAlertAlertGroupNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorAlertAlertGroupNotFoundID, fmt.Sprintf(format, args...))
}

// ErrorAlertAlertGroupNotFoundWithContext 用于表单验证错误
//
//	ALERT_GROUP_NOT_FOUND
//	告警组不存在
//	带上下文，支持国际化输出元数据
func ErrorAlertAlertGroupNotFoundWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorAlertAlertGroupNotFoundID, fmt.Sprintf(format, args...))
}

// ErrorI18nAlertAlertGroupNotFound 用于表单验证错误
//
//	ALERT_GROUP_NOT_FOUND
//	告警组不存在
//	支持国际化输出
func ErrorI18nAlertAlertGroupNotFound(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "告警组不存在"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(400, ErrorAlertAlertGroupNotFoundID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorAlertAlertGroupNotFoundID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(400, ErrorAlertAlertGroupNotFoundID, msg).WithCause(err1)
		} else {
			err = errors.New(400, ErrorAlertAlertGroupNotFoundID, localize)
		}
	}

	return err
}

const ErrorAlertStrategyGroupNotFoundID = "ALERT__STRATEGY_GROUP_NOT_FOUND"

// IsAlertStrategyGroupNotFound 用于表单验证错误
//
//	STRATEGY_GROUP_NOT_FOUND
//	策略组不存在
func IsAlertStrategyGroupNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorAlertStrategyGroupNotFoundID && e.Code == 400
}

// ErrorAlertStrategyGroupNotFound 用于表单验证错误
//
//	STRATEGY_GROUP_NOT_FOUND
//	策略组不存在
func ErrorAlertStrategyGroupNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorAlertStrategyGroupNotFoundID, fmt.Sprintf(format, args...))
}

// ErrorAlertStrategyGroupNotFoundWithContext 用于表单验证错误
//
//	STRATEGY_GROUP_NOT_FOUND
//	策略组不存在
//	带上下文，支持国际化输出元数据
func ErrorAlertStrategyGroupNotFoundWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorAlertStrategyGroupNotFoundID, fmt.Sprintf(format, args...))
}

// ErrorI18nAlertStrategyGroupNotFound 用于表单验证错误
//
//	STRATEGY_GROUP_NOT_FOUND
//	策略组不存在
//	支持国际化输出
func ErrorI18nAlertStrategyGroupNotFound(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "策略组不存在"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(400, ErrorAlertStrategyGroupNotFoundID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorAlertStrategyGroupNotFoundID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(400, ErrorAlertStrategyGroupNotFoundID, msg).WithCause(err1)
		} else {
			err = errors.New(400, ErrorAlertStrategyGroupNotFoundID, localize)
		}
	}

	return err
}

const ErrorAlertDatasourceNotFoundID = "ALERT__DATASOURCE_NOT_FOUND"

// IsAlertDatasourceNotFound 用于表单验证错误
//
//	DATASOURCE_NOT_FOUND
//	数据源不存在
func IsAlertDatasourceNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorAlertDatasourceNotFoundID && e.Code == 400
}

// ErrorAlertDatasourceNotFound 用于表单验证错误
//
//	DATASOURCE_NOT_FOUND
//	数据源不存在
func ErrorAlertDatasourceNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorAlertDatasourceNotFoundID, fmt.Sprintf(format, args...))
}

// ErrorAlertDatasourceNotFoundWithContext 用于表单验证错误
//
//	DATASOURCE_NOT_FOUND
//	数据源不存在
//	带上下文，支持国际化输出元数据
func ErrorAlertDatasourceNotFoundWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorAlertDatasourceNotFoundID, fmt.Sprintf(format, args...))
}

// ErrorI18nAlertDatasourceNotFound 用于表单验证错误
//
//	DATASOURCE_NOT_FOUND
//	数据源不存在
//	支持国际化输出
func ErrorI18nAlertDatasourceNotFound(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "数据源不存在"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(400, ErrorAlertDatasourceNotFoundID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorAlertDatasourceNotFoundID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(400, ErrorAlertDatasourceNotFoundID, msg).WithCause(err1)
		} else {
			err = errors.New(400, ErrorAlertDatasourceNotFoundID, localize)
		}
	}

	return err
}

const ErrorAlertAlertPageNotFoundID = "ALERT__ALERT_PAGE_NOT_FOUND"

// IsAlertAlertPageNotFound 用于表单验证错误
//
//	ALERT_PAGE_NOT_FOUND
//	告警页面不存在
func IsAlertAlertPageNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorAlertAlertPageNotFoundID && e.Code == 400
}

// ErrorAlertAlertPageNotFound 用于表单验证错误
//
//	ALERT_PAGE_NOT_FOUND
//	告警页面不存在
func ErrorAlertAlertPageNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorAlertAlertPageNotFoundID, fmt.Sprintf(format, args...))
}

// ErrorAlertAlertPageNotFoundWithContext 用于表单验证错误
//
//	ALERT_PAGE_NOT_FOUND
//	告警页面不存在
//	带上下文，支持国际化输出元数据
func ErrorAlertAlertPageNotFoundWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorAlertAlertPageNotFoundID, fmt.Sprintf(format, args...))
}

// ErrorI18nAlertAlertPageNotFound 用于表单验证错误
//
//	ALERT_PAGE_NOT_FOUND
//	告警页面不存在
//	支持国际化输出
func ErrorI18nAlertAlertPageNotFound(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "告警页面不存在"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(400, ErrorAlertAlertPageNotFoundID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorAlertAlertPageNotFoundID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(400, ErrorAlertAlertPageNotFoundID, msg).WithCause(err1)
		} else {
			err = errors.New(400, ErrorAlertAlertPageNotFoundID, localize)
		}
	}

	return err
}

const ErrorAlertAlertLevelNotFoundID = "ALERT__ALERT_LEVEL_NOT_FOUND"

// IsAlertAlertLevelNotFound 用于表单验证错误
//
//	ALERT_LEVEL_NOT_FOUND
//	告警等级不存在
func IsAlertAlertLevelNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorAlertAlertLevelNotFoundID && e.Code == 400
}

// ErrorAlertAlertLevelNotFound 用于表单验证错误
//
//	ALERT_LEVEL_NOT_FOUND
//	告警等级不存在
func ErrorAlertAlertLevelNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorAlertAlertLevelNotFoundID, fmt.Sprintf(format, args...))
}

// ErrorAlertAlertLevelNotFoundWithContext 用于表单验证错误
//
//	ALERT_LEVEL_NOT_FOUND
//	告警等级不存在
//	带上下文，支持国际化输出元数据
func ErrorAlertAlertLevelNotFoundWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorAlertAlertLevelNotFoundID, fmt.Sprintf(format, args...))
}

// ErrorI18nAlertAlertLevelNotFound 用于表单验证错误
//
//	ALERT_LEVEL_NOT_FOUND
//	告警等级不存在
//	支持国际化输出
func ErrorI18nAlertAlertLevelNotFound(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "告警等级不存在"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(400, ErrorAlertAlertLevelNotFoundID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorAlertAlertLevelNotFoundID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(400, ErrorAlertAlertLevelNotFoundID, msg).WithCause(err1)
		} else {
			err = errors.New(400, ErrorAlertAlertLevelNotFoundID, localize)
		}
	}

	return err
}

const ErrorAlertStrategyTemplateNotFoundID = "ALERT__STRATEGY_TEMPLATE_NOT_FOUND"

// IsAlertStrategyTemplateNotFound 用于表单验证错误
//
//	STRATEGY_TEMPLATE_NOT_FOUND
//	策略模板不存在
func IsAlertStrategyTemplateNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorAlertStrategyTemplateNotFoundID && e.Code == 400
}

// ErrorAlertStrategyTemplateNotFound 用于表单验证错误
//
//	STRATEGY_TEMPLATE_NOT_FOUND
//	策略模板不存在
func ErrorAlertStrategyTemplateNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorAlertStrategyTemplateNotFoundID, fmt.Sprintf(format, args...))
}

// ErrorAlertStrategyTemplateNotFoundWithContext 用于表单验证错误
//
//	STRATEGY_TEMPLATE_NOT_FOUND
//	策略模板不存在
//	带上下文，支持国际化输出元数据
func ErrorAlertStrategyTemplateNotFoundWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorAlertStrategyTemplateNotFoundID, fmt.Sprintf(format, args...))
}

// ErrorI18nAlertStrategyTemplateNotFound 用于表单验证错误
//
//	STRATEGY_TEMPLATE_NOT_FOUND
//	策略模板不存在
//	支持国际化输出
func ErrorI18nAlertStrategyTemplateNotFound(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "策略模板不存在"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(400, ErrorAlertStrategyTemplateNotFoundID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorAlertStrategyTemplateNotFoundID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(400, ErrorAlertStrategyTemplateNotFoundID, msg).WithCause(err1)
		} else {
			err = errors.New(400, ErrorAlertStrategyTemplateNotFoundID, localize)
		}
	}

	return err
}

const ErrorModalID = "MODAL"

// IsModal 用于弹窗验证错误, 需要提供确认按钮和确认请求的幂等键
func IsModal(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorModalID && e.Code == 405
}

// ErrorModal 用于弹窗验证错误, 需要提供确认按钮和确认请求的幂等键
func ErrorModal(format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorModalID, fmt.Sprintf(format, args...))
}

// ErrorModalWithContext 用于弹窗验证错误, 需要提供确认按钮和确认请求的幂等键
//
//	带上下文，支持国际化输出元数据
func ErrorModalWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorModalID, fmt.Sprintf(format, args...))
}

// ErrorI18nModal 用于弹窗验证错误, 需要提供确认按钮和确认请求的幂等键
//
//	支持国际化输出
func ErrorI18nModal(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "请确认"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(405, ErrorModalID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorModalID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(405, ErrorModalID, msg).WithCause(err1)
		} else {
			err = errors.New(405, ErrorModalID, localize)
		}
	}

	return err
}

const ErrorModalConfirmDeleteID = "MODAL__CONFIRM_DELETE"

// IsModalConfirmDelete 用于弹窗验证错误, 需要提供确认按钮和确认请求的幂等键
//
//	CONFIRM_DELETE
//	确认删除
func IsModalConfirmDelete(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorModalConfirmDeleteID && e.Code == 405
}

// ErrorModalConfirmDelete 用于弹窗验证错误, 需要提供确认按钮和确认请求的幂等键
//
//	CONFIRM_DELETE
//	确认删除
func ErrorModalConfirmDelete(format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorModalConfirmDeleteID, fmt.Sprintf(format, args...))
}

// ErrorModalConfirmDeleteWithContext 用于弹窗验证错误, 需要提供确认按钮和确认请求的幂等键
//
//	CONFIRM_DELETE
//	确认删除
//	带上下文，支持国际化输出元数据
func ErrorModalConfirmDeleteWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorModalConfirmDeleteID, fmt.Sprintf(format, args...))
}

// ErrorI18nModalConfirmDelete 用于弹窗验证错误, 需要提供确认按钮和确认请求的幂等键
//
//	CONFIRM_DELETE
//	确认删除
//	支持国际化输出
func ErrorI18nModalConfirmDelete(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "确认删除"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(405, ErrorModalConfirmDeleteID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorModalConfirmDeleteID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(405, ErrorModalConfirmDeleteID, msg).WithCause(err1)
		} else {
			err = errors.New(405, ErrorModalConfirmDeleteID, localize)
		}
	}

	return err
}

const ErrorModalConfirmUpdateID = "MODAL__CONFIRM_UPDATE"

// IsModalConfirmUpdate 用于弹窗验证错误, 需要提供确认按钮和确认请求的幂等键
//
//	CONFIRM_UPDATE
//	确认修改
func IsModalConfirmUpdate(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorModalConfirmUpdateID && e.Code == 405
}

// ErrorModalConfirmUpdate 用于弹窗验证错误, 需要提供确认按钮和确认请求的幂等键
//
//	CONFIRM_UPDATE
//	确认修改
func ErrorModalConfirmUpdate(format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorModalConfirmUpdateID, fmt.Sprintf(format, args...))
}

// ErrorModalConfirmUpdateWithContext 用于弹窗验证错误, 需要提供确认按钮和确认请求的幂等键
//
//	CONFIRM_UPDATE
//	确认修改
//	带上下文，支持国际化输出元数据
func ErrorModalConfirmUpdateWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorModalConfirmUpdateID, fmt.Sprintf(format, args...))
}

// ErrorI18nModalConfirmUpdate 用于弹窗验证错误, 需要提供确认按钮和确认请求的幂等键
//
//	CONFIRM_UPDATE
//	确认修改
//	支持国际化输出
func ErrorI18nModalConfirmUpdate(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "确认修改"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(405, ErrorModalConfirmUpdateID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorModalConfirmUpdateID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(405, ErrorModalConfirmUpdateID, msg).WithCause(err1)
		} else {
			err = errors.New(405, ErrorModalConfirmUpdateID, localize)
		}
	}

	return err
}

const ErrorToastID = "TOAST"

// IsToast 用于toast验证错误， 资源不存在或者已存在时候提示
func IsToast(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorToastID && e.Code == 404
}

// ErrorToast 用于toast验证错误， 资源不存在或者已存在时候提示
func ErrorToast(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastID, fmt.Sprintf(format, args...))
}

// ErrorToastWithContext 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	带上下文，支持国际化输出元数据
func ErrorToastWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastID, fmt.Sprintf(format, args...))
}

// ErrorI18nToast 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	支持国际化输出
func ErrorI18nToast(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "资源不存在"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(404, ErrorToastID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorToastID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(404, ErrorToastID, msg).WithCause(err1)
		} else {
			err = errors.New(404, ErrorToastID, localize)
		}
	}

	return err
}

const ErrorToastResourceNotFoundID = "TOAST__RESOURCE_NOT_FOUND"

// IsToastResourceNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	RESOURCE_NOT_FOUND
//	资源不存在
func IsToastResourceNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorToastResourceNotFoundID && e.Code == 404
}

// ErrorToastResourceNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	RESOURCE_NOT_FOUND
//	资源不存在
func ErrorToastResourceNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastResourceNotFoundID, fmt.Sprintf(format, args...))
}

// ErrorToastResourceNotFoundWithContext 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	RESOURCE_NOT_FOUND
//	资源不存在
//	带上下文，支持国际化输出元数据
func ErrorToastResourceNotFoundWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastResourceNotFoundID, fmt.Sprintf(format, args...))
}

// ErrorI18nToastResourceNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	RESOURCE_NOT_FOUND
//	资源不存在
//	支持国际化输出
func ErrorI18nToastResourceNotFound(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "资源不存在"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(404, ErrorToastResourceNotFoundID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorToastResourceNotFoundID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(404, ErrorToastResourceNotFoundID, msg).WithCause(err1)
		} else {
			err = errors.New(404, ErrorToastResourceNotFoundID, localize)
		}
	}

	return err
}

const ErrorToastResourceExistID = "TOAST__RESOURCE_EXIST"

// IsToastResourceExist 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	RESOURCE_EXIST
//	资源已存在
func IsToastResourceExist(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorToastResourceExistID && e.Code == 404
}

// ErrorToastResourceExist 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	RESOURCE_EXIST
//	资源已存在
func ErrorToastResourceExist(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastResourceExistID, fmt.Sprintf(format, args...))
}

// ErrorToastResourceExistWithContext 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	RESOURCE_EXIST
//	资源已存在
//	带上下文，支持国际化输出元数据
func ErrorToastResourceExistWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastResourceExistID, fmt.Sprintf(format, args...))
}

// ErrorI18nToastResourceExist 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	RESOURCE_EXIST
//	资源已存在
//	支持国际化输出
func ErrorI18nToastResourceExist(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "资源已存在"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(404, ErrorToastResourceExistID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorToastResourceExistID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(404, ErrorToastResourceExistID, msg).WithCause(err1)
		} else {
			err = errors.New(404, ErrorToastResourceExistID, localize)
		}
	}

	return err
}

const ErrorToastUserNotFoundID = "TOAST__USER_NOT_FOUND"

// IsToastUserNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	USER_NOT_FOUND
//	用户不存在
func IsToastUserNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorToastUserNotFoundID && e.Code == 404
}

// ErrorToastUserNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	USER_NOT_FOUND
//	用户不存在
func ErrorToastUserNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastUserNotFoundID, fmt.Sprintf(format, args...))
}

// ErrorToastUserNotFoundWithContext 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	USER_NOT_FOUND
//	用户不存在
//	带上下文，支持国际化输出元数据
func ErrorToastUserNotFoundWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastUserNotFoundID, fmt.Sprintf(format, args...))
}

// ErrorI18nToastUserNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	USER_NOT_FOUND
//	用户不存在
//	支持国际化输出
func ErrorI18nToastUserNotFound(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "用户不存在"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(404, ErrorToastUserNotFoundID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorToastUserNotFoundID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(404, ErrorToastUserNotFoundID, msg).WithCause(err1)
		} else {
			err = errors.New(404, ErrorToastUserNotFoundID, localize)
		}
	}

	return err
}

const ErrorToastUsernameExistID = "TOAST__USERNAME_EXIST"

// IsToastUsernameExist 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	USERNAME_EXIST
//	用户名已存在
func IsToastUsernameExist(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorToastUsernameExistID && e.Code == 404
}

// ErrorToastUsernameExist 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	USERNAME_EXIST
//	用户名已存在
func ErrorToastUsernameExist(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastUsernameExistID, fmt.Sprintf(format, args...))
}

// ErrorToastUsernameExistWithContext 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	USERNAME_EXIST
//	用户名已存在
//	带上下文，支持国际化输出元数据
func ErrorToastUsernameExistWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastUsernameExistID, fmt.Sprintf(format, args...))
}

// ErrorI18nToastUsernameExist 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	USERNAME_EXIST
//	用户名已存在
//	支持国际化输出
func ErrorI18nToastUsernameExist(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "用户名已存在"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(404, ErrorToastUsernameExistID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorToastUsernameExistID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(404, ErrorToastUsernameExistID, msg).WithCause(err1)
		} else {
			err = errors.New(404, ErrorToastUsernameExistID, localize)
		}
	}

	return err
}

const ErrorToastAlertGroupNotFoundID = "TOAST__ALERT_GROUP_NOT_FOUND"

// IsToastAlertGroupNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	ALERT_GROUP_NOT_FOUND
//	告警组不存在
func IsToastAlertGroupNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorToastAlertGroupNotFoundID && e.Code == 404
}

// ErrorToastAlertGroupNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	ALERT_GROUP_NOT_FOUND
//	告警组不存在
func ErrorToastAlertGroupNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastAlertGroupNotFoundID, fmt.Sprintf(format, args...))
}

// ErrorToastAlertGroupNotFoundWithContext 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	ALERT_GROUP_NOT_FOUND
//	告警组不存在
//	带上下文，支持国际化输出元数据
func ErrorToastAlertGroupNotFoundWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastAlertGroupNotFoundID, fmt.Sprintf(format, args...))
}

// ErrorI18nToastAlertGroupNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	ALERT_GROUP_NOT_FOUND
//	告警组不存在
//	支持国际化输出
func ErrorI18nToastAlertGroupNotFound(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "告警组不存在"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(404, ErrorToastAlertGroupNotFoundID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorToastAlertGroupNotFoundID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(404, ErrorToastAlertGroupNotFoundID, msg).WithCause(err1)
		} else {
			err = errors.New(404, ErrorToastAlertGroupNotFoundID, localize)
		}
	}

	return err
}

const ErrorToastDatasourceSyncingID = "TOAST__DATASOURCE_SYNCING"

// IsToastDatasourceSyncing 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	DATASOURCE_SYNCING
//	数据源同步中
func IsToastDatasourceSyncing(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorToastDatasourceSyncingID && e.Code == 404
}

// ErrorToastDatasourceSyncing 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	DATASOURCE_SYNCING
//	数据源同步中
func ErrorToastDatasourceSyncing(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastDatasourceSyncingID, fmt.Sprintf(format, args...))
}

// ErrorToastDatasourceSyncingWithContext 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	DATASOURCE_SYNCING
//	数据源同步中
//	带上下文，支持国际化输出元数据
func ErrorToastDatasourceSyncingWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastDatasourceSyncingID, fmt.Sprintf(format, args...))
}

// ErrorI18nToastDatasourceSyncing 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	DATASOURCE_SYNCING
//	数据源同步中
//	支持国际化输出
func ErrorI18nToastDatasourceSyncing(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "数据源同步中"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(404, ErrorToastDatasourceSyncingID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorToastDatasourceSyncingID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(404, ErrorToastDatasourceSyncingID, msg).WithCause(err1)
		} else {
			err = errors.New(404, ErrorToastDatasourceSyncingID, localize)
		}
	}

	return err
}

const ErrorToastUserNotSubscribeID = "TOAST__USER_NOT_SUBSCRIBE"

// IsToastUserNotSubscribe 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	USER_NOT_SUBSCRIBE
//	用户未订阅此策略
func IsToastUserNotSubscribe(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorToastUserNotSubscribeID && e.Code == 404
}

// ErrorToastUserNotSubscribe 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	USER_NOT_SUBSCRIBE
//	用户未订阅此策略
func ErrorToastUserNotSubscribe(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastUserNotSubscribeID, fmt.Sprintf(format, args...))
}

// ErrorToastUserNotSubscribeWithContext 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	USER_NOT_SUBSCRIBE
//	用户未订阅此策略
//	带上下文，支持国际化输出元数据
func ErrorToastUserNotSubscribeWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastUserNotSubscribeID, fmt.Sprintf(format, args...))
}

// ErrorI18nToastUserNotSubscribe 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	USER_NOT_SUBSCRIBE
//	用户未订阅此策略
//	支持国际化输出
func ErrorI18nToastUserNotSubscribe(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "用户未订阅此策略"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(404, ErrorToastUserNotSubscribeID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorToastUserNotSubscribeID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(404, ErrorToastUserNotSubscribeID, msg).WithCause(err1)
		} else {
			err = errors.New(404, ErrorToastUserNotSubscribeID, localize)
		}
	}

	return err
}

const ErrorToastTeamNotFoundID = "TOAST__TEAM_NOT_FOUND"

// IsToastTeamNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	TEAM_NOT_FOUND
//	团队不存在
func IsToastTeamNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorToastTeamNotFoundID && e.Code == 404
}

// ErrorToastTeamNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	TEAM_NOT_FOUND
//	团队不存在
func ErrorToastTeamNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastTeamNotFoundID, fmt.Sprintf(format, args...))
}

// ErrorToastTeamNotFoundWithContext 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	TEAM_NOT_FOUND
//	团队不存在
//	带上下文，支持国际化输出元数据
func ErrorToastTeamNotFoundWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastTeamNotFoundID, fmt.Sprintf(format, args...))
}

// ErrorI18nToastTeamNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	TEAM_NOT_FOUND
//	团队不存在
//	支持国际化输出
func ErrorI18nToastTeamNotFound(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "团队不存在"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(404, ErrorToastTeamNotFoundID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorToastTeamNotFoundID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(404, ErrorToastTeamNotFoundID, msg).WithCause(err1)
		} else {
			err = errors.New(404, ErrorToastTeamNotFoundID, localize)
		}
	}

	return err
}

const ErrorToastUserNotAllowRemoveSelfID = "TOAST__USER_NOT_ALLOW_REMOVE_SELF"

// IsToastUserNotAllowRemoveSelf 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	USER_NOT_ALLOW_REMOVE_SELF
//	不允许移除自己
func IsToastUserNotAllowRemoveSelf(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorToastUserNotAllowRemoveSelfID && e.Code == 404
}

// ErrorToastUserNotAllowRemoveSelf 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	USER_NOT_ALLOW_REMOVE_SELF
//	不允许移除自己
func ErrorToastUserNotAllowRemoveSelf(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastUserNotAllowRemoveSelfID, fmt.Sprintf(format, args...))
}

// ErrorToastUserNotAllowRemoveSelfWithContext 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	USER_NOT_ALLOW_REMOVE_SELF
//	不允许移除自己
//	带上下文，支持国际化输出元数据
func ErrorToastUserNotAllowRemoveSelfWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastUserNotAllowRemoveSelfID, fmt.Sprintf(format, args...))
}

// ErrorI18nToastUserNotAllowRemoveSelf 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	USER_NOT_ALLOW_REMOVE_SELF
//	不允许移除自己
//	支持国际化输出
func ErrorI18nToastUserNotAllowRemoveSelf(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "不允许移除自己"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(404, ErrorToastUserNotAllowRemoveSelfID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorToastUserNotAllowRemoveSelfID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(404, ErrorToastUserNotAllowRemoveSelfID, msg).WithCause(err1)
		} else {
			err = errors.New(404, ErrorToastUserNotAllowRemoveSelfID, localize)
		}
	}

	return err
}

const ErrorToastUserNotAllowRemoveAdminID = "TOAST__USER_NOT_ALLOW_REMOVE_ADMIN"

// IsToastUserNotAllowRemoveAdmin 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	USER_NOT_ALLOW_REMOVE_ADMIN
//	不允许移除团队管理员
func IsToastUserNotAllowRemoveAdmin(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorToastUserNotAllowRemoveAdminID && e.Code == 404
}

// ErrorToastUserNotAllowRemoveAdmin 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	USER_NOT_ALLOW_REMOVE_ADMIN
//	不允许移除团队管理员
func ErrorToastUserNotAllowRemoveAdmin(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastUserNotAllowRemoveAdminID, fmt.Sprintf(format, args...))
}

// ErrorToastUserNotAllowRemoveAdminWithContext 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	USER_NOT_ALLOW_REMOVE_ADMIN
//	不允许移除团队管理员
//	带上下文，支持国际化输出元数据
func ErrorToastUserNotAllowRemoveAdminWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastUserNotAllowRemoveAdminID, fmt.Sprintf(format, args...))
}

// ErrorI18nToastUserNotAllowRemoveAdmin 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	USER_NOT_ALLOW_REMOVE_ADMIN
//	不允许移除团队管理员
//	支持国际化输出
func ErrorI18nToastUserNotAllowRemoveAdmin(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "不允许移除团队管理员"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(404, ErrorToastUserNotAllowRemoveAdminID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorToastUserNotAllowRemoveAdminID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(404, ErrorToastUserNotAllowRemoveAdminID, msg).WithCause(err1)
		} else {
			err = errors.New(404, ErrorToastUserNotAllowRemoveAdminID, localize)
		}
	}

	return err
}

const ErrorToastUserNotAllowOperateAdminID = "TOAST__USER_NOT_ALLOW_OPERATE_ADMIN"

// IsToastUserNotAllowOperateAdmin 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	USER_NOT_ALLOW_OPERATE_ADMIN
//	不允许操作自己的管理员身份
func IsToastUserNotAllowOperateAdmin(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorToastUserNotAllowOperateAdminID && e.Code == 404
}

// ErrorToastUserNotAllowOperateAdmin 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	USER_NOT_ALLOW_OPERATE_ADMIN
//	不允许操作自己的管理员身份
func ErrorToastUserNotAllowOperateAdmin(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastUserNotAllowOperateAdminID, fmt.Sprintf(format, args...))
}

// ErrorToastUserNotAllowOperateAdminWithContext 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	USER_NOT_ALLOW_OPERATE_ADMIN
//	不允许操作自己的管理员身份
//	带上下文，支持国际化输出元数据
func ErrorToastUserNotAllowOperateAdminWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastUserNotAllowOperateAdminID, fmt.Sprintf(format, args...))
}

// ErrorI18nToastUserNotAllowOperateAdmin 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	USER_NOT_ALLOW_OPERATE_ADMIN
//	不允许操作自己的管理员身份
//	支持国际化输出
func ErrorI18nToastUserNotAllowOperateAdmin(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "不允许操作自己的管理员身份"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(404, ErrorToastUserNotAllowOperateAdminID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorToastUserNotAllowOperateAdminID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(404, ErrorToastUserNotAllowOperateAdminID, msg).WithCause(err1)
		} else {
			err = errors.New(404, ErrorToastUserNotAllowOperateAdminID, localize)
		}
	}

	return err
}

const ErrorToastRoleNotFoundID = "TOAST__ROLE_NOT_FOUND"

// IsToastRoleNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	ROLE_NOT_FOUND
//	角色不存在
func IsToastRoleNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorToastRoleNotFoundID && e.Code == 404
}

// ErrorToastRoleNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	ROLE_NOT_FOUND
//	角色不存在
func ErrorToastRoleNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastRoleNotFoundID, fmt.Sprintf(format, args...))
}

// ErrorToastRoleNotFoundWithContext 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	ROLE_NOT_FOUND
//	角色不存在
//	带上下文，支持国际化输出元数据
func ErrorToastRoleNotFoundWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastRoleNotFoundID, fmt.Sprintf(format, args...))
}

// ErrorI18nToastRoleNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	ROLE_NOT_FOUND
//	角色不存在
//	支持国际化输出
func ErrorI18nToastRoleNotFound(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "角色不存在"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(404, ErrorToastRoleNotFoundID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorToastRoleNotFoundID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(404, ErrorToastRoleNotFoundID, msg).WithCause(err1)
		} else {
			err = errors.New(404, ErrorToastRoleNotFoundID, localize)
		}
	}

	return err
}

const ErrorToastTemplateStrategyNotFoundID = "TOAST__TEMPLATE_STRATEGY_NOT_FOUND"

// IsToastTemplateStrategyNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	TEMPLATE_STRATEGY_NOT_FOUND
//	策略模板不存在
func IsToastTemplateStrategyNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorToastTemplateStrategyNotFoundID && e.Code == 404
}

// ErrorToastTemplateStrategyNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	TEMPLATE_STRATEGY_NOT_FOUND
//	策略模板不存在
func ErrorToastTemplateStrategyNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastTemplateStrategyNotFoundID, fmt.Sprintf(format, args...))
}

// ErrorToastTemplateStrategyNotFoundWithContext 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	TEMPLATE_STRATEGY_NOT_FOUND
//	策略模板不存在
//	带上下文，支持国际化输出元数据
func ErrorToastTemplateStrategyNotFoundWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastTemplateStrategyNotFoundID, fmt.Sprintf(format, args...))
}

// ErrorI18nToastTemplateStrategyNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	TEMPLATE_STRATEGY_NOT_FOUND
//	策略模板不存在
//	支持国际化输出
func ErrorI18nToastTemplateStrategyNotFound(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "策略模板不存在"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(404, ErrorToastTemplateStrategyNotFoundID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorToastTemplateStrategyNotFoundID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(404, ErrorToastTemplateStrategyNotFoundID, msg).WithCause(err1)
		} else {
			err = errors.New(404, ErrorToastTemplateStrategyNotFoundID, localize)
		}
	}

	return err
}

const ErrorToastUserNotExistID = "TOAST__USER_NOT_EXIST"

// IsToastUserNotExist 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	USER_NOT_EXIST
//	用户不存在
func IsToastUserNotExist(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorToastUserNotExistID && e.Code == 404
}

// ErrorToastUserNotExist 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	USER_NOT_EXIST
//	用户不存在
func ErrorToastUserNotExist(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastUserNotExistID, fmt.Sprintf(format, args...))
}

// ErrorToastUserNotExistWithContext 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	USER_NOT_EXIST
//	用户不存在
//	带上下文，支持国际化输出元数据
func ErrorToastUserNotExistWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastUserNotExistID, fmt.Sprintf(format, args...))
}

// ErrorI18nToastUserNotExist 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	USER_NOT_EXIST
//	用户不存在
//	支持国际化输出
func ErrorI18nToastUserNotExist(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "用户不存在"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(404, ErrorToastUserNotExistID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorToastUserNotExistID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(404, ErrorToastUserNotExistID, msg).WithCause(err1)
		} else {
			err = errors.New(404, ErrorToastUserNotExistID, localize)
		}
	}

	return err
}

const ErrorToastDashboardNotFoundID = "TOAST__DASHBOARD_NOT_FOUND"

// IsToastDashboardNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	DASHBOARD_NOT_FOUND
//	图表大盘不存在
func IsToastDashboardNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorToastDashboardNotFoundID && e.Code == 404
}

// ErrorToastDashboardNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	DASHBOARD_NOT_FOUND
//	图表大盘不存在
func ErrorToastDashboardNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastDashboardNotFoundID, fmt.Sprintf(format, args...))
}

// ErrorToastDashboardNotFoundWithContext 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	DASHBOARD_NOT_FOUND
//	图表大盘不存在
//	带上下文，支持国际化输出元数据
func ErrorToastDashboardNotFoundWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastDashboardNotFoundID, fmt.Sprintf(format, args...))
}

// ErrorI18nToastDashboardNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	DASHBOARD_NOT_FOUND
//	图表大盘不存在
//	支持国际化输出
func ErrorI18nToastDashboardNotFound(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "图表大盘不存在"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(404, ErrorToastDashboardNotFoundID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorToastDashboardNotFoundID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(404, ErrorToastDashboardNotFoundID, msg).WithCause(err1)
		} else {
			err = errors.New(404, ErrorToastDashboardNotFoundID, localize)
		}
	}

	return err
}

const ErrorToastRealtimeAlarmNotFoundID = "TOAST__REALTIME_ALARM_NOT_FOUND"

// IsToastRealtimeAlarmNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	REALTIME_ALARM_NOT_FOUND
//	实时告警不存在
func IsToastRealtimeAlarmNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorToastRealtimeAlarmNotFoundID && e.Code == 404
}

// ErrorToastRealtimeAlarmNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	REALTIME_ALARM_NOT_FOUND
//	实时告警不存在
func ErrorToastRealtimeAlarmNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastRealtimeAlarmNotFoundID, fmt.Sprintf(format, args...))
}

// ErrorToastRealtimeAlarmNotFoundWithContext 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	REALTIME_ALARM_NOT_FOUND
//	实时告警不存在
//	带上下文，支持国际化输出元数据
func ErrorToastRealtimeAlarmNotFoundWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastRealtimeAlarmNotFoundID, fmt.Sprintf(format, args...))
}

// ErrorI18nToastRealtimeAlarmNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	REALTIME_ALARM_NOT_FOUND
//	实时告警不存在
//	支持国际化输出
func ErrorI18nToastRealtimeAlarmNotFound(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "实时告警不存在"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(404, ErrorToastRealtimeAlarmNotFoundID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorToastRealtimeAlarmNotFoundID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(404, ErrorToastRealtimeAlarmNotFoundID, msg).WithCause(err1)
		} else {
			err = errors.New(404, ErrorToastRealtimeAlarmNotFoundID, localize)
		}
	}

	return err
}

const ErrorToastHistoryAlarmNotFoundID = "TOAST__HISTORY_ALARM_NOT_FOUND"

// IsToastHistoryAlarmNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	HISTORY_ALARM_NOT_FOUND
//	历史告警不存在
func IsToastHistoryAlarmNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorToastHistoryAlarmNotFoundID && e.Code == 404
}

// ErrorToastHistoryAlarmNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	HISTORY_ALARM_NOT_FOUND
//	历史告警不存在
func ErrorToastHistoryAlarmNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastHistoryAlarmNotFoundID, fmt.Sprintf(format, args...))
}

// ErrorToastHistoryAlarmNotFoundWithContext 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	HISTORY_ALARM_NOT_FOUND
//	历史告警不存在
//	带上下文，支持国际化输出元数据
func ErrorToastHistoryAlarmNotFoundWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastHistoryAlarmNotFoundID, fmt.Sprintf(format, args...))
}

// ErrorI18nToastHistoryAlarmNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	HISTORY_ALARM_NOT_FOUND
//	历史告警不存在
//	支持国际化输出
func ErrorI18nToastHistoryAlarmNotFound(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "历史告警不存在"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(404, ErrorToastHistoryAlarmNotFoundID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorToastHistoryAlarmNotFoundID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(404, ErrorToastHistoryAlarmNotFoundID, msg).WithCause(err1)
		} else {
			err = errors.New(404, ErrorToastHistoryAlarmNotFoundID, localize)
		}
	}

	return err
}

const ErrorToastDataSourceNotFoundID = "TOAST__DATA_SOURCE_NOT_FOUND"

// IsToastDataSourceNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	DATA_SOURCE_NOT_FOUND
//	数据源不存在
func IsToastDataSourceNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorToastDataSourceNotFoundID && e.Code == 404
}

// ErrorToastDataSourceNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	DATA_SOURCE_NOT_FOUND
//	数据源不存在
func ErrorToastDataSourceNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastDataSourceNotFoundID, fmt.Sprintf(format, args...))
}

// ErrorToastDataSourceNotFoundWithContext 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	DATA_SOURCE_NOT_FOUND
//	数据源不存在
//	带上下文，支持国际化输出元数据
func ErrorToastDataSourceNotFoundWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastDataSourceNotFoundID, fmt.Sprintf(format, args...))
}

// ErrorI18nToastDataSourceNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	DATA_SOURCE_NOT_FOUND
//	数据源不存在
//	支持国际化输出
func ErrorI18nToastDataSourceNotFound(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "数据源不存在"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(404, ErrorToastDataSourceNotFoundID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorToastDataSourceNotFoundID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(404, ErrorToastDataSourceNotFoundID, msg).WithCause(err1)
		} else {
			err = errors.New(404, ErrorToastDataSourceNotFoundID, localize)
		}
	}

	return err
}

const ErrorToastDictNotFoundID = "TOAST__DICT_NOT_FOUND"

// IsToastDictNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	DICT_NOT_FOUND
//	字典不存在
func IsToastDictNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorToastDictNotFoundID && e.Code == 404
}

// ErrorToastDictNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	DICT_NOT_FOUND
//	字典不存在
func ErrorToastDictNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastDictNotFoundID, fmt.Sprintf(format, args...))
}

// ErrorToastDictNotFoundWithContext 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	DICT_NOT_FOUND
//	字典不存在
//	带上下文，支持国际化输出元数据
func ErrorToastDictNotFoundWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastDictNotFoundID, fmt.Sprintf(format, args...))
}

// ErrorI18nToastDictNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	DICT_NOT_FOUND
//	字典不存在
//	支持国际化输出
func ErrorI18nToastDictNotFound(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "字典不存在"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(404, ErrorToastDictNotFoundID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorToastDictNotFoundID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(404, ErrorToastDictNotFoundID, msg).WithCause(err1)
		} else {
			err = errors.New(404, ErrorToastDictNotFoundID, localize)
		}
	}

	return err
}

const ErrorToastAlarmHookNotFoundID = "TOAST__ALARM_HOOK_NOT_FOUND"

// IsToastAlarmHookNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	ALARM_HOOK_NOT_FOUND
//	告警hook不存在
func IsToastAlarmHookNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorToastAlarmHookNotFoundID && e.Code == 404
}

// ErrorToastAlarmHookNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	ALARM_HOOK_NOT_FOUND
//	告警hook不存在
func ErrorToastAlarmHookNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastAlarmHookNotFoundID, fmt.Sprintf(format, args...))
}

// ErrorToastAlarmHookNotFoundWithContext 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	ALARM_HOOK_NOT_FOUND
//	告警hook不存在
//	带上下文，支持国际化输出元数据
func ErrorToastAlarmHookNotFoundWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastAlarmHookNotFoundID, fmt.Sprintf(format, args...))
}

// ErrorI18nToastAlarmHookNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	ALARM_HOOK_NOT_FOUND
//	告警hook不存在
//	支持国际化输出
func ErrorI18nToastAlarmHookNotFound(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "告警hook不存在"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(404, ErrorToastAlarmHookNotFoundID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorToastAlarmHookNotFoundID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(404, ErrorToastAlarmHookNotFoundID, msg).WithCause(err1)
		} else {
			err = errors.New(404, ErrorToastAlarmHookNotFoundID, localize)
		}
	}

	return err
}

const ErrorToastMenuNotFoundID = "TOAST__MENU_NOT_FOUND"

// IsToastMenuNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	MENU_NOT_FOUND
//	菜单不存在
func IsToastMenuNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorToastMenuNotFoundID && e.Code == 404
}

// ErrorToastMenuNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	MENU_NOT_FOUND
//	菜单不存在
func ErrorToastMenuNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastMenuNotFoundID, fmt.Sprintf(format, args...))
}

// ErrorToastMenuNotFoundWithContext 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	MENU_NOT_FOUND
//	菜单不存在
//	带上下文，支持国际化输出元数据
func ErrorToastMenuNotFoundWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastMenuNotFoundID, fmt.Sprintf(format, args...))
}

// ErrorI18nToastMenuNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	MENU_NOT_FOUND
//	菜单不存在
//	支持国际化输出
func ErrorI18nToastMenuNotFound(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "菜单不存在"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(404, ErrorToastMenuNotFoundID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorToastMenuNotFoundID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(404, ErrorToastMenuNotFoundID, msg).WithCause(err1)
		} else {
			err = errors.New(404, ErrorToastMenuNotFoundID, localize)
		}
	}

	return err
}

const ErrorToastMetricNotFoundID = "TOAST__METRIC_NOT_FOUND"

// IsToastMetricNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	METRIC_NOT_FOUND
//	指标不存在
func IsToastMetricNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorToastMetricNotFoundID && e.Code == 404
}

// ErrorToastMetricNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	METRIC_NOT_FOUND
//	指标不存在
func ErrorToastMetricNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastMetricNotFoundID, fmt.Sprintf(format, args...))
}

// ErrorToastMetricNotFoundWithContext 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	METRIC_NOT_FOUND
//	指标不存在
//	带上下文，支持国际化输出元数据
func ErrorToastMetricNotFoundWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastMetricNotFoundID, fmt.Sprintf(format, args...))
}

// ErrorI18nToastMetricNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	METRIC_NOT_FOUND
//	指标不存在
//	支持国际化输出
func ErrorI18nToastMetricNotFound(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "指标不存在"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(404, ErrorToastMetricNotFoundID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorToastMetricNotFoundID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(404, ErrorToastMetricNotFoundID, msg).WithCause(err1)
		} else {
			err = errors.New(404, ErrorToastMetricNotFoundID, localize)
		}
	}

	return err
}

const ErrorToastApiNotFoundID = "TOAST__API_NOT_FOUND"

// IsToastApiNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	API_NOT_FOUND
//	API不存在
func IsToastApiNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorToastApiNotFoundID && e.Code == 404
}

// ErrorToastApiNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	API_NOT_FOUND
//	API不存在
func ErrorToastApiNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastApiNotFoundID, fmt.Sprintf(format, args...))
}

// ErrorToastApiNotFoundWithContext 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	API_NOT_FOUND
//	API不存在
//	带上下文，支持国际化输出元数据
func ErrorToastApiNotFoundWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastApiNotFoundID, fmt.Sprintf(format, args...))
}

// ErrorI18nToastApiNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	API_NOT_FOUND
//	API不存在
//	支持国际化输出
func ErrorI18nToastApiNotFound(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "API不存在"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(404, ErrorToastApiNotFoundID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorToastApiNotFoundID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(404, ErrorToastApiNotFoundID, msg).WithCause(err1)
		} else {
			err = errors.New(404, ErrorToastApiNotFoundID, localize)
		}
	}

	return err
}

const ErrorToastStrategyNotFoundID = "TOAST__STRATEGY_NOT_FOUND"

// IsToastStrategyNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	STRATEGY_NOT_FOUND
//	告警策略不存在
func IsToastStrategyNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorToastStrategyNotFoundID && e.Code == 404
}

// ErrorToastStrategyNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	STRATEGY_NOT_FOUND
//	告警策略不存在
func ErrorToastStrategyNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastStrategyNotFoundID, fmt.Sprintf(format, args...))
}

// ErrorToastStrategyNotFoundWithContext 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	STRATEGY_NOT_FOUND
//	告警策略不存在
//	带上下文，支持国际化输出元数据
func ErrorToastStrategyNotFoundWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastStrategyNotFoundID, fmt.Sprintf(format, args...))
}

// ErrorI18nToastStrategyNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	STRATEGY_NOT_FOUND
//	告警策略不存在
//	支持国际化输出
func ErrorI18nToastStrategyNotFound(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "告警策略不存在"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(404, ErrorToastStrategyNotFoundID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorToastStrategyNotFoundID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(404, ErrorToastStrategyNotFoundID, msg).WithCause(err1)
		} else {
			err = errors.New(404, ErrorToastStrategyNotFoundID, localize)
		}
	}

	return err
}

const ErrorToastStrategyGroupNotFoundID = "TOAST__STRATEGY_GROUP_NOT_FOUND"

// IsToastStrategyGroupNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	STRATEGY_GROUP_NOT_FOUND
//	策略组不存在
func IsToastStrategyGroupNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorToastStrategyGroupNotFoundID && e.Code == 404
}

// ErrorToastStrategyGroupNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	STRATEGY_GROUP_NOT_FOUND
//	策略组不存在
func ErrorToastStrategyGroupNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastStrategyGroupNotFoundID, fmt.Sprintf(format, args...))
}

// ErrorToastStrategyGroupNotFoundWithContext 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	STRATEGY_GROUP_NOT_FOUND
//	策略组不存在
//	带上下文，支持国际化输出元数据
func ErrorToastStrategyGroupNotFoundWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastStrategyGroupNotFoundID, fmt.Sprintf(format, args...))
}

// ErrorI18nToastStrategyGroupNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	STRATEGY_GROUP_NOT_FOUND
//	策略组不存在
//	支持国际化输出
func ErrorI18nToastStrategyGroupNotFound(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "策略组不存在"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(404, ErrorToastStrategyGroupNotFoundID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorToastStrategyGroupNotFoundID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(404, ErrorToastStrategyGroupNotFoundID, msg).WithCause(err1)
		} else {
			err = errors.New(404, ErrorToastStrategyGroupNotFoundID, localize)
		}
	}

	return err
}

const ErrorToastTeamInviteAlreadyExistsID = "TOAST__TEAM_INVITE_ALREADY_EXISTS"

// IsToastTeamInviteAlreadyExists 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	TEAM_INVITE_ALREADY_EXISTS
//	%s,邀请记录已存在,或者已经加入团队!
func IsToastTeamInviteAlreadyExists(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorToastTeamInviteAlreadyExistsID && e.Code == 404
}

// ErrorToastTeamInviteAlreadyExists 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	TEAM_INVITE_ALREADY_EXISTS
//	%s,邀请记录已存在,或者已经加入团队!
func ErrorToastTeamInviteAlreadyExists(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastTeamInviteAlreadyExistsID, fmt.Sprintf(format, args...))
}

// ErrorToastTeamInviteAlreadyExistsWithContext 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	TEAM_INVITE_ALREADY_EXISTS
//	%s,邀请记录已存在,或者已经加入团队!
//	带上下文，支持国际化输出元数据
func ErrorToastTeamInviteAlreadyExistsWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastTeamInviteAlreadyExistsID, fmt.Sprintf(format, args...))
}

// ErrorI18nToastTeamInviteAlreadyExists 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	TEAM_INVITE_ALREADY_EXISTS
//	%s,邀请记录已存在,或者已经加入团队!
//	支持国际化输出
func ErrorI18nToastTeamInviteAlreadyExists(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "%s,邀请记录已存在,或者已经加入团队!"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(404, ErrorToastTeamInviteAlreadyExistsID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorToastTeamInviteAlreadyExistsID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(404, ErrorToastTeamInviteAlreadyExistsID, msg).WithCause(err1)
		} else {
			err = errors.New(404, ErrorToastTeamInviteAlreadyExistsID, localize)
		}
	}

	return err
}

const ErrorToastTeamInviteNotFoundID = "TOAST__TEAM_INVITE_NOT_FOUND"

// IsToastTeamInviteNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	TEAM_INVITE_NOT_FOUND
//	邀请记录不存在
func IsToastTeamInviteNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorToastTeamInviteNotFoundID && e.Code == 404
}

// ErrorToastTeamInviteNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	TEAM_INVITE_NOT_FOUND
//	邀请记录不存在
func ErrorToastTeamInviteNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastTeamInviteNotFoundID, fmt.Sprintf(format, args...))
}

// ErrorToastTeamInviteNotFoundWithContext 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	TEAM_INVITE_NOT_FOUND
//	邀请记录不存在
//	带上下文，支持国际化输出元数据
func ErrorToastTeamInviteNotFoundWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastTeamInviteNotFoundID, fmt.Sprintf(format, args...))
}

// ErrorI18nToastTeamInviteNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	TEAM_INVITE_NOT_FOUND
//	邀请记录不存在
//	支持国际化输出
func ErrorI18nToastTeamInviteNotFound(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "邀请记录不存在"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(404, ErrorToastTeamInviteNotFoundID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorToastTeamInviteNotFoundID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(404, ErrorToastTeamInviteNotFoundID, msg).WithCause(err1)
		} else {
			err = errors.New(404, ErrorToastTeamInviteNotFoundID, localize)
		}
	}

	return err
}

const ErrorToastAlarmSendHistoryNotFoundID = "TOAST__ALARM_SEND_HISTORY_NOT_FOUND"

// IsToastAlarmSendHistoryNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	ALARM_SEND_HISTORY_NOT_FOUND
//	告警发送历史不存在
func IsToastAlarmSendHistoryNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorToastAlarmSendHistoryNotFoundID && e.Code == 404
}

// ErrorToastAlarmSendHistoryNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	ALARM_SEND_HISTORY_NOT_FOUND
//	告警发送历史不存在
func ErrorToastAlarmSendHistoryNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastAlarmSendHistoryNotFoundID, fmt.Sprintf(format, args...))
}

// ErrorToastAlarmSendHistoryNotFoundWithContext 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	ALARM_SEND_HISTORY_NOT_FOUND
//	告警发送历史不存在
//	带上下文，支持国际化输出元数据
func ErrorToastAlarmSendHistoryNotFoundWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastAlarmSendHistoryNotFoundID, fmt.Sprintf(format, args...))
}

// ErrorI18nToastAlarmSendHistoryNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	ALARM_SEND_HISTORY_NOT_FOUND
//	告警发送历史不存在
//	支持国际化输出
func ErrorI18nToastAlarmSendHistoryNotFound(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "告警发送历史不存在"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(404, ErrorToastAlarmSendHistoryNotFoundID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorToastAlarmSendHistoryNotFoundID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(404, ErrorToastAlarmSendHistoryNotFoundID, msg).WithCause(err1)
		} else {
			err = errors.New(404, ErrorToastAlarmSendHistoryNotFoundID, localize)
		}
	}

	return err
}

const ErrorToastRoleHasRelationID = "TOAST__ROLE_HAS_RELATION"

// IsToastRoleHasRelation 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	ROLE_HAS_RELATION
//	角色存在关联关系
func IsToastRoleHasRelation(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorToastRoleHasRelationID && e.Code == 404
}

// ErrorToastRoleHasRelation 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	ROLE_HAS_RELATION
//	角色存在关联关系
func ErrorToastRoleHasRelation(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastRoleHasRelationID, fmt.Sprintf(format, args...))
}

// ErrorToastRoleHasRelationWithContext 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	ROLE_HAS_RELATION
//	角色存在关联关系
//	带上下文，支持国际化输出元数据
func ErrorToastRoleHasRelationWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastRoleHasRelationID, fmt.Sprintf(format, args...))
}

// ErrorI18nToastRoleHasRelation 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	ROLE_HAS_RELATION
//	角色存在关联关系
//	支持国际化输出
func ErrorI18nToastRoleHasRelation(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "角色存在关联关系"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(404, ErrorToastRoleHasRelationID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorToastRoleHasRelationID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(404, ErrorToastRoleHasRelationID, msg).WithCause(err1)
		} else {
			err = errors.New(404, ErrorToastRoleHasRelationID, localize)
		}
	}

	return err
}

const ErrorToastTeamMemberNotFoundID = "TOAST__TEAM_MEMBER_NOT_FOUND"

// IsToastTeamMemberNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	TEAM_MEMBER_NOT_FOUND
//	团队成员不存在
func IsToastTeamMemberNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorToastTeamMemberNotFoundID && e.Code == 404
}

// ErrorToastTeamMemberNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	TEAM_MEMBER_NOT_FOUND
//	团队成员不存在
func ErrorToastTeamMemberNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastTeamMemberNotFoundID, fmt.Sprintf(format, args...))
}

// ErrorToastTeamMemberNotFoundWithContext 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	TEAM_MEMBER_NOT_FOUND
//	团队成员不存在
//	带上下文，支持国际化输出元数据
func ErrorToastTeamMemberNotFoundWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastTeamMemberNotFoundID, fmt.Sprintf(format, args...))
}

// ErrorI18nToastTeamMemberNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	TEAM_MEMBER_NOT_FOUND
//	团队成员不存在
//	支持国际化输出
func ErrorI18nToastTeamMemberNotFound(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "团队成员不存在"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(404, ErrorToastTeamMemberNotFoundID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorToastTeamMemberNotFoundID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(404, ErrorToastTeamMemberNotFoundID, msg).WithCause(err1)
		} else {
			err = errors.New(404, ErrorToastTeamMemberNotFoundID, localize)
		}
	}

	return err
}

const ErrorToastUserMessageNotFoundID = "TOAST__USER_MESSAGE_NOT_FOUND"

// IsToastUserMessageNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	USER_MESSAGE_NOT_FOUND
//	消息不存在
func IsToastUserMessageNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorToastUserMessageNotFoundID && e.Code == 404
}

// ErrorToastUserMessageNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	USER_MESSAGE_NOT_FOUND
//	消息不存在
func ErrorToastUserMessageNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastUserMessageNotFoundID, fmt.Sprintf(format, args...))
}

// ErrorToastUserMessageNotFoundWithContext 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	USER_MESSAGE_NOT_FOUND
//	消息不存在
//	带上下文，支持国际化输出元数据
func ErrorToastUserMessageNotFoundWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastUserMessageNotFoundID, fmt.Sprintf(format, args...))
}

// ErrorI18nToastUserMessageNotFound 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	USER_MESSAGE_NOT_FOUND
//	消息不存在
//	支持国际化输出
func ErrorI18nToastUserMessageNotFound(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "消息不存在"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(404, ErrorToastUserMessageNotFoundID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorToastUserMessageNotFoundID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(404, ErrorToastUserMessageNotFoundID, msg).WithCause(err1)
		} else {
			err = errors.New(404, ErrorToastUserMessageNotFoundID, localize)
		}
	}

	return err
}

const ErrorToastStrategyTypeNotExistID = "TOAST__STRATEGY_TYPE_NOT_EXIST"

// IsToastStrategyTypeNotExist 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	STRATEGY_TYPE_NOT_EXIST
//	策略类型不存在
func IsToastStrategyTypeNotExist(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorToastStrategyTypeNotExistID && e.Code == 404
}

// ErrorToastStrategyTypeNotExist 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	STRATEGY_TYPE_NOT_EXIST
//	策略类型不存在
func ErrorToastStrategyTypeNotExist(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastStrategyTypeNotExistID, fmt.Sprintf(format, args...))
}

// ErrorToastStrategyTypeNotExistWithContext 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	STRATEGY_TYPE_NOT_EXIST
//	策略类型不存在
//	带上下文，支持国际化输出元数据
func ErrorToastStrategyTypeNotExistWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorToastStrategyTypeNotExistID, fmt.Sprintf(format, args...))
}

// ErrorI18nToastStrategyTypeNotExist 用于toast验证错误， 资源不存在或者已存在时候提示
//
//	STRATEGY_TYPE_NOT_EXIST
//	策略类型不存在
//	支持国际化输出
func ErrorI18nToastStrategyTypeNotExist(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "策略类型不存在"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(404, ErrorToastStrategyTypeNotExistID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorToastStrategyTypeNotExistID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(404, ErrorToastStrategyTypeNotExistID, msg).WithCause(err1)
		} else {
			err = errors.New(404, ErrorToastStrategyTypeNotExistID, localize)
		}
	}

	return err
}

const ErrorNotificationID = "NOTIFICATION"

// IsNotification 用于通知验证错误， 系统级别错误
func IsNotification(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorNotificationID && e.Code == 500
}

// ErrorNotification 用于通知验证错误， 系统级别错误
func ErrorNotification(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorNotificationID, fmt.Sprintf(format, args...))
}

// ErrorNotificationWithContext 用于通知验证错误， 系统级别错误
//
//	带上下文，支持国际化输出元数据
func ErrorNotificationWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorNotificationID, fmt.Sprintf(format, args...))
}

// ErrorI18nNotification 用于通知验证错误， 系统级别错误
//
//	支持国际化输出
func ErrorI18nNotification(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "服务器可能遇到了意外，非常抱歉！"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(500, ErrorNotificationID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorNotificationID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(500, ErrorNotificationID, msg).WithCause(err1)
		} else {
			err = errors.New(500, ErrorNotificationID, localize)
		}
	}

	return err
}

const ErrorNotificationSystemErrorID = "NOTIFICATION__SYSTEM_ERROR"

// IsNotificationSystemError 用于通知验证错误， 系统级别错误
//
//	SYSTEM_ERROR
//	服务器遭遇了外星人攻击，攻城狮和程序猿们正在抢修......
func IsNotificationSystemError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorNotificationSystemErrorID && e.Code == 500
}

// ErrorNotificationSystemError 用于通知验证错误， 系统级别错误
//
//	SYSTEM_ERROR
//	服务器遭遇了外星人攻击，攻城狮和程序猿们正在抢修......
func ErrorNotificationSystemError(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorNotificationSystemErrorID, fmt.Sprintf(format, args...))
}

// ErrorNotificationSystemErrorWithContext 用于通知验证错误， 系统级别错误
//
//	SYSTEM_ERROR
//	服务器遭遇了外星人攻击，攻城狮和程序猿们正在抢修......
//	带上下文，支持国际化输出元数据
func ErrorNotificationSystemErrorWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorNotificationSystemErrorID, fmt.Sprintf(format, args...))
}

// ErrorI18nNotificationSystemError 用于通知验证错误， 系统级别错误
//
//	SYSTEM_ERROR
//	服务器遭遇了外星人攻击，攻城狮和程序猿们正在抢修......
//	支持国际化输出
func ErrorI18nNotificationSystemError(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "服务器遭遇了外星人攻击，攻城狮和程序猿们正在抢修......"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(500, ErrorNotificationSystemErrorID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorNotificationSystemErrorID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(500, ErrorNotificationSystemErrorID, msg).WithCause(err1)
		} else {
			err = errors.New(500, ErrorNotificationSystemErrorID, localize)
		}
	}

	return err
}

const ErrorNotificationUnsupportedDataSourceID = "NOTIFICATION__UNSUPPORTED_DATA_SOURCE"

// IsNotificationUnsupportedDataSource 用于通知验证错误， 系统级别错误
//
//	UNSUPPORTED_DATA_SOURCE
//	不支持的数据源类型
func IsNotificationUnsupportedDataSource(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorNotificationUnsupportedDataSourceID && e.Code == 500
}

// ErrorNotificationUnsupportedDataSource 用于通知验证错误， 系统级别错误
//
//	UNSUPPORTED_DATA_SOURCE
//	不支持的数据源类型
func ErrorNotificationUnsupportedDataSource(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorNotificationUnsupportedDataSourceID, fmt.Sprintf(format, args...))
}

// ErrorNotificationUnsupportedDataSourceWithContext 用于通知验证错误， 系统级别错误
//
//	UNSUPPORTED_DATA_SOURCE
//	不支持的数据源类型
//	带上下文，支持国际化输出元数据
func ErrorNotificationUnsupportedDataSourceWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorNotificationUnsupportedDataSourceID, fmt.Sprintf(format, args...))
}

// ErrorI18nNotificationUnsupportedDataSource 用于通知验证错误， 系统级别错误
//
//	UNSUPPORTED_DATA_SOURCE
//	不支持的数据源类型
//	支持国际化输出
func ErrorI18nNotificationUnsupportedDataSource(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "不支持的数据源类型"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(500, ErrorNotificationUnsupportedDataSourceID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorNotificationUnsupportedDataSourceID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(500, ErrorNotificationUnsupportedDataSourceID, msg).WithCause(err1)
		} else {
			err = errors.New(500, ErrorNotificationUnsupportedDataSourceID, localize)
		}
	}

	return err
}

const ErrorNotificationDataSourceConfigurationErrorID = "NOTIFICATION__DATA_SOURCE_CONFIGURATION_ERROR"

// IsNotificationDataSourceConfigurationError 用于通知验证错误， 系统级别错误
//
//	DATA_SOURCE_CONFIGURATION_ERROR
//	数据源配置错误,请检查数据格式!
func IsNotificationDataSourceConfigurationError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorNotificationDataSourceConfigurationErrorID && e.Code == 500
}

// ErrorNotificationDataSourceConfigurationError 用于通知验证错误， 系统级别错误
//
//	DATA_SOURCE_CONFIGURATION_ERROR
//	数据源配置错误,请检查数据格式!
func ErrorNotificationDataSourceConfigurationError(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorNotificationDataSourceConfigurationErrorID, fmt.Sprintf(format, args...))
}

// ErrorNotificationDataSourceConfigurationErrorWithContext 用于通知验证错误， 系统级别错误
//
//	DATA_SOURCE_CONFIGURATION_ERROR
//	数据源配置错误,请检查数据格式!
//	带上下文，支持国际化输出元数据
func ErrorNotificationDataSourceConfigurationErrorWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorNotificationDataSourceConfigurationErrorID, fmt.Sprintf(format, args...))
}

// ErrorI18nNotificationDataSourceConfigurationError 用于通知验证错误， 系统级别错误
//
//	DATA_SOURCE_CONFIGURATION_ERROR
//	数据源配置错误,请检查数据格式!
//	支持国际化输出
func ErrorI18nNotificationDataSourceConfigurationError(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "数据源配置错误,请检查数据格式!"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(500, ErrorNotificationDataSourceConfigurationErrorID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorNotificationDataSourceConfigurationErrorID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(500, ErrorNotificationDataSourceConfigurationErrorID, msg).WithCause(err1)
		} else {
			err = errors.New(500, ErrorNotificationDataSourceConfigurationErrorID, localize)
		}
	}

	return err
}

const ErrorUnauthorizedID = "UNAUTHORIZED"

// IsUnauthorized 用于重定向验证错误, 跳转到指定页面， 认证级别提示
func IsUnauthorized(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorUnauthorizedID && e.Code == 401
}

// ErrorUnauthorized 用于重定向验证错误, 跳转到指定页面， 认证级别提示
func ErrorUnauthorized(format string, args ...interface{}) *errors.Error {
	return errors.New(401, ErrorUnauthorizedID, fmt.Sprintf(format, args...))
}

// ErrorUnauthorizedWithContext 用于重定向验证错误, 跳转到指定页面， 认证级别提示
//
//	带上下文，支持国际化输出元数据
func ErrorUnauthorizedWithContext(ctx context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(401, ErrorUnauthorizedID, fmt.Sprintf(format, args...)).WithMetadata(map[string]string{
		"redirect": GetI18nMessage(ctx, "/login"),
	})
}

// ErrorI18nUnauthorized 用于重定向验证错误, 跳转到指定页面， 认证级别提示
//
//	支持国际化输出
func ErrorI18nUnauthorized(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "请先登录"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(401, ErrorUnauthorizedID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorUnauthorizedID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(401, ErrorUnauthorizedID, msg).WithCause(err1)
		} else {
			err = errors.New(401, ErrorUnauthorizedID, localize)
		}
	}

	return err.WithMetadata(map[string]string{
		"redirect": GetI18nMessage(ctx, "/login"),
	})
}

const ErrorUnauthorizedJwtExpireID = "UNAUTHORIZED__JWT_EXPIRE"

// IsUnauthorizedJwtExpire 用于重定向验证错误, 跳转到指定页面， 认证级别提示
//
//	JWT_EXPIRE
//	登录已过期
func IsUnauthorizedJwtExpire(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorUnauthorizedJwtExpireID && e.Code == 401
}

// ErrorUnauthorizedJwtExpire 用于重定向验证错误, 跳转到指定页面， 认证级别提示
//
//	JWT_EXPIRE
//	登录已过期
func ErrorUnauthorizedJwtExpire(format string, args ...interface{}) *errors.Error {
	return errors.New(401, ErrorUnauthorizedJwtExpireID, fmt.Sprintf(format, args...))
}

// ErrorUnauthorizedJwtExpireWithContext 用于重定向验证错误, 跳转到指定页面， 认证级别提示
//
//	JWT_EXPIRE
//	登录已过期
//	带上下文，支持国际化输出元数据
func ErrorUnauthorizedJwtExpireWithContext(ctx context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(401, ErrorUnauthorizedJwtExpireID, fmt.Sprintf(format, args...)).WithMetadata(map[string]string{
		"redirect": GetI18nMessage(ctx, "/login"),
	})
}

// ErrorI18nUnauthorizedJwtExpire 用于重定向验证错误, 跳转到指定页面， 认证级别提示
//
//	JWT_EXPIRE
//	登录已过期
//	支持国际化输出
func ErrorI18nUnauthorizedJwtExpire(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "登录已过期"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(401, ErrorUnauthorizedJwtExpireID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorUnauthorizedJwtExpireID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(401, ErrorUnauthorizedJwtExpireID, msg).WithCause(err1)
		} else {
			err = errors.New(401, ErrorUnauthorizedJwtExpireID, localize)
		}
	}

	return err.WithMetadata(map[string]string{
		"redirect": GetI18nMessage(ctx, "/login"),
	})
}

const ErrorUnauthorizedJwtOtherLoginID = "UNAUTHORIZED__JWT_OTHER_LOGIN"

// IsUnauthorizedJwtOtherLogin 用于重定向验证错误, 跳转到指定页面， 认证级别提示
//
//	JWT_OTHER_LOGIN
//	账号已在其他地方登录
func IsUnauthorizedJwtOtherLogin(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorUnauthorizedJwtOtherLoginID && e.Code == 401
}

// ErrorUnauthorizedJwtOtherLogin 用于重定向验证错误, 跳转到指定页面， 认证级别提示
//
//	JWT_OTHER_LOGIN
//	账号已在其他地方登录
func ErrorUnauthorizedJwtOtherLogin(format string, args ...interface{}) *errors.Error {
	return errors.New(401, ErrorUnauthorizedJwtOtherLoginID, fmt.Sprintf(format, args...))
}

// ErrorUnauthorizedJwtOtherLoginWithContext 用于重定向验证错误, 跳转到指定页面， 认证级别提示
//
//	JWT_OTHER_LOGIN
//	账号已在其他地方登录
//	带上下文，支持国际化输出元数据
func ErrorUnauthorizedJwtOtherLoginWithContext(ctx context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(401, ErrorUnauthorizedJwtOtherLoginID, fmt.Sprintf(format, args...)).WithMetadata(map[string]string{
		"redirect": GetI18nMessage(ctx, "/login"),
	})
}

// ErrorI18nUnauthorizedJwtOtherLogin 用于重定向验证错误, 跳转到指定页面， 认证级别提示
//
//	JWT_OTHER_LOGIN
//	账号已在其他地方登录
//	支持国际化输出
func ErrorI18nUnauthorizedJwtOtherLogin(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "账号已在其他地方登录"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(401, ErrorUnauthorizedJwtOtherLoginID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorUnauthorizedJwtOtherLoginID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(401, ErrorUnauthorizedJwtOtherLoginID, msg).WithCause(err1)
		} else {
			err = errors.New(401, ErrorUnauthorizedJwtOtherLoginID, localize)
		}
	}

	return err.WithMetadata(map[string]string{
		"redirect": GetI18nMessage(ctx, "/login"),
	})
}

const ErrorUnauthorizedJwtBanID = "UNAUTHORIZED__JWT_BAN"

// IsUnauthorizedJwtBan 用于重定向验证错误, 跳转到指定页面， 认证级别提示
//
//	JWT_BAN
//	认证信息已登出，请重新登录
func IsUnauthorizedJwtBan(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorUnauthorizedJwtBanID && e.Code == 401
}

// ErrorUnauthorizedJwtBan 用于重定向验证错误, 跳转到指定页面， 认证级别提示
//
//	JWT_BAN
//	认证信息已登出，请重新登录
func ErrorUnauthorizedJwtBan(format string, args ...interface{}) *errors.Error {
	return errors.New(401, ErrorUnauthorizedJwtBanID, fmt.Sprintf(format, args...))
}

// ErrorUnauthorizedJwtBanWithContext 用于重定向验证错误, 跳转到指定页面， 认证级别提示
//
//	JWT_BAN
//	认证信息已登出，请重新登录
//	带上下文，支持国际化输出元数据
func ErrorUnauthorizedJwtBanWithContext(ctx context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(401, ErrorUnauthorizedJwtBanID, fmt.Sprintf(format, args...)).WithMetadata(map[string]string{
		"redirect": GetI18nMessage(ctx, "/login"),
	})
}

// ErrorI18nUnauthorizedJwtBan 用于重定向验证错误, 跳转到指定页面， 认证级别提示
//
//	JWT_BAN
//	认证信息已登出，请重新登录
//	支持国际化输出
func ErrorI18nUnauthorizedJwtBan(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "认证信息已登出，请重新登录"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(401, ErrorUnauthorizedJwtBanID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorUnauthorizedJwtBanID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(401, ErrorUnauthorizedJwtBanID, msg).WithCause(err1)
		} else {
			err = errors.New(401, ErrorUnauthorizedJwtBanID, localize)
		}
	}

	return err.WithMetadata(map[string]string{
		"redirect": GetI18nMessage(ctx, "/login"),
	})
}

const ErrorUnauthorizedUserNotFoundID = "UNAUTHORIZED__USER_NOT_FOUND"

// IsUnauthorizedUserNotFound 用于重定向验证错误, 跳转到指定页面， 认证级别提示
//
//	USER_NOT_FOUND
//	账号不存在
func IsUnauthorizedUserNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorUnauthorizedUserNotFoundID && e.Code == 401
}

// ErrorUnauthorizedUserNotFound 用于重定向验证错误, 跳转到指定页面， 认证级别提示
//
//	USER_NOT_FOUND
//	账号不存在
func ErrorUnauthorizedUserNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(401, ErrorUnauthorizedUserNotFoundID, fmt.Sprintf(format, args...))
}

// ErrorUnauthorizedUserNotFoundWithContext 用于重定向验证错误, 跳转到指定页面， 认证级别提示
//
//	USER_NOT_FOUND
//	账号不存在
//	带上下文，支持国际化输出元数据
func ErrorUnauthorizedUserNotFoundWithContext(ctx context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(401, ErrorUnauthorizedUserNotFoundID, fmt.Sprintf(format, args...)).WithMetadata(map[string]string{
		"redirect": GetI18nMessage(ctx, "/login"),
	})
}

// ErrorI18nUnauthorizedUserNotFound 用于重定向验证错误, 跳转到指定页面， 认证级别提示
//
//	USER_NOT_FOUND
//	账号不存在
//	支持国际化输出
func ErrorI18nUnauthorizedUserNotFound(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "账号不存在"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(401, ErrorUnauthorizedUserNotFoundID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorUnauthorizedUserNotFoundID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(401, ErrorUnauthorizedUserNotFoundID, msg).WithCause(err1)
		} else {
			err = errors.New(401, ErrorUnauthorizedUserNotFoundID, localize)
		}
	}

	return err.WithMetadata(map[string]string{
		"redirect": GetI18nMessage(ctx, "/login"),
	})
}

const ErrorUnauthorizedUserBanID = "UNAUTHORIZED__USER_BAN"

// IsUnauthorizedUserBan 用于重定向验证错误, 跳转到指定页面， 认证级别提示
//
//	USER_BAN
//	您已被禁止使用该系统，请联系官方解除
func IsUnauthorizedUserBan(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorUnauthorizedUserBanID && e.Code == 401
}

// ErrorUnauthorizedUserBan 用于重定向验证错误, 跳转到指定页面， 认证级别提示
//
//	USER_BAN
//	您已被禁止使用该系统，请联系官方解除
func ErrorUnauthorizedUserBan(format string, args ...interface{}) *errors.Error {
	return errors.New(401, ErrorUnauthorizedUserBanID, fmt.Sprintf(format, args...))
}

// ErrorUnauthorizedUserBanWithContext 用于重定向验证错误, 跳转到指定页面， 认证级别提示
//
//	USER_BAN
//	您已被禁止使用该系统，请联系官方解除
//	带上下文，支持国际化输出元数据
func ErrorUnauthorizedUserBanWithContext(ctx context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(401, ErrorUnauthorizedUserBanID, fmt.Sprintf(format, args...)).WithMetadata(map[string]string{
		"redirect": GetI18nMessage(ctx, "/login"),
	})
}

// ErrorI18nUnauthorizedUserBan 用于重定向验证错误, 跳转到指定页面， 认证级别提示
//
//	USER_BAN
//	您已被禁止使用该系统，请联系官方解除
//	支持国际化输出
func ErrorI18nUnauthorizedUserBan(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "您已被禁止使用该系统，请联系官方解除"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(401, ErrorUnauthorizedUserBanID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorUnauthorizedUserBanID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(401, ErrorUnauthorizedUserBanID, msg).WithCause(err1)
		} else {
			err = errors.New(401, ErrorUnauthorizedUserBanID, localize)
		}
	}

	return err.WithMetadata(map[string]string{
		"redirect": GetI18nMessage(ctx, "/login"),
	})
}

const ErrorForbiddenID = "FORBIDDEN"

// IsForbidden 权限不足时候提示, toast提示 权限级别提示
func IsForbidden(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorForbiddenID && e.Code == 403
}

// ErrorForbidden 权限不足时候提示, toast提示 权限级别提示
func ErrorForbidden(format string, args ...interface{}) *errors.Error {
	return errors.New(403, ErrorForbiddenID, fmt.Sprintf(format, args...))
}

// ErrorForbiddenWithContext 权限不足时候提示, toast提示 权限级别提示
//
//	带上下文，支持国际化输出元数据
func ErrorForbiddenWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(403, ErrorForbiddenID, fmt.Sprintf(format, args...))
}

// ErrorI18nForbidden 权限不足时候提示, toast提示 权限级别提示
//
//	支持国际化输出
func ErrorI18nForbidden(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "您没有操作权限, 请联系管理员开通该权限"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(403, ErrorForbiddenID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorForbiddenID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(403, ErrorForbiddenID, msg).WithCause(err1)
		} else {
			err = errors.New(403, ErrorForbiddenID, localize)
		}
	}

	return err
}

const ErrorForbiddenUserNotInTeamID = "FORBIDDEN__USER_NOT_IN_TEAM"

// IsForbiddenUserNotInTeam 权限不足时候提示, toast提示 权限级别提示
//
//	USER_NOT_IN_TEAM
//	您已不属于该团队
func IsForbiddenUserNotInTeam(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorForbiddenUserNotInTeamID && e.Code == 403
}

// ErrorForbiddenUserNotInTeam 权限不足时候提示, toast提示 权限级别提示
//
//	USER_NOT_IN_TEAM
//	您已不属于该团队
func ErrorForbiddenUserNotInTeam(format string, args ...interface{}) *errors.Error {
	return errors.New(403, ErrorForbiddenUserNotInTeamID, fmt.Sprintf(format, args...))
}

// ErrorForbiddenUserNotInTeamWithContext 权限不足时候提示, toast提示 权限级别提示
//
//	USER_NOT_IN_TEAM
//	您已不属于该团队
//	带上下文，支持国际化输出元数据
func ErrorForbiddenUserNotInTeamWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(403, ErrorForbiddenUserNotInTeamID, fmt.Sprintf(format, args...))
}

// ErrorI18nForbiddenUserNotInTeam 权限不足时候提示, toast提示 权限级别提示
//
//	USER_NOT_IN_TEAM
//	您已不属于该团队
//	支持国际化输出
func ErrorI18nForbiddenUserNotInTeam(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "您已不属于该团队"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(403, ErrorForbiddenUserNotInTeamID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorForbiddenUserNotInTeamID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(403, ErrorForbiddenUserNotInTeamID, msg).WithCause(err1)
		} else {
			err = errors.New(403, ErrorForbiddenUserNotInTeamID, localize)
		}
	}

	return err
}

const ErrorForbiddenMemberDisabledID = "FORBIDDEN__MEMBER_DISABLED"

// IsForbiddenMemberDisabled 权限不足时候提示, toast提示 权限级别提示
//
//	MEMBER_DISABLED
//	您已被该团队禁用操作，请联系管理员
func IsForbiddenMemberDisabled(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorForbiddenMemberDisabledID && e.Code == 403
}

// ErrorForbiddenMemberDisabled 权限不足时候提示, toast提示 权限级别提示
//
//	MEMBER_DISABLED
//	您已被该团队禁用操作，请联系管理员
func ErrorForbiddenMemberDisabled(format string, args ...interface{}) *errors.Error {
	return errors.New(403, ErrorForbiddenMemberDisabledID, fmt.Sprintf(format, args...))
}

// ErrorForbiddenMemberDisabledWithContext 权限不足时候提示, toast提示 权限级别提示
//
//	MEMBER_DISABLED
//	您已被该团队禁用操作，请联系管理员
//	带上下文，支持国际化输出元数据
func ErrorForbiddenMemberDisabledWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(403, ErrorForbiddenMemberDisabledID, fmt.Sprintf(format, args...))
}

// ErrorI18nForbiddenMemberDisabled 权限不足时候提示, toast提示 权限级别提示
//
//	MEMBER_DISABLED
//	您已被该团队禁用操作，请联系管理员
//	支持国际化输出
func ErrorI18nForbiddenMemberDisabled(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "您已被该团队禁用操作，请联系管理员"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(403, ErrorForbiddenMemberDisabledID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorForbiddenMemberDisabledID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(403, ErrorForbiddenMemberDisabledID, msg).WithCause(err1)
		} else {
			err = errors.New(403, ErrorForbiddenMemberDisabledID, localize)
		}
	}

	return err
}

const ErrorTooManyRequestsID = "TOO_MANY_REQUESTS"

// IsTooManyRequests 触发频率限制
func IsTooManyRequests(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorTooManyRequestsID && e.Code == 429
}

// ErrorTooManyRequests 触发频率限制
func ErrorTooManyRequests(format string, args ...interface{}) *errors.Error {
	return errors.New(429, ErrorTooManyRequestsID, fmt.Sprintf(format, args...))
}

// ErrorTooManyRequestsWithContext 触发频率限制
//
//	带上下文，支持国际化输出元数据
func ErrorTooManyRequestsWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(429, ErrorTooManyRequestsID, fmt.Sprintf(format, args...))
}

// ErrorI18nTooManyRequests 触发频率限制
//
//	支持国际化输出
func ErrorI18nTooManyRequests(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "请求太频繁，请稍后再试"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(429, ErrorTooManyRequestsID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorTooManyRequestsID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(429, ErrorTooManyRequestsID, msg).WithCause(err1)
		} else {
			err = errors.New(429, ErrorTooManyRequestsID, localize)
		}
	}

	return err
}

const ErrorFileRelatedID = "FILE_RELATED"

// IsFileRelated 文件相关
func IsFileRelated(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorFileRelatedID && e.Code == 430
}

// ErrorFileRelated 文件相关
func ErrorFileRelated(format string, args ...interface{}) *errors.Error {
	return errors.New(430, ErrorFileRelatedID, fmt.Sprintf(format, args...))
}

// ErrorFileRelatedWithContext 文件相关
//
//	带上下文，支持国际化输出元数据
func ErrorFileRelatedWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(430, ErrorFileRelatedID, fmt.Sprintf(format, args...))
}

// ErrorI18nFileRelated 文件相关
//
//	支持国际化输出
func ErrorI18nFileRelated(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "文件相关异常"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(430, ErrorFileRelatedID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorFileRelatedID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(430, ErrorFileRelatedID, msg).WithCause(err1)
		} else {
			err = errors.New(430, ErrorFileRelatedID, localize)
		}
	}

	return err
}

const ErrorFileRelatedFileContentDoesNotExistID = "FILE_RELATED__FILE_CONTENT_DOES_NOT_EXIST"

// IsFileRelatedFileContentDoesNotExist 文件相关
//
//	FILE_CONTENT_DOES_NOT_EXIST
//	文件:[%s]内容不存在！
func IsFileRelatedFileContentDoesNotExist(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorFileRelatedFileContentDoesNotExistID && e.Code == 430
}

// ErrorFileRelatedFileContentDoesNotExist 文件相关
//
//	FILE_CONTENT_DOES_NOT_EXIST
//	文件:[%s]内容不存在！
func ErrorFileRelatedFileContentDoesNotExist(format string, args ...interface{}) *errors.Error {
	return errors.New(430, ErrorFileRelatedFileContentDoesNotExistID, fmt.Sprintf(format, args...))
}

// ErrorFileRelatedFileContentDoesNotExistWithContext 文件相关
//
//	FILE_CONTENT_DOES_NOT_EXIST
//	文件:[%s]内容不存在！
//	带上下文，支持国际化输出元数据
func ErrorFileRelatedFileContentDoesNotExistWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(430, ErrorFileRelatedFileContentDoesNotExistID, fmt.Sprintf(format, args...))
}

// ErrorI18nFileRelatedFileContentDoesNotExist 文件相关
//
//	FILE_CONTENT_DOES_NOT_EXIST
//	文件:[%s]内容不存在！
//	支持国际化输出
func ErrorI18nFileRelatedFileContentDoesNotExist(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "文件:[%s]内容不存在！"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(430, ErrorFileRelatedFileContentDoesNotExistID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorFileRelatedFileContentDoesNotExistID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(430, ErrorFileRelatedFileContentDoesNotExistID, msg).WithCause(err1)
		} else {
			err = errors.New(430, ErrorFileRelatedFileContentDoesNotExistID, localize)
		}
	}

	return err
}

const ErrorFileRelatedFileNotSupportedUploadID = "FILE_RELATED__FILE_NOT_SUPPORTED_UPLOAD"

// IsFileRelatedFileNotSupportedUpload 文件相关
//
//	FILE_NOT_SUPPORTED_UPLOAD
//	不支持该文件类型：%s上传
func IsFileRelatedFileNotSupportedUpload(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorFileRelatedFileNotSupportedUploadID && e.Code == 430
}

// ErrorFileRelatedFileNotSupportedUpload 文件相关
//
//	FILE_NOT_SUPPORTED_UPLOAD
//	不支持该文件类型：%s上传
func ErrorFileRelatedFileNotSupportedUpload(format string, args ...interface{}) *errors.Error {
	return errors.New(430, ErrorFileRelatedFileNotSupportedUploadID, fmt.Sprintf(format, args...))
}

// ErrorFileRelatedFileNotSupportedUploadWithContext 文件相关
//
//	FILE_NOT_SUPPORTED_UPLOAD
//	不支持该文件类型：%s上传
//	带上下文，支持国际化输出元数据
func ErrorFileRelatedFileNotSupportedUploadWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(430, ErrorFileRelatedFileNotSupportedUploadID, fmt.Sprintf(format, args...))
}

// ErrorI18nFileRelatedFileNotSupportedUpload 文件相关
//
//	FILE_NOT_SUPPORTED_UPLOAD
//	不支持该文件类型：%s上传
//	支持国际化输出
func ErrorI18nFileRelatedFileNotSupportedUpload(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "不支持该文件类型：%s上传"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(430, ErrorFileRelatedFileNotSupportedUploadID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorFileRelatedFileNotSupportedUploadID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(430, ErrorFileRelatedFileNotSupportedUploadID, msg).WithCause(err1)
		} else {
			err = errors.New(430, ErrorFileRelatedFileNotSupportedUploadID, localize)
		}
	}

	return err
}

const ErrorFileRelatedFileMaximumLimitID = "FILE_RELATED__FILE_MAXIMUM_LIMIT"

// IsFileRelatedFileMaximumLimit 文件相关
//
//	FILE_MAXIMUM_LIMIT
//	该类型[%s]文件大小超过最大限制!
func IsFileRelatedFileMaximumLimit(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorFileRelatedFileMaximumLimitID && e.Code == 430
}

// ErrorFileRelatedFileMaximumLimit 文件相关
//
//	FILE_MAXIMUM_LIMIT
//	该类型[%s]文件大小超过最大限制!
func ErrorFileRelatedFileMaximumLimit(format string, args ...interface{}) *errors.Error {
	return errors.New(430, ErrorFileRelatedFileMaximumLimitID, fmt.Sprintf(format, args...))
}

// ErrorFileRelatedFileMaximumLimitWithContext 文件相关
//
//	FILE_MAXIMUM_LIMIT
//	该类型[%s]文件大小超过最大限制!
//	带上下文，支持国际化输出元数据
func ErrorFileRelatedFileMaximumLimitWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(430, ErrorFileRelatedFileMaximumLimitID, fmt.Sprintf(format, args...))
}

// ErrorI18nFileRelatedFileMaximumLimit 文件相关
//
//	FILE_MAXIMUM_LIMIT
//	该类型[%s]文件大小超过最大限制!
//	支持国际化输出
func ErrorI18nFileRelatedFileMaximumLimit(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "该类型[%s]文件大小超过最大限制!"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(430, ErrorFileRelatedFileMaximumLimitID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorFileRelatedFileMaximumLimitID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(430, ErrorFileRelatedFileMaximumLimitID, msg).WithCause(err1)
		} else {
			err = errors.New(430, ErrorFileRelatedFileMaximumLimitID, localize)
		}
	}

	return err
}

const ErrorFileRelatedOssNotOpenedID = "FILE_RELATED__OSS_NOT_OPENED"

// IsFileRelatedOssNotOpened 文件相关
//
//	OSS_NOT_OPENED
//	oss未打开,不允许上传文件!
func IsFileRelatedOssNotOpened(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorFileRelatedOssNotOpenedID && e.Code == 430
}

// ErrorFileRelatedOssNotOpened 文件相关
//
//	OSS_NOT_OPENED
//	oss未打开,不允许上传文件!
func ErrorFileRelatedOssNotOpened(format string, args ...interface{}) *errors.Error {
	return errors.New(430, ErrorFileRelatedOssNotOpenedID, fmt.Sprintf(format, args...))
}

// ErrorFileRelatedOssNotOpenedWithContext 文件相关
//
//	OSS_NOT_OPENED
//	oss未打开,不允许上传文件!
//	带上下文，支持国际化输出元数据
func ErrorFileRelatedOssNotOpenedWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(430, ErrorFileRelatedOssNotOpenedID, fmt.Sprintf(format, args...))
}

// ErrorI18nFileRelatedOssNotOpened 文件相关
//
//	OSS_NOT_OPENED
//	oss未打开,不允许上传文件!
//	支持国际化输出
func ErrorI18nFileRelatedOssNotOpened(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "oss未打开,不允许上传文件!"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(430, ErrorFileRelatedOssNotOpenedID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorFileRelatedOssNotOpenedID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(430, ErrorFileRelatedOssNotOpenedID, msg).WithCause(err1)
		} else {
			err = errors.New(430, ErrorFileRelatedOssNotOpenedID, localize)
		}
	}

	return err
}

const ErrorParameterRelatedID = "PARAMETER_RELATED"

func IsParameterRelated(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorParameterRelatedID && e.Code == 431
}

func ErrorParameterRelated(format string, args ...interface{}) *errors.Error {
	return errors.New(431, ErrorParameterRelatedID, fmt.Sprintf(format, args...))
}

func ErrorParameterRelatedWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(431, ErrorParameterRelatedID, fmt.Sprintf(format, args...))
}

func ErrorI18nParameterRelated(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "参数相关异常"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(431, ErrorParameterRelatedID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorParameterRelatedID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(431, ErrorParameterRelatedID, msg).WithCause(err1)
		} else {
			err = errors.New(431, ErrorParameterRelatedID, localize)
		}
	}

	return err
}

const ErrorParameterRelatedUpdateParameterNotFoundID = "PARAMETER_RELATED__UPDATE_PARAMETER_NOT_FOUND"

func IsParameterRelatedUpdateParameterNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorParameterRelatedUpdateParameterNotFoundID && e.Code == 431
}

func ErrorParameterRelatedUpdateParameterNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(431, ErrorParameterRelatedUpdateParameterNotFoundID, fmt.Sprintf(format, args...))
}

func ErrorParameterRelatedUpdateParameterNotFoundWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(431, ErrorParameterRelatedUpdateParameterNotFoundID, fmt.Sprintf(format, args...))
}

func ErrorI18nParameterRelatedUpdateParameterNotFound(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "更新参数不存在！"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(431, ErrorParameterRelatedUpdateParameterNotFoundID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorParameterRelatedUpdateParameterNotFoundID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(431, ErrorParameterRelatedUpdateParameterNotFoundID, msg).WithCause(err1)
		} else {
			err = errors.New(431, ErrorParameterRelatedUpdateParameterNotFoundID, localize)
		}
	}

	return err
}

const ErrorParameterRelatedCreateParameterNotFoundID = "PARAMETER_RELATED__CREATE_PARAMETER_NOT_FOUND"

func IsParameterRelatedCreateParameterNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorParameterRelatedCreateParameterNotFoundID && e.Code == 431
}

func ErrorParameterRelatedCreateParameterNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(431, ErrorParameterRelatedCreateParameterNotFoundID, fmt.Sprintf(format, args...))
}

func ErrorParameterRelatedCreateParameterNotFoundWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(431, ErrorParameterRelatedCreateParameterNotFoundID, fmt.Sprintf(format, args...))
}

func ErrorI18nParameterRelatedCreateParameterNotFound(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "创建参数不存在！"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(431, ErrorParameterRelatedCreateParameterNotFoundID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorParameterRelatedCreateParameterNotFoundID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(431, ErrorParameterRelatedCreateParameterNotFoundID, msg).WithCause(err1)
		} else {
			err = errors.New(431, ErrorParameterRelatedCreateParameterNotFoundID, localize)
		}
	}

	return err
}

const ErrorParameterRelatedAlarmSendingAndReceivingParametersAreInvalidID = "PARAMETER_RELATED__ALARM_SENDING_AND_RECEIVING_PARAMETERS_ARE_INVALID"

func IsParameterRelatedAlarmSendingAndReceivingParametersAreInvalid(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorParameterRelatedAlarmSendingAndReceivingParametersAreInvalidID && e.Code == 431
}

func ErrorParameterRelatedAlarmSendingAndReceivingParametersAreInvalid(format string, args ...interface{}) *errors.Error {
	return errors.New(431, ErrorParameterRelatedAlarmSendingAndReceivingParametersAreInvalidID, fmt.Sprintf(format, args...))
}

func ErrorParameterRelatedAlarmSendingAndReceivingParametersAreInvalidWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(431, ErrorParameterRelatedAlarmSendingAndReceivingParametersAreInvalidID, fmt.Sprintf(format, args...))
}

func ErrorI18nParameterRelatedAlarmSendingAndReceivingParametersAreInvalid(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "告警发送接收参数不合法！"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(431, ErrorParameterRelatedAlarmSendingAndReceivingParametersAreInvalidID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorParameterRelatedAlarmSendingAndReceivingParametersAreInvalidID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(431, ErrorParameterRelatedAlarmSendingAndReceivingParametersAreInvalidID, msg).WithCause(err1)
		} else {
			err = errors.New(431, ErrorParameterRelatedAlarmSendingAndReceivingParametersAreInvalidID, localize)
		}
	}

	return err
}
