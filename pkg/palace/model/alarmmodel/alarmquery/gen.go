// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package alarmquery

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q              = new(Query)
	AlarmHistory   *alarmHistory
	HistoryFields  *historyFields
	RealtimeAlarm  *realtimeAlarm
	RealtimeFields *realtimeFields
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	AlarmHistory = &Q.AlarmHistory
	HistoryFields = &Q.HistoryFields
	RealtimeAlarm = &Q.RealtimeAlarm
	RealtimeFields = &Q.RealtimeFields
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:             db,
		AlarmHistory:   newAlarmHistory(db, opts...),
		HistoryFields:  newHistoryFields(db, opts...),
		RealtimeAlarm:  newRealtimeAlarm(db, opts...),
		RealtimeFields: newRealtimeFields(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	AlarmHistory   alarmHistory
	HistoryFields  historyFields
	RealtimeAlarm  realtimeAlarm
	RealtimeFields realtimeFields
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:             db,
		AlarmHistory:   q.AlarmHistory.clone(db),
		HistoryFields:  q.HistoryFields.clone(db),
		RealtimeAlarm:  q.RealtimeAlarm.clone(db),
		RealtimeFields: q.RealtimeFields.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:             db,
		AlarmHistory:   q.AlarmHistory.replaceDB(db),
		HistoryFields:  q.HistoryFields.replaceDB(db),
		RealtimeAlarm:  q.RealtimeAlarm.replaceDB(db),
		RealtimeFields: q.RealtimeFields.replaceDB(db),
	}
}

type queryCtx struct {
	AlarmHistory   IAlarmHistoryDo
	HistoryFields  IHistoryFieldsDo
	RealtimeAlarm  IRealtimeAlarmDo
	RealtimeFields IRealtimeFieldsDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		AlarmHistory:   q.AlarmHistory.WithContext(ctx),
		HistoryFields:  q.HistoryFields.WithContext(ctx),
		RealtimeAlarm:  q.RealtimeAlarm.WithContext(ctx),
		RealtimeFields: q.RealtimeFields.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
