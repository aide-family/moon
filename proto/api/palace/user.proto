syntax = "proto3";

package api.palace;

import "google/api/annotations.proto";
import "buf/validate/validate.proto";
import "palace/common/system.proto";
import "palace/common/system_enum.proto";
import "palace/common/common.proto";
import "palace/common/team_strategy.proto";
import "palace/common/team.proto";

option go_package = "github.com/moon-monitor/moon/pkg/api/palace;palace";

// User service provides operations for managing user information, teams, and subscriptions
service User {
  // SelfInfo retrieves the current user's information
  rpc SelfInfo (api.palace.common.EmptyRequest) returns (api.palace.common.UserItem) {
    option (google.api.http) = {
      get: "/api/user/self"
    };
  }

  // UpdateSelfInfo updates the current user's information
  rpc UpdateSelfInfo (UpdateSelfInfoRequest) returns (api.palace.common.EmptyReply) {
    option (google.api.http) = {
      put: "/api/user/self"
      body: "*"
    };
  }

  // UpdateSelfPassword updates the current user's password
  rpc UpdateSelfPassword (UpdateSelfPasswordRequest) returns (api.palace.common.EmptyReply) {
    option (google.api.http) = {
      put: "/api/user/self/password"
      body: "*"
    };
  }

  // LeaveTeam allows the current user to leave a team
  rpc LeaveTeam (LeaveTeamRequest) returns (api.palace.common.EmptyReply) {
    option (google.api.http) = {
      post: "/api/user/self/leave-team"
      body: "*"
    };
  }

  // JoinTeam allows the current user to join a team
  rpc JoinTeam (JoinTeamRequest) returns (api.palace.common.EmptyReply) {
    option (google.api.http) = {
      post: "/api/user/self/join-team"
      body: "*"
    };
  }

  // CreateTeam allows the current user to create a new team
  rpc CreateTeam (CreateTeamRequest) returns (api.palace.common.EmptyReply) {
    option (google.api.http) = {
      post: "/api/user/self/create-team"
      body: "*"
    };
  }

  // SelfTeamList retrieves the list of teams the current user is a member of
  rpc SelfTeamList (api.palace.common.EmptyRequest) returns (SelfTeamListReply) {
    option (google.api.http) = {
      get: "/api/user/self/team-list"
    };
  }

  // SelfSubscribeTeamStrategies retrieves the list of team strategies the current user is subscribed to
  rpc SelfSubscribeTeamStrategies (SelfSubscribeTeamStrategiesRequest) returns (SelfSubscribeTeamStrategiesReply) {
    option (google.api.http) = {
      post: "/api/user/self/subscribe/team/strategies"
      body: "*"
    };
  }
}

// UpdateSelfInfoRequest represents the request data for updating the current user's information
message UpdateSelfInfoRequest {
  // User nickname
  string nickname = 1 [(buf.validate.field).required = true];
  // User avatar URL
  string avatar = 2 [(buf.validate.field).required = true];
  // User gender
  api.palace.common.Gender gender = 3 [(buf.validate.field).required = true];
}

// UpdateSelfPasswordRequest represents the request data for updating the current user's password
message UpdateSelfPasswordRequest {
  // Current password
  string oldPassword = 1 [(buf.validate.field).required = true];
  // New password
  string newPassword = 2 [(buf.validate.field).required = true];
}

// LeaveTeamRequest represents the request data for leaving a team
message LeaveTeamRequest {
  // Team Id to leave
  uint32 teamId = 1 [(buf.validate.field).cel = {
    message: "team is required"
    expression: "this > 0"
  }];
  // Reason for leaving the team
  string reason = 2 [(buf.validate.field).cel = {
    message: "reason max length is 200"
    expression: "this.size() <= 200"
  }, (buf.validate.field).required = true];
}

// JoinTeamRequest represents the request data for joining a team
message JoinTeamRequest {
  // Team name to join
  string teamName = 1 [(buf.validate.field).required = true, (buf.validate.field).cel = {
    message: "team name max length is 32"
    expression: "this.size() <= 32"
  }];
  // Reason for joining the team
  string reason = 2 [(buf.validate.field).cel = {
    message: "reason max length is 200"
    expression: "this.size() <= 200"
  }, (buf.validate.field).required = true];
}

// CreateTeamRequest represents the request data for creating a new team
message CreateTeamRequest {
  // Team name
  string name = 1 [(buf.validate.field).cel = {
    message: "name is required"
    expression: "this.size() > 0"
  }, (buf.validate.field).cel = {
    message: "name max length is 32"
    expression: "this.size() <= 32"
  }];
  // Team remark or description
  string remark = 2 [(buf.validate.field).cel = {
    message: "remark max length is 200"
    expression: "this.size() <= 200"
  }];
  // Team logo URL
  string logo = 3 [(buf.validate.field).cel = {
    message: "logo max length is 255"
    expression: "this.size() <= 255"
  }];
}

// SelfTeamListReply contains the response data for retrieving the list of teams the current user is a member of
message SelfTeamListReply {
  // List of team items
  repeated api.palace.common.TeamItem items = 1;
}

// SelfSubscribeTeamStrategiesRequest represents the request data for retrieving subscribed team strategies
message SelfSubscribeTeamStrategiesRequest {
  // Pagination request details
  api.palace.common.PaginationRequest pagination = 1;
}

// SelfSubscribeTeamStrategiesReply contains the response data for retrieving subscribed team strategies
message SelfSubscribeTeamStrategiesReply {
  // List of team strategy items
  repeated api.palace.common.TeamStrategyItem items = 1;
  // Pagination response details
  api.palace.common.PaginationReply pagination = 2;
}
