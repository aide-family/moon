syntax = "proto3";

package api.palace.common;

import "buf/validate/validate.proto";
import "palace/common/common_enum.proto";
import "palace/common/system.proto";
import "palace/common/team_notice.proto";

option go_package = "github.com/aide-family/moon/pkg/api/palace/common;common";

// TeamStrategyGroupItem represents the structure of a team strategy group item.
message TeamStrategyGroupItem {
  // Unique identifier for the strategy group.
  uint32 groupId = 1;
  // Name of the strategy group.
  string name = 2;
  // Remarks or additional information about the group.
  string remark = 3;
  // Status of the strategy group.
  api.palace.common.GlobalStatus status = 4;
  // Total number of strategies in the group.
  int64 strategyCount = 5;
  // Number of enabled strategies in the group.
  int64 enableStrategyCount = 6;
  // Timestamp indicating when the group was created.
  string createdAt = 7;
  // Timestamp indicating when the group was last updated.
  string updatedAt = 8;
  // Information about the creator of the group.
  api.palace.common.UserBaseItem creator = 9;
}

// TeamStrategyItem represents the structure of a team strategy item.
message TeamStrategyItem {
  // Unique identifier for the strategy.
  uint32 strategyId = 1;
  // Id of the group to which the strategy belongs.
  uint32 groupId = 2;
  // Name of the strategy.
  string name = 3;
  // Remarks or additional information about the strategy.
  string remark = 4;
  // Status of the strategy.
  api.palace.common.GlobalStatus status = 5;
  // Information about the creator of the strategy.
  api.palace.common.UserBaseItem creator = 6;
  // Timestamp indicating when the strategy was created.
  string createdAt = 7;
  // Timestamp indicating when the strategy was last updated.
  string updatedAt = 8;
  // Information about the team associated with the strategy.
  api.palace.common.TeamBaseItem team = 9;
  repeated NoticeGroupItem notices = 10;
  api.palace.common.StrategyType strategyType = 11;
  TeamStrategyGroupItem group = 12;
}

// subscriber
message SubscriberItem {
  api.palace.common.UserBaseItem user = 1;
  // subscribe type
  api.palace.common.NoticeType subscribeType = 2;
  // strategy
  api.palace.common.TeamStrategyItem strategy = 3;
  // subscribe time
  string subscribeTime = 4;
}

// LabelNotices represents the structure of a label notice item.
message LabelNotices {
  string key = 1 [(buf.validate.field).required = true, (buf.validate.field).cel = {
    id: "KEY_GREATER_THAN_0",
    message: "key must be greater than 0"
    expression: "this.size() > 0"
  }, (buf.validate.field).cel = {
    id: "KEY_LESS_THAN_128",
    message: "key must be less than 128 characters"
    expression: "this.size() < 128"
  }];
  string value = 2 [(buf.validate.field).required = true, (buf.validate.field).cel = {
    id: "VALUE_GREATER_THAN_0",
    message: "value must be greater than 0"
    expression: "this.size() > 0"
  }, (buf.validate.field).cel = {
    id: "VALUE_LESS_THAN_128",
    message: "value must be less than 128 characters"
    expression: "this.size() < 128"
  }];
  repeated uint32 receiverRoutes = 3 [(buf.validate.field).required = true, (buf.validate.field).cel = {
    id: "RECEIVER_ROUTES_GREATER_THAN_0",
    message: "receiverRoutes must be greater than 0"
    expression: "this.all(x, x > 0)"
  }, (buf.validate.field).cel = {
    id: "RECEIVER_ROUTES_LESS_THAN_100",
    message: "receiverRoutes must be less than 100"
    expression: "this.size() > 0"
  }];
}