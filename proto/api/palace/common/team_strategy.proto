syntax = "proto3";

package api.palace.common;

import "google/protobuf/duration.proto";
import "palace/common/common_enum.proto";
import "palace/common/system.proto";
import "palace/common/team_datasource.proto";
import "palace/common/team_notice.proto";
import "palace/common/team_dict.proto";

option go_package = "github.com/moon-monitor/moon/pkg/api/palace/common;common";

// TeamStrategyGroupItem represents the structure of a team strategy group item.
message TeamStrategyGroupItem {
  // Unique identifier for the strategy group.
  uint32 groupId = 1;
  // Name of the strategy group.
  string name = 2;
  // Remarks or additional information about the group.
  string remark = 3;
  // Status of the strategy group.
  api.palace.common.GlobalStatus status = 4;
  // Total number of strategies in the group.
  int64 strategyCount = 5;
  // Number of enabled strategies in the group.
  int64 enableStrategyCount = 6;
  // Timestamp indicating when the group was created.
  string createdAt = 7;
  // Timestamp indicating when the group was last updated.
  string updatedAt = 8;
  // Information about the creator of the group.
  api.palace.common.UserBaseItem creator = 9;
}

// TeamStrategyItem represents the structure of a team strategy item.
message TeamStrategyItem {
  // Unique identifier for the strategy.
  uint32 strategyId = 1;
  // Id of the group to which the strategy belongs.
  uint32 groupId = 2;
  // Name of the strategy.
  string name = 3;
  // Remarks or additional information about the strategy.
  string remark = 4;
  // Status of the strategy.
  api.palace.common.GlobalStatus status = 5;
  // Information about the creator of the strategy.
  api.palace.common.UserBaseItem creator = 6;
  // Timestamp indicating when the strategy was created.
  string createdAt = 7;
  // Timestamp indicating when the strategy was last updated.
  string updatedAt = 8;
  // Information about the team associated with the strategy.
  api.palace.common.TeamBaseItem team = 9;
  repeated NoticeGroupItem notices = 10;
  api.palace.common.StrategyType strategyType = 11;
  TeamStrategyGroupItem group = 12;
}

message TeamStrategyMetricItem {
  message RuleItem {
    uint32 strategyMetricId = 1;
    api.palace.common.TeamDictItem level = 2;
    uint32 ruleId = 3;
    SampleMode sampleMode = 4;
    ConditionMetric condition = 5;
    int64 total = 6;
    repeated double values = 7;
    google.protobuf.Duration duration = 8;
    GlobalStatus status = 9;
    repeated NoticeGroupItem notices = 10;
    repeated StrategyMetricRuleLabelNotice labelNotices = 11;
    repeated api.palace.common.TeamDictItem alarmPages = 12;
  }
  TeamStrategyItem base = 1;
  uint32 StrategyMetricId = 2;
  string expr = 3;
  map<string, string> labels = 4;
  map<string, string> annotations = 5;
  repeated RuleItem strategyMetricRules = 6;
  repeated api.palace.common.TeamMetricDatasourceItem datasource = 7;
  api.palace.common.UserBaseItem creator = 8;
}

// subscriber
message SubscriberItem {
  api.palace.common.UserBaseItem user = 1;
  // subscribe type
  api.palace.common.NoticeType subscribeType = 2;
  // strategy
  api.palace.common.TeamStrategyItem strategy = 3;
  // subscribe time
  string subscribeTime = 4;
}