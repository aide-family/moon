syntax = "proto3";

package api.palace.common;

import "buf/validate/validate.proto";
import "palace/common/common_enum.proto";
import "palace/common/system.proto";

option go_package = "github.com/aide-family/moon/pkg/api/palace/common;common";

// PaginationRequest is used for pagination queries, specifying the page number and the number of items per page.
// page: The current page number, must be greater than 0.
// limit: The number of items per page, must be greater than 0 and less than or equal to 10000.
message PaginationRequest {
  uint32 page = 1 [(buf.validate.field).cel = {
    message: "page must be greater than 0"
    expression: "this > 0"
  }];
  uint32 pageSize = 2 [(buf.validate.field).cel = {
    message: "pageSize must be greater than 0 and less than or equal to 10000"
    expression: "this > 0 && this <= 10000"
  }];
}

// PaginationReply is the response for pagination queries, containing the total number of items, the current page number, and the number of items per page.
// total: The total number of items.
// page: The current page number.
// limit: The number of items per page.
message PaginationReply {
  uint32 total = 1;
  uint32 page = 2;
  uint32 pageSize = 3;
}

// SelectItem represents an option in a selection, including its value, display label, and whether it is disabled.
// value: The actual value of the option.
// label: The label displayed for the option.
// disabled: Indicates whether the option is disabled, true for disabled, false for enabled.
message SelectItem {
  message Extra {
    string remark = 1;
    string icon = 2;
    string color = 3;
  }
  uint32 value = 1;
  string label = 2;
  bool disabled = 3;
  Extra extra = 4;
}

// EmptyRequest represents an empty request, typically used for operations that do not require input parameters.
message EmptyRequest {}

// EmptyReply represents an empty response, typically used for operations that only need to return a status message.
// message: A string message, usually used to indicate the execution status.
message EmptyReply {}

message BasicAuth {
  string username = 1;
  string password = 2;
}

message TLS {
  string serverName = 1;
  string clientCert = 2;
  string clientKey = 3;
  bool skipVerify = 4;
}

message SendMessageLogItem {
  string requestId = 1;
  string message = 2;
  common.MessageType messageType = 3;
  common.SendMessageStatus status = 4;
  string error = 5;
  int32 retryCount = 6;
  string createdAt = 7;
  string updatedAt = 8;
}

// EmailConfigItem represents the structure of an email configuration
message EmailConfigItem {
  // Email user
  string user = 1;
  // Email password
  string pass = 2;
  // Email server host
  string host = 3;
  // Email server port
  uint32 port = 4;
  // Enable email configuration
  api.palace.common.GlobalStatus status = 5;
  // Name of the email configuration
  string name = 6;
  // Remark of the email configuration
  string remark = 7;
  // emailConfigId of the email configuration
  uint32 emailConfigId = 8;
  // creator of the email configuration
  api.palace.common.UserBaseItem creator = 9;
}

// SMSConfigItem represents the structure of an SMS configuration
message SMSConfigItem {
  // SMS provider type
  api.palace.common.SMSProviderType providerType = 1;
  // Access Key Id for the SMS provider
  string accessKeyId = 2;
  // Access Key Secret for the SMS provider
  string accessKeySecret = 3;
  // Sign name for the SMS provider
  string signName = 4;
  // Endpoint for the SMS provider
  string endpoint = 5;
  // Name of the SMS configuration
  string name = 6;
  // Remark of the SMS configuration
  string remark = 7;
  // smsConfigId of the SMS configuration
  uint32 smsConfigId = 8;
  // Enable SMS configuration
  api.palace.common.GlobalStatus status = 9;
  // creator of the SMS configuration
  api.palace.common.UserBaseItem creator = 10;
}

message TimeEngineItem {
  uint32 timeEngineId = 1;
  string name = 2;
  string remark = 3;
  api.palace.common.GlobalStatus status = 4;
  repeated TimeEngineItemRule rules = 5;
  string createdAt = 6;
  string updatedAt = 7;
  api.palace.common.UserBaseItem creator = 8;
}

message TimeEngineItemRule {
  uint32 timeEngineRuleId = 1;
  string name = 2;
  string remark = 3;
  api.palace.common.GlobalStatus status = 4;
  repeated TimeEngineItem engines = 5;
  api.palace.common.TimeEngineRuleType type = 6;
  repeated int64 rules = 7;
  string createdAt = 8;
  string updatedAt = 9;
  api.palace.common.UserBaseItem creator = 10;
}

message KeyValueItem {
  string key = 1;
  string value = 2;
}

message AnnotationsItem {
  string summary = 1;
  string description = 2;
}

// OperateLogItem represents the structure of an operation log item.
message OperateLogItem {
  string operation = 1;
  uint32 menuId = 2;
  string menuName = 3;
  string request = 4;
  string error = 5;
  string originRequest = 6;
  int64 duration = 7;
  string requestTime = 8;
  string replyTime = 9;
  string clientIP = 10;
  string userAgent = 11;
  string userBaseInfo = 12;
  string createdAt = 13;
  string updatedAt = 14;
}

// OperateLogListRequest represents the request data for listing operation logs
message OperateLogListRequest {
  // Pagination request details
  api.palace.common.PaginationRequest pagination = 1;
  // List of types to filter operation logs by
  repeated api.palace.common.OperateType operateTypes = 2;
  // Keyword to search operation logs by
  string keyword = 3;
  // User Id, optional for filtering logs by user
  uint32 userId = 4;
  // Time range to filter operation logs by
  repeated string timeRange = 5;
  // Operation
  string operation = 6;
}

// OperateLogListReply contains the response data for listing operation logs
message OperateLogListReply {
  // List of operation log items
  repeated api.palace.common.OperateLogItem items = 1;
  // Pagination response details
  api.palace.common.PaginationReply pagination = 2;
}

message TimeRangeReq {
  int64 start = 1;
  int64 end = 2;
}