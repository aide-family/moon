syntax = "proto3";

package api.palace;

import "google/api/annotations.proto";
import "buf/validate/validate.proto";
import "palace/common/system.proto";
import "palace/common/system_enum.proto";
import "palace/common/common.proto";
import "palace/common/common_enum.proto";
import "palace/common/team.proto";
import "palace/common/team_enum.proto";

option go_package = "github.com/aide-family/moon/pkg/api/palace;palace";

// System service provides operations for managing system users, roles, teams, and audits
service System {
  // UpdateUser updates user information
  rpc UpdateUser (UpdateUserRequest) returns (api.palace.common.EmptyReply) {
    option (google.api.http) = {
      put: "/api/system/user"
      body: "*"
    };
  }

  // UpdateUserStatus updates the status of multiple users
  rpc UpdateUserStatus (UpdateUserStatusRequest) returns (api.palace.common.EmptyReply) {
    option (google.api.http) = {
      put: "/api/system/user/status"
      body: "*"
    };
  }

  // ResetUserPassword resets the password for multiple users
  rpc ResetUserPassword (ResetUserPasswordRequest) returns (api.palace.common.EmptyReply) {
    option (google.api.http) = {
      put: "/api/system/user/password"
      body: "*"
    };
  }

  // UpdateUserPosition updates the position of a user
  rpc UpdateUserPosition (UpdateUserPositionRequest) returns (api.palace.common.EmptyReply) {
    option (google.api.http) = {
      put: "/api/system/user/position"
      body: "*"
    };
  }

  // GetUser retrieves a user by Id
  rpc GetUser (GetUserRequest) returns (api.palace.common.UserItem) {
    option (google.api.http) = {
      get: "/api/system/user/detail"
    };
  }

  // GetUserList lists users based on specified filters
  rpc GetUserList (GetUserListRequest) returns (GetUserListReply) {
    option (google.api.http) = {
      post: "/api/system/user/list"
      body: "*"
    };
  }

  // GetTeamList lists teams based on specified filters
  rpc GetTeamList (GetTeamListRequest) returns (GetTeamListReply) {
    option (google.api.http) = {
      post: "/api/system/team/list"
      body: "*"
    };
  }

  // GetTeam retrieves a team by Id
  rpc GetTeam (GetTeamRequest) returns (api.palace.common.TeamItem) {
    option (google.api.http) = {
      get: "/api/system/team/detail"
    };
  }

  // GetSystemRole retrieves a system role by Id
  rpc GetSystemRole (GetSystemRoleRequest) returns (api.palace.common.SystemRoleItem) {
    option (google.api.http) = {
      get: "/api/system/role"
    };
  }

  // GetSystemRoles lists system roles based on specified filters
  rpc GetSystemRoles (GetSystemRolesRequest) returns (GetSystemRolesReply) {
    option (google.api.http) = {
      post: "/api/system/role/list"
      body: "*"
    };
  }

  // SaveRole saves a new role or updates an existing one
  rpc SaveRole (SaveRoleRequest) returns (api.palace.common.EmptyReply) {
    option (google.api.http) = {
      post: "/api/system/role"
      body: "*"
    };
  }

  // UpdateRoleStatus updates the status of a role
  rpc UpdateRoleStatus (UpdateRoleStatusRequest) returns (api.palace.common.EmptyReply) {
    option (google.api.http) = {
      put: "/api/system/role/status"
      body: "*"
    };
  }

  // UpdateUserRoles updates the roles assigned to a user
  rpc UpdateUserRoles (UpdateUserRolesRequest) returns (api.palace.common.EmptyReply) {
    option (google.api.http) = {
      put: "/api/system/user/roles"
      body: "*"
    };
  }

  // UpdateRoleUsers updates the users assigned to a role
  rpc UpdateRoleUsers (UpdateRoleUsersRequest) returns (api.palace.common.EmptyReply) {
    option (google.api.http) = {
      put: "/api/system/role/users"
      body: "*"
    };
  }

  // GetTeamAuditList lists team audit records based on specified filters
  rpc GetTeamAuditList (GetTeamAuditListRequest) returns (GetTeamAuditListReply) {
    option (google.api.http) = {
      post: "/api/system/team/audit/list"
      body: "*"
    };
  }

  // UpdateTeamAuditStatus updates the status of a team audit record
  rpc UpdateTeamAuditStatus (UpdateTeamAuditStatusRequest) returns (api.palace.common.EmptyReply) {
    option (google.api.http) = {
      put: "/api/system/team/audit/status"
      body: "*"
    };
  }

  // OperateLogList lists operation logs based on specified filters
  rpc OperateLogList (api.palace.common.OperateLogListRequest) returns (api.palace.common.OperateLogListReply) {
    option (google.api.http) = {
      post: "/api/system/operate/log/list"
      body: "*"
    };
  }

  rpc GetSendMessageLogs (GetSendMessageLogsRequest) returns (GetSendMessageLogsReply) {
    option (google.api.http) = {
      post: "/api/team/log/send/message"
      body: "*"
    };
  }
  rpc GetSendMessageLog (OperateOneSendMessageRequest) returns (api.palace.common.SendMessageLogItem) {
    option (google.api.http) = {
      get: "/api/team/log/send/message"
    };
  }
  rpc RetrySendMessage (OperateOneSendMessageRequest) returns (api.palace.common.EmptyReply) {
    option (google.api.http) = {
      post: "/api/team/log/send/message/retry"
      body: "*"
    };
  }
}

// UpdateUserRequest represents the request data for updating user information
message UpdateUserRequest {
  // User Id
  uint32 userId = 1 [(buf.validate.field).required = true, (buf.validate.field).cel = {
    id: "UPDATE_USER_USER_ID_VALIDATOR",
    message: "must select a user"
    expression: "this > 0"
  }];
  // User nickname
  string nickname = 2 [(buf.validate.field).required = true, (buf.validate.field).cel = {
    id: "UPDATE_USER_NICKNAME_VALIDATOR",
    message: "nickname is required"
    expression: "this.size() > 0"
  }];
  // User avatar URL
  string avatar = 3 [(buf.validate.field).required = true, (buf.validate.field).cel = {
    id: "UPDATE_USER_AVATAR_VALIDATOR",
    message: "avatar is required"
    expression: "this.size() > 0"
  }, (buf.validate.field).cel = {
    id: "UPDATE_USER_AVATAR_MAX_LENGTH_VALIDATOR",
    message: "avatar must be less than 256 characters"
    expression: "this.size() <= 256"
  }, (buf.validate.field).cel = {
    id: "UPDATE_USER_AVATAR_URL_VALIDATOR",
    message: "avatar must be a valid URL"
    expression: "this.isUri()"
  }];
  // User gender
  api.palace.common.Gender gender = 4 [(buf.validate.field).required = true, (buf.validate.field).cel = {
    id: "UPDATE_USER_GENDER_VALIDATOR",
    message: "gender is required"
    expression: "this in ['GENDER_MALE', 'GENDER_FEMALE', 'GENDER_OTHER', 1, 2, 3]"
  }];
}

// UpdateUserStatusRequest represents the request data for updating user status
message UpdateUserStatusRequest {
  // List of user Ids to update
  repeated uint32 userIds = 1 [(buf.validate.field).cel = {
    id: "UPDATE_USER_USER_ID_SIZE_VALIDATOR",
    message: "please select user"
    expression: "this.size() > 0"
  }, (buf.validate.field).cel = {
    id: "UPDATE_USER_USER_ID_MAX_SIZE_VALIDATOR",
    message: "select user max size is 100"
    expression: "this.size() <= 100"
  }, (buf.validate.field).cel = {
    id: "UPDATE_USER_USER_ID_VALIDATOR",
    message: "a valid user must be selected"
    expression: "this.all(x, x > 0)"
  }];
  // New status for the users
  api.palace.common.UserStatus status = 2 [(buf.validate.field).required = true, (buf.validate.field).cel = {
    id: "UPDATE_USER_STATUS_VALIDATOR",
    message: "status must be one of the following: USER_STATUS_NORMAL, USER_STATUS_FORBIDDEN, USER_STATUS_DELETED"
    expression: "this in ['USER_STATUS_NORMAL', 'USER_STATUS_FORBIDDEN', 'USER_STATUS_DELETED', 1, 2, 3]"
  }];
}

// ResetUserPasswordRequest represents the request data for resetting user passwords
message ResetUserPasswordRequest {
  uint32 userId = 1 [(buf.validate.field).required = true, (buf.validate.field).cel = {
    id: "RESET_USER_PASSWORD_USER_ID_VALIDATOR",
    message: "must select a user"
    expression: "this > 0"
  }];
}

// UpdateUserPositionRequest represents the request data for updating user position
message UpdateUserPositionRequest {
  // User Id
  uint32 userId = 1 [(buf.validate.field).required = true, (buf.validate.field).cel = {
    id: "UPDATE_USER_POSITION_USER_ID_VALIDATOR",
    message: "must select a user"
    expression: "this > 0"
  }];
  // New position for the user
  api.palace.common.UserPosition position = 2 [(buf.validate.field).required = true, (buf.validate.field).cel = {
    id: "UPDATE_USER_POSITION_POSITION_VALIDATOR",
    message: "position must be one of the following: USER_POSITION_SUPER_ADMIN, USER_POSITION_ADMIN, USER_POSITION_USER, USER_POSITION_GUEST"
    expression: "this in ['USER_POSITION_SUPER_ADMIN', 'USER_POSITION_ADMIN', 'USER_POSITION_USER', 'USER_POSITION_GUEST', 1, 2, 3, 4]"
  }];
}

// GetUserRequest represents the request data for retrieving a user
message GetUserRequest {
  // User Id
  uint32 userId = 1 [(buf.validate.field).required = true, (buf.validate.field).cel = {
    id: "GET_USER_USER_ID_VALIDATOR",
    message: "must select a user"
    expression: "this > 0"
  }];
}

// GetUserListRequest represents the request data for listing users
message GetUserListRequest {
  // List of statuses to filter users by
  repeated api.palace.common.UserStatus status = 1;
  // List of positions to filter users by
  repeated api.palace.common.UserPosition position = 2;
  // Pagination request details
  api.palace.common.PaginationRequest pagination = 3 [(buf.validate.field).required = true];
  // Keyword to search users by
  string keyword = 4 [(buf.validate.field).cel = {
    id: "GET_USER_LIST_KEYWORD_VALIDATOR",
    message: "keyword must be less than 64 characters"
    expression: "this.size() <= 20"
  }];
}

// GetUserListReply contains the response data for listing users
message GetUserListReply {
  // List of user items
  repeated api.palace.common.UserItem items = 1;
  // Pagination response details
  api.palace.common.PaginationReply pagination = 2;
}

// GetTeamListRequest represents the request data for listing teams
message GetTeamListRequest {
  // Pagination request details
  api.palace.common.PaginationRequest pagination = 1 [(buf.validate.field).required = true];
  // List of statuses to filter teams by
  repeated api.palace.common.TeamStatus status = 2;
  // Keyword to search teams by
  string keyword = 3 [(buf.validate.field).cel = {
    id: "GET_TEAM_LIST_KEYWORD_VALIDATOR",
    message: "keyword must be less than 20 characters"
    expression: "this.size() <= 20"
  }];
  uint32 leaderId = 4;
  uint32 creatorId = 5;
}

// GetTeamListReply contains the response data for listing teams
message GetTeamListReply {
  // List of team items
  repeated api.palace.common.TeamItem items = 1;
  // Pagination response details
  api.palace.common.PaginationReply pagination = 2;
}

// GetSystemRolesRequest represents the request data for listing system roles
message GetSystemRolesRequest {
  // Pagination request details
  api.palace.common.PaginationRequest pagination = 1 [(buf.validate.field).required = true];
  // Keyword to search roles by
  string keyword = 2 [(buf.validate.field).cel = {
    id: "GET_SYSTEM_ROLES_KEYWORD_VALIDATOR",
    message: "keyword must be less than 20 characters"
    expression: "this.size() <= 20"
  }];
  // Status to filter roles by
  api.palace.common.GlobalStatus status = 3;
}

// GetSystemRolesReply contains the response data for listing system roles
message GetSystemRolesReply {
  // List of system role items
  repeated api.palace.common.SystemRoleItem items = 1;
  // Pagination response details
  api.palace.common.PaginationReply pagination = 2;
}

// SaveRoleRequest represents the request data for saving or updating a role
message SaveRoleRequest {
  // Role Id, optional for new roles
  uint32 roleId = 1;
  // Role name
  string name = 2 [(buf.validate.field).cel = {
    id: "SAVE_ROLE_NAME_MAX_LENGTH_VALIDATOR",
    message: "name max length is 32"
    expression: "this.size() <= 32"
  }, (buf.validate.field).required = true];
  // Role remark or description
  string remark = 3 [(buf.validate.field).cel = {
    id: "SAVE_ROLE_REMARK_MAX_LENGTH_VALIDATOR",
    message: "remark max length is 200"
    expression: "this.size() <= 200"
  }];
  // List of resource Ids associated with the role
  repeated uint32 menuIds = 4 [(buf.validate.field).required = true, (buf.validate.field).cel = {
    id: "SAVE_ROLE_MENU_IDS_VALIDATOR",
    message: "menuIds must be greater than 0"
    expression: "this.size() == 0 || this.all(x, x > 0)"
  }];
}

// UpdateRoleStatusRequest represents the request data for updating role status
message UpdateRoleStatusRequest {
  // Role Id
  uint32 roleId = 1 [(buf.validate.field).required = true, (buf.validate.field).cel = {
    id: "UPDATE_ROLE_STATUS_ROLE_ID_VALIDATOR",
    message: "must select a role"
    expression: "this > 0"
  }];
  // New status for the role
  api.palace.common.GlobalStatus status = 2 [(buf.validate.field).required = true, (buf.validate.field).cel = {
    id: "UPDATE_ROLE_STATUS_STATUS_VALIDATOR",
    message: "status must be one of the following: GLOBAL_STATUS_ENABLE, GLOBAL_STATUS_DISABLE"
    expression: "this in ['GLOBAL_STATUS_ENABLE', 'GLOBAL_STATUS_DISABLE', 1, 2]"
  }];
}

// UpdateUserRolesRequest represents the request data for updating user roles
message UpdateUserRolesRequest {
  // User Id
  uint32 userId = 1 [(buf.validate.field).required = true, (buf.validate.field).cel = {
    id: "UPDATE_USER_ROLES_USER_ID_VALIDATOR",
    message: "must select a user"
    expression: "this > 0"
  }];
  // List of role Ids to assign to the user
  repeated uint32 roleIds = 2 [(buf.validate.field).required = true, (buf.validate.field).cel = {
    id: "UPDATE_USER_ROLES_ROLE_IDS_VALIDATOR",
    message: "roleIds must be greater than 0"
    expression: "this.size() == 0 || this.all(x, x > 0)"
  }];
}

// UpdateRoleUsersRequest represents the request data for updating role users
message UpdateRoleUsersRequest {
  // Role Id
  uint32 roleId = 1 [(buf.validate.field).required = true, (buf.validate.field).cel = {
    id: "UPDATE_ROLE_USERS_ROLE_ID_VALIDATOR",
    message: "must select a role"
    expression: "this > 0"
  }];
  // List of user Ids to assign to the role
  repeated uint32 userIds = 2 [(buf.validate.field).required = true, (buf.validate.field).cel = {
    id: "UPDATE_ROLE_USERS_USER_IDS_VALIDATOR",
    message: "userIds must be greater than 0"
    expression: "this.size() == 0 || this.all(x, x > 0)"
  }];
}

// GetTeamRequest represents the request data for retrieving a team
message GetTeamRequest {
  // Team Id
  uint32 teamId = 1 [(buf.validate.field).required = true];
}

// GetSystemRoleRequest represents the request data for retrieving a system role
message GetSystemRoleRequest {
  // Role Id
  uint32 roleId = 1 [(buf.validate.field).required = true, (buf.validate.field).cel = {
    id: "GET_SYSTEM_ROLE_ROLE_ID_VALIDATOR",
    message: "must select a role"
    expression: "this > 0"
  }];
}

// GetTeamAuditListRequest represents the request data for listing team audit records
message GetTeamAuditListRequest {
  // Pagination request details
  api.palace.common.PaginationRequest pagination = 1 [(buf.validate.field).required = true];
  // List of statuses to filter team audit records by
  repeated api.palace.common.TeamAuditStatus status = 2;
  // Keyword to search team audit records by
  string keyword = 3 [(buf.validate.field).cel = {
    id: "GET_TEAM_AUDIT_LIST_KEYWORD_VALIDATOR",
    message: "keyword must be less than 20 characters"
    expression: "this.size() <= 20"
  }];
  // User Id, optional for filtering audits by user
  uint32 userId = 4;
  repeated api.palace.common.TeamAuditAction actions = 5;
}

// GetTeamAuditListReply contains the response data for listing team audit records
message GetTeamAuditListReply {
  // List of team audit items
  repeated api.palace.common.TeamAuditItem items = 1;
  // Pagination response details
  api.palace.common.PaginationReply pagination = 2;
}

// UpdateTeamAuditStatusRequest represents the request data for updating team audit status
message UpdateTeamAuditStatusRequest {
  // Audit Id
  uint32 auditId = 1 [(buf.validate.field).required = true, (buf.validate.field).cel = {
    id: "UPDATE_TEAM_AUDIT_STATUS_AUDIT_ID_VALIDATOR",
    message: "must select a audit"
    expression: "this > 0"
  }];
  // New status for the team audit record
  api.palace.common.TeamAuditStatus status = 2 [(buf.validate.field).required = true, (buf.validate.field).cel = {
    id: "UPDATE_TEAM_AUDIT_STATUS_STATUS_VALIDATOR",
    message: "status must be one of the following: TEAM_AUDIT_STATUS_PENDING, TEAM_AUDIT_STATUS_APPROVED, TEAM_AUDIT_STATUS_REJECTED"
    expression: "this in ['TEAM_AUDIT_STATUS_PENDING', 'TEAM_AUDIT_STATUS_APPROVED', 'TEAM_AUDIT_STATUS_REJECTED', 1, 2, 3]"
  }];
  // Reason for the status update
  string reason = 3 [(buf.validate.field).cel = {
    message: "reason max length is 200"
    expression: "this.size() <= 200"
  }];
}

message GetSendMessageLogsRequest {
  string requestId = 1 [(buf.validate.field).cel = {
    id: "GET_SEND_MESSAGE_LOGS_REQUEST_ID_VALIDATOR",
    message: "requestId must be less than 64 characters"
    expression: "this.size() <= 64"
  }];
  common.MessageType messageType = 2;
  common.SendMessageStatus status = 3;
  string keyword = 4 [(buf.validate.field).cel = {
    id: "GET_SEND_MESSAGE_LOGS_KEYWORD_VALIDATOR",
    message: "keyword must be less than 20 characters"
    expression: "this.size() <= 20"
  }];
  common.PaginationRequest pagination = 5 [(buf.validate.field).required = true];
  repeated string timeRange = 6 [(buf.validate.field).cel = {
    id: "GET_SEND_MESSAGE_LOGS_SEND_TIME_VALIDATOR",
    message: "timeRange must be 2 elements and each element must be 19 characters"
    expression: "this.size() == 2 && this.all(x, x.size() == 19)"
  }];
}

message GetSendMessageLogsReply {
  repeated common.SendMessageLogItem items = 1;
  common.PaginationReply pagination = 2;
}

message OperateOneSendMessageRequest {
  string requestId = 1 [(buf.validate.field).required = true, (buf.validate.field).cel = {
    id: "OPERATE_ONE_SEND_MESSAGE_REQUEST_ID_VALIDATOR",
    message: "requestId must be less than 64 characters"
    expression: "this.size() <= 64"
  }];
  string sendTime = 2 [(buf.validate.field).cel = {
    id: "OPERATE_ONE_SEND_MESSAGE_SEND_TIME_VALIDATOR",
    message: "sendTime must be 19 characters, format: 2005-01-02 15:04:05"
    expression: "this.size() == 19"
  }];
}