syntax = "proto3";

package api.palace;

import "google/api/annotations.proto";
import "buf/validate/validate.proto";
import "palace/common/common.proto";
import "palace/common/common_enum.proto";
import "palace/common/team_strategy.proto";

option go_package = "github.com/aide-family/moon/pkg/api/palace;palace";

// TeamStrategy service provides operations for managing team strategy groups and strategies
service TeamStrategy {
  // SaveTeamStrategyGroup saves a new team strategy group or updates an existing one
  rpc SaveTeamStrategyGroup (SaveTeamStrategyGroupRequest) returns (api.palace.common.EmptyReply) {
    option (google.api.http) = {
      post: "/api/team/strategy/group"
      body: "*"
    };
  }

  // UpdateTeamStrategyGroupStatus updates the status of a team strategy group
  rpc UpdateTeamStrategyGroupStatus (UpdateTeamStrategyGroupStatusRequest) returns (api.palace.common.EmptyReply) {
    option (google.api.http) = {
      put: "/api/team/strategy/group/status"
      body: "*"
    };
  }

  // DeleteTeamStrategyGroup deletes a team strategy group by Id
  rpc DeleteTeamStrategyGroup (DeleteTeamStrategyGroupRequest) returns (api.palace.common.EmptyReply) {
    option (google.api.http) = {
      delete: "/api/team/strategy/group"
    };
  }

  // GetTeamStrategyGroup retrieves a team strategy group by Id
  rpc GetTeamStrategyGroup (GetTeamStrategyGroupRequest) returns (api.palace.common.TeamStrategyGroupItem) {
    option (google.api.http) = {
      get: "/api/team/strategy/group"
    };
  }

  // ListTeamStrategyGroup lists team strategy groups based on specified filters
  rpc ListTeamStrategyGroup (ListTeamStrategyGroupRequest) returns (ListTeamStrategyGroupReply) {
    option (google.api.http) = {
      post: "/api/team/strategy/group/list"
      body: "*"
    };
  }

  // SelectTeamStrategyGroup selects team strategy groups based on specified filters
  rpc SelectTeamStrategyGroup (SelectTeamStrategyGroupRequest) returns (SelectTeamStrategyGroupReply) {
    option (google.api.http) = {
      post: "/api/team/strategy/group/select"
      body: "*"
    };
  }

  // SaveTeamStrategy saves a new team strategy or updates an existing one
  rpc SaveTeamStrategy (SaveTeamStrategyRequest) returns (api.palace.common.EmptyReply) {
    option (google.api.http) = {
      post: "/api/team/strategy"
      body: "*"
    };
  }

  // DeleteTeamStrategy deletes a team strategy by Id
  rpc DeleteTeamStrategy (DeleteTeamStrategyRequest) returns (api.palace.common.EmptyReply) {
    option (google.api.http) = {
      delete: "/api/team/strategy"
    };
  }
  
  // ListTeamStrategy lists team strategies based on specified filters
  rpc ListTeamStrategy (ListTeamStrategyRequest) returns (ListTeamStrategyReply) {
    option (google.api.http) = {
      post: "/api/team/strategy/list"
      body: "*"
    };
  }

   // UpdateTeamStrategiesStatus updates the status of multiple team strategies
   rpc UpdateTeamStrategiesStatus (UpdateTeamStrategiesStatusRequest) returns (api.palace.common.EmptyReply) {
    option (google.api.http) = {
      put: "/api/team/strategy/status"
      body: "*"
    };
  }

  // SubscribeTeamStrategy subscribes or unsubscribes from a team strategy
  rpc SubscribeTeamStrategy (SubscribeTeamStrategyRequest) returns (api.palace.common.EmptyReply) {
    option (google.api.http) = {
      post: "/api/team/strategy/subscribe"
      body: "*"
    };
  }

  // SubscribeTeamStrategies subscribes or unsubscribes from multiple team strategies
  rpc SubscribeTeamStrategies (SubscribeTeamStrategiesRequest) returns (SubscribeTeamStrategiesReply) {
    option (google.api.http) = {
      post: "/api/team/strategy/subscribe/list"
      body: "*"
    };
  }
}

// SaveTeamStrategyGroupRequest represents the request data for saving or updating a team strategy group
message SaveTeamStrategyGroupRequest {
  // Strategy group Id, optional for new groups
  uint32 groupId = 1;
  // Strategy group name
  string name = 2 [(buf.validate.field).cel = {
    message: "name must be less than 128 characters"
    expression: "this.size() <= 128"
  }, (buf.validate.field).cel = {
    message: "name must be greater than 0 characters"
    expression: "this.size() > 0"
  }];
  // Strategy group remark or description
  string remark = 3 [(buf.validate.field).cel = {
    message: "remark must be less than 255 characters"
    expression: "this.size() <= 255"
  }];
}

// UpdateTeamStrategyGroupStatusRequest represents the request data for updating the status of a team strategy group
message UpdateTeamStrategyGroupStatusRequest {
  // Strategy group Id
  uint32 groupId = 1 [(buf.validate.field).cel = {
    message: "must select a strategy group"
    expression: "this > 0"
  }];
  // New status for the strategy group
  api.palace.common.GlobalStatus status = 2 [(buf.validate.field).required = true, (buf.validate.field).cel = {
    message: "status must be valid"
    expression: "this in [1, 2, 'GLOBAL_STATUS_ENABLE', 'GLOBAL_STATUS_DISABLE']"
  }];
}

// DeleteTeamStrategyGroupRequest represents the request data for deleting a team strategy group
message DeleteTeamStrategyGroupRequest {
  // Strategy group Id
  uint32 groupId = 1 [(buf.validate.field).required = true, (buf.validate.field).cel = {
    message: "must select a strategy group"
    expression: "this > 0"
  }];
}

// GetTeamStrategyGroupRequest represents the request data for retrieving a team strategy group
message GetTeamStrategyGroupRequest {
  // Strategy group Id
  uint32 groupId = 1 [(buf.validate.field).required = true, (buf.validate.field).cel = {
    message: "must select a strategy group"
    expression: "this > 0"
  }];
}

// ListTeamStrategyGroupRequest represents the request data for listing team strategy groups
message ListTeamStrategyGroupRequest {
  // Pagination request details
  api.palace.common.PaginationRequest pagination = 1 [(buf.validate.field).required = true];
  // Keyword to search strategy groups by
  string keyword = 2 [(buf.validate.field).cel = {
    message: "keyword must be less than 20 characters"
    expression: "this.size() <= 20"
  }];
  // List of statuses to filter strategy groups by
  api.palace.common.GlobalStatus status = 3 [(buf.validate.field).cel = {
    message: "status must be valid"
    expression: "this in [0, 1, 2, 'GLOBAL_STATUS_UNKNOWN', 'GLOBAL_STATUS_ENABLE', 'GLOBAL_STATUS_DISABLE']"
  }];
}

// ListTeamStrategyGroupReply contains the response data for listing team strategy groups
message ListTeamStrategyGroupReply {
  // List of strategy group items
  repeated api.palace.common.TeamStrategyGroupItem items = 1;
  // Pagination response details
  api.palace.common.PaginationReply pagination = 2;
}

// SelectTeamStrategyGroupRequest represents the request data for selecting team strategy groups
message SelectTeamStrategyGroupRequest {
  // Pagination request details
  api.palace.common.PaginationRequest pagination = 1 [(buf.validate.field).required = true];
  // Keyword to search strategy groups by
  string keyword = 2 [(buf.validate.field).cel = {
    message: "keyword must be less than 20 characters"
    expression: "this.size() <= 20"
  }];
  // List of statuses to filter strategy groups by
  repeated api.palace.common.GlobalStatus status = 3 [(buf.validate.field).cel = {
    message: "status must be valid"
    expression: "this in [0, 1, 2, 'GLOBAL_STATUS_UNKNOWN', 'GLOBAL_STATUS_ENABLE', 'GLOBAL_STATUS_DISABLE']"
  }];
}

// SelectTeamStrategyGroupReply contains the response data for selecting team strategy groups
message SelectTeamStrategyGroupReply {
  // List of strategy group items
  repeated api.palace.common.SelectItem items = 1;
  // Pagination response details
  api.palace.common.PaginationReply pagination = 2;
}

message SaveTeamStrategyRequest {
  // Strategy item Id, optional for new items
  uint32 strategyId = 1;
  // Strategy item name
  string name = 2 [(buf.validate.field).cel = {
    message: "name must be less than 128 characters"
    expression: "this.size() <= 128"
  }, (buf.validate.field).cel = {
    message: "name must be greater than 0 characters"
    expression: "this.size() > 0"
  }];
  // Strategy item remark or description
  string remark = 3 [(buf.validate.field).cel = {
    message: "remark must be less than 255 characters"
    expression: "this.size() <= 255"
  }];
  // Strategy item type
  api.palace.common.StrategyType strategyType = 4 [(buf.validate.field).cel = {
    message: "strategyType must be valid"
    expression: "this in [1, 2, 3, 4, 5, 6, 7, 'STRATEGY_TYPE_METRIC', 'STRATEGY_TYPE_EVENT', 'STRATEGY_TYPE_LOGS', 'STRATEGY_TYPE_PORT', 'STRATEGY_TYPE_HTTP', 'STRATEGY_TYPE_PING', 'STRATEGY_TYPE_CERT']"
  }];
  // Receiver routes
  repeated uint32 receiverRoutes = 5 [(buf.validate.field).cel = {
    id: "RECEIVER_ROUTES_SIZE_LESS_THAN_10",
    message: "receiverRoutes must be less than 10"
    expression: "this.size() <= 10"
  }, (buf.validate.field).cel = {
    id: "RECEIVER_ROUTES_UNIQUE",
    message: "receiverRoutes must be unique"
    expression: "this.unique()"
  }, (buf.validate.field).cel = {
    id: "RECEIVER_ROUTES_GREATER_THAN_0",
    message: "receiverRoutes must be greater than 0"
    expression: "this.all(x, x > 0)"
  }];
  uint32 groupId = 6 [(buf.validate.field).required = true, (buf.validate.field).cel = {
    id: "GROUP_ID_GREATER_THAN_0",
    message: "must select a group"
    expression: "this > 0"
  }];
}

message UpdateTeamStrategiesStatusRequest {
  // Strategy ids
  repeated uint32 strategyIds = 1;
  // Status
  api.palace.common.GlobalStatus status = 2;
}

message DeleteTeamStrategyRequest {
  // Strategy id
  uint32 strategyId = 1;
}

message ListTeamStrategyRequest {
  // Pagination request details
  api.palace.common.PaginationRequest pagination = 1;
  // Keyword to search strategies by
  string keyword = 2 [(buf.validate.field).string.max_len = 20];
  // List of statuses to filter strategies by
  api.palace.common.GlobalStatus status = 3;
  // Group id
  repeated uint32 groupIds = 4;
  // Strategy type
  repeated api.palace.common.StrategyType strategyTypes = 5;
}

message ListTeamStrategyReply {
  // List of strategy items
  repeated api.palace.common.TeamStrategyItem items = 1;
  // Pagination response details
  api.palace.common.PaginationReply pagination = 2;
}

message SubscribeTeamStrategyRequest {
  // Strategy id
  uint32 strategyId = 1;
  // subscribe type
  api.palace.common.NoticeType subscribeType = 2;
}

message SubscribeTeamStrategiesRequest {
  // subscribers
  repeated uint32 subscribers = 1;
  // subscribe type
  api.palace.common.NoticeType subscribeType = 2;
  api.palace.common.PaginationRequest pagination = 3;
}

message SubscribeTeamStrategiesReply {
  // subscribers
  repeated api.palace.common.SubscriberItem items = 1;
  // pagination
  api.palace.common.PaginationReply pagination = 2;
}