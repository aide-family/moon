syntax = "proto3";

package api.palace;

import "google/api/annotations.proto";
import "buf/validate/validate.proto";
import "palace/common/system.proto";
import "palace/common/common.proto";
import "palace/common/common_enum.proto";

option go_package = "github.com/aide-family/moon/pkg/api/palace;palace";

// Menu service provides operations for managing menus
service Menu {
  // SaveMenu creates or updates a system menu
  rpc SaveMenu (SaveMenuRequest) returns (api.palace.common.EmptyReply) {
    option (google.api.http) = {
      put: "/api/menu/save"
      body: "*"
    };
  }

  // GetMenu retrieves a menu by Id
  rpc GetMenu (GetMenuRequest) returns (api.palace.common.MenuTreeItem) {
    option (google.api.http) = {
      get: "/api/menu/detail"
    };
  }

  // GetMenuTree returns the menu tree
  rpc GetMenuTree (GetMenuTreeRequest) returns (GetMenuTreeReply) {
    option (google.api.http) = {
      get: "/api/menu/tree"
    };
  }

  // GetTeamMenuTree returns the menu tree
  rpc GetTeamMenuTree (GetMenuTreeRequest) returns (GetMenuTreeReply) {
    option (google.api.http) = {
      get: "/api/team/menu/tree"
    };
  }

  // DeleteMenu deletes a menu by Id
  rpc DeleteMenu (DeleteMenuRequest) returns (api.palace.common.EmptyReply) {
    option (google.api.http) = {
      delete: "/api/menu/delete"
    };
  }
}

// GetMenuRequest represents the request data for retrieving a menu
message GetMenuRequest {
  // Id of the menu to retrieve
  uint32 menuId = 1 [(buf.validate.field).required = true, (buf.validate.field).cel = {
    id: "GET_MENU_MENU_ID_VALIDATOR",
    message: "must select a menu"
    expression: "this > 0"
  }];
}

// GetMenuTreeRequest represents the request data for retrieving the menu tree
message GetMenuTreeRequest {
  // menu category
  api.palace.common.MenuCategory menuCategory = 1;
}

// GetMenuTreeReply contains the response data for retrieving the menu tree
message GetMenuTreeReply {
  // List of menu items
  repeated api.palace.common.MenuTreeItem menus = 1;
}

// SaveMenuRequest represents the request data for creating or updating a system menu
message SaveMenuRequest {
  // Id of the menu (0 for create, >0 for update)
  uint32 menuId = 1;
  // Name of the menu
  string name = 2 [(buf.validate.field).required = true, (buf.validate.field).cel = {
    id: "SAVE_MENU_NAME_VALIDATOR",
    message: "name is required"
    expression: "this.size() > 0"
  }, (buf.validate.field).cel = {
    id: "SAVE_MENU_NAME_MAX_LENGTH_VALIDATOR",
    message: "name must be less than 64 characters"
    expression: "this.size() <= 64"
  }];
  // Path of the menu
  string menuPath = 3;
  // Api path of the menu
  string apiPath = 4;
  // Status of the menu
  api.palace.common.GlobalStatus status = 5 [(buf.validate.field).required = true, (buf.validate.field).cel = {
    id: "SAVE_MENU_STATUS_VALIDATOR",
    message: "status must be one of the following: GLOBAL_STATUS_ENABLE, GLOBAL_STATUS_DISABLE"
    expression: "this in ['GLOBAL_STATUS_ENABLE', 'GLOBAL_STATUS_DISABLE', 1, 2]"
  }];
  // Icon of the menu
  string menuIcon = 6;
  // Parent menu Id (0 for root menu)
  uint32 parentId = 7;
  // Type of the menu
  api.palace.common.MenuType menuType = 8 [(buf.validate.field).required = true, (buf.validate.field).cel = {
    id: "SAVE_MENU_MENU_TYPE_VALIDATOR",
    message: "menuType must be one of the following: MENU_TYPE_SYSTEM, MENU_TYPE_TEAM, MENU_TYPE_USER, MENU_TYPE_NONE"
    expression: "this in ['MENU_TYPE_SYSTEM', 'MENU_TYPE_TEAM', 'MENU_TYPE_USER', 'MENU_TYPE_NONE', 1, 2, 3, 4]"
  }];
  // Category of the menu
  api.palace.common.MenuCategory menuCategory = 9 [(buf.validate.field).required = true, (buf.validate.field).cel = {
    id: "SAVE_MENU_MENU_CATEGORY_VALIDATOR",
    message: "menuCategory must be one of the following: MENU_CATEGORY_MENU, MENU_CATEGORY_BUTTON"
    expression: "this in ['MENU_CATEGORY_MENU', 'MENU_CATEGORY_BUTTON', 1, 2]"
  }];
  // Process type of the menu
  api.palace.common.MenuProcessType processType = 10;
  // Whether the menu is rely on brother
  bool isRelyOnBrother = 11;
  // Sort of the menu
  uint32 sort = 12;
}

// DeleteMenuRequest represents the request data for deleting a menu
message DeleteMenuRequest {
  // Id of the menu to delete
  uint32 menuId = 1 [(buf.validate.field).required = true, (buf.validate.field).cel = {
    id: "DELETE_MENU_MENU_ID_VALIDATOR",
    message: "must select a menu"
    expression: "this > 0"
  }];
}