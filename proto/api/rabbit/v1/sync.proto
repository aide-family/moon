syntax = "proto3";

package api.rabbit.v1;

import "buf/validate/validate.proto";
import "google/api/annotations.proto";
import "rabbit/common/email.proto";
import "rabbit/common/sms.proto";
import "rabbit/common/hook.proto";
import "rabbit/common/notice_user.proto";
import "rabbit/common/notice_group.proto";
import "rabbit/common/common.proto";
import "common/notice.proto";

option go_package = "github.com/moon-monitor/moon/pkg/api/rabbit/v1;v1";

service Sync {
  rpc Sms (SyncSmsRequest) returns (rabbit.common.EmptyReply) {
    option (google.api.http) = {
      post: "/v1/sync/sms"
      body: "*"
    };
  }

  rpc Email (SyncEmailRequest) returns (rabbit.common.EmptyReply) {
    option (google.api.http) = {
      post: "/v1/sync/email"
      body: "*"
    };
  }

  rpc Hook (SyncHookRequest) returns (rabbit.common.EmptyReply) {
    option (google.api.http) = {
      post: "/v1/sync/hook"
      body: "*"
    };
  }

  rpc NoticeGroup (SyncNoticeGroupRequest) returns (rabbit.common.EmptyReply) {
    option (google.api.http) = {
      post: "/v1/sync/notice-group"
      body: "*"
    };
  }

  rpc NoticeUser (SyncNoticeUserRequest) returns (rabbit.common.EmptyReply) {
    option (google.api.http) = {
      post: "/v1/sync/notice-user"
      body: "*"
    };
  }

  rpc Remove(RemoveRequest) returns (rabbit.common.EmptyReply) {
    option (google.api.http) = {
      post: "/v1/sync/remove"
      body: "*"
    };
  }
}

message SyncSmsRequest {
  repeated rabbit.common.SMSConfig smss = 1;
  string teamId = 2 [(buf.validate.field).required = true];
}

message SyncEmailRequest {
  repeated rabbit.common.EmailConfig emails = 1;
  string teamId = 2 [(buf.validate.field).required = true];
}

message SyncHookRequest {
  repeated rabbit.common.HookConfig hooks = 1;
  string teamId = 2 [(buf.validate.field).required = true];
}

message SyncNoticeGroupRequest {
  repeated rabbit.common.NoticeGroup noticeGroups = 1;
  string teamId = 2 [(buf.validate.field).required = true];
}

message SyncNoticeUserRequest {
  repeated rabbit.common.NoticeUser noticeUsers = 1;
  string teamId = 2 [(buf.validate.field).required = true];
}

message RemoveRequest {
  string teamId = 1 [(buf.validate.field).required = true];
  string name = 2 [(buf.validate.field).required = true];
  api.common.NoticeType type = 3 [(buf.validate.field).required = true];
}
