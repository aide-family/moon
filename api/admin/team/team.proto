syntax = "proto3";

package api.admin.team;

import "google/api/annotations.proto";
import "buf/validate/validate.proto";
import "admin/model.proto";
import "enum.proto";
import "global.proto";
import "conf/conf.proto";

option go_package = "github.com/aide-family/moon/api/admin/team;team";
option java_multiple_files = true;
option java_package = "api.admin.team";

// 多租户下的团队管理
service Team {
  // 创建团队
  rpc CreateTeam (CreateTeamRequest) returns (CreateTeamReply) {
    option (google.api.http) = {
      post: "/v1/team"
      body: "*"
    };
  }

  // 更新团队
  rpc UpdateTeam (UpdateTeamRequest) returns (UpdateTeamReply) {
    option (google.api.http) = {
      put: "/v1/team/{id}"
      body: "*"
    };
  }

  // 获取团队详情
  rpc GetTeam (GetTeamRequest) returns (GetTeamReply) {
    option (google.api.http) = {
      get: "/v1/team/{id}"
    };
  }

  // 获取团队列表
  rpc ListTeam (ListTeamRequest) returns (ListTeamReply) {
    option (google.api.http) = {
      post: "/v1/team/list"
      body: "*"
    };
  }

  // 修改团队状态
  rpc UpdateTeamStatus (UpdateTeamStatusRequest) returns (UpdateTeamStatusReply) {
    option (google.api.http) = {
      put: "/v1/team/status"
      body: "*"
    };
  }

  // 我的团队， 查看当前用户的团队列表
  rpc MyTeam (MyTeamRequest) returns (MyTeamReply) {
    option (google.api.http) = {
      get: "/v1/my/team"
    };
  }

  // 移除团队成员
  rpc RemoveTeamMember (RemoveTeamMemberRequest) returns (RemoveTeamMemberReply) {
    option (google.api.http) = {
      delete: "/v1/team/member"
    };
  }

  // 设置成管理员
  rpc SetTeamAdmin (SetTeamAdminRequest) returns (SetTeamAdminReply) {
    option (google.api.http) = {
      put: "/v1/team/member/set/admin"
      body: "*"
    };
  }

  // 移除团队管理员
  rpc RemoveTeamAdmin (RemoveTeamAdminRequest) returns (RemoveTeamAdminReply) {
    option (google.api.http) = {
      delete: "/v1/team/member/remove/admin"
    };
  }

  // 设置成员角色
  rpc SetMemberRole (SetMemberRoleRequest) returns (SetMemberRoleReply) {
    option (google.api.http) = {
      put: "/v1/team/member/role"
      body: "*"
    };
  }

  // 获取团队成员列表
  rpc ListTeamMember (ListTeamMemberRequest) returns (ListTeamMemberReply) {
    option (google.api.http) = {
      post: "/v1/team/member/list"
      body: "*"
    };
  }

  // 移交超级管理员
  rpc TransferTeamLeader (TransferTeamLeaderRequest) returns (TransferTeamLeaderReply) {
    option (google.api.http) = {
      put: "/v1/team/leader/transfer"
      body: "*"
    };
  }

  // 设置团队配置
  rpc SetTeamConfig (SetTeamConfigRequest) returns (SetTeamConfigReply) {
    option (google.api.http) = {
      put: "/v1/team/set/config"
      body: "*"
    };
  }

  // 查看团队配置信息
  rpc GetTeamConfig (GetTeamConfigRequest) returns (GetTeamConfigReply) {
    option (google.api.http) = {
      get: "/v1/team/get/config"
    };
  }

  // 更新团队成员状态
  rpc UpdateTeamMemberStatus (UpdateTeamMemberStatusRequest) returns (UpdateTeamMemberStatusReply) {
    option (google.api.http) = {
      put: "/v1/team/member/status"
      body: "*"
    };
  }

  // 团队成员详情
  rpc GetTeamMemberDetail (GetTeamMemberDetailRequest) returns (GetTeamMemberDetailReply) {
    option (google.api.http) = {
      get: "/v1/team/member/detail/{id}"
    };
  }
}

message CreateTeamRequest {
  // 团队名称, 长度限制在3-20个字符
  string name = 1 [(buf.validate.field).required = true, (buf.validate.field).cel = {
    message: "团队名称长度在3-20个字符之间"
    expression: 'this.size() >= 3 && this.size() <= 20'
  }];
  // 团队描述, 长度限制在0-200个字符
  string remark = 2 [(buf.validate.field).cel = {
    message: "团队描述长度在0-100个字符之间"
    expression: 'this.size() <= 200'
  }];
  // 团队logo, 长度限制在0-200个字符
  string logo = 3 [(buf.validate.field).cel = {
    message: "团队logo长度在0-200个字符之间, 且必须是合法的URL"
    expression: 'this.size() == 0 || this.size() <= 200 && this.size() > 0 && this.isUri()'
  }];
  // 团队状态
  Status status = 4 [(buf.validate.field).required = true];
  // 负责人, 不传为自己
  uint32 leaderId = 5;
  // 管理员
  repeated uint32 adminIds = 6;
}
message CreateTeamReply {
  TeamItem detail = 1;
}

// 只允许修改基础信息
message UpdateTeamRequest {
  uint32 id = 1 [(buf.validate.field).required = true];
  // 团队名称, 长度限制在3-20个字符
  string name = 2 [(buf.validate.field).required = true, (buf.validate.field).cel = {
    message: "团队名称长度在3-20个字符之间"
    expression: 'this.size() >= 3 && this.size() <= 20'
  }];
  // 团队描述, 长度限制在0-200个字符
  string remark = 3 [(buf.validate.field).cel = {
    message: "团队描述长度在0-100个字符之间"
    expression: 'this.size() <= 200'
  }];
  // 团队logo, 长度限制在0-200个字符
  string logo = 4 [(buf.validate.field).cel = {
    message: "团队logo长度在0-200个字符之间, 且必须是合法的URL"
    expression: 'this.size() == 0 || this.size() <= 200 && this.size() > 0 && this.isUri()'
  }];
  // 团队状态
  Status status = 5 [(buf.validate.field).required = true];
}
message UpdateTeamReply {}

message GetTeamRequest {
  uint32 id = 1 [(buf.validate.field).required = true];
}
message GetTeamReply {
  TeamItem detail = 1;
}

message ListTeamRequest {
  string keyword = 1;
  PaginationReq pagination = 2 [(buf.validate.field).required = true];
  // 状态
  Status status = 3;
  // 创建人
  uint32 creatorId = 4;
  // 负责人
  uint32 leaderId = 5;
  // ids
  repeated uint32 ids = 6;
}
message ListTeamReply {
  PaginationReply pagination = 1;
  repeated TeamItem list = 2;
}

message UpdateTeamStatusRequest {
  uint32 id = 1 [(buf.validate.field).required = true];
  Status status = 2 [(buf.validate.field).required = true];
}
message UpdateTeamStatusReply {}

message MyTeamRequest {}
message MyTeamReply {
  repeated TeamItem list = 1;
}

message RemoveTeamMemberRequest {
  uint32 memberID = 2 [(buf.validate.field).required = true];
}
message RemoveTeamMemberReply {}

message SetTeamAdminRequest {
  repeated uint32 memberIds = 2 [(buf.validate.field).required = true];
}
message SetTeamAdminReply {}

message RemoveTeamAdminRequest {
  repeated uint32 memberIds = 2 [(buf.validate.field).required = true];
}
message RemoveTeamAdminReply {}

message SetMemberRoleRequest {
  uint32 memberID = 2 [(buf.validate.field).required = true];
  repeated uint32 roles = 3;
}
message SetMemberRoleReply {}

message ListTeamMemberRequest {
  string keyword = 2;
  PaginationReq pagination = 3 [(buf.validate.field).required = true];
  Gender gender = 4;
  Status status = 5;
  Role role = 6;
  repeated uint32 memberIds = 7;
}
message ListTeamMemberReply {
  PaginationReply pagination = 1;
  repeated TeamMemberItem list = 2;
}

message TransferTeamLeaderRequest {
  uint32 memberID = 2 [(buf.validate.field).required = true];
}
message TransferTeamLeaderReply {}

message SetTeamConfigRequest {
  // 邮箱配置
  pkg.conf.EmailConfig emailConfig = 1;
  // 对称加密配置
  pkg.conf.SymmetricEncryptionConfig symmetricEncryptionConfig = 2;
  // 非对称加密配置
  pkg.conf.AsymmetricEncryptionConfig asymmetricEncryptionConfig = 3;
}
message SetTeamConfigReply {}

message GetTeamConfigRequest {}
message GetTeamConfigReply {
  // 邮箱配置
  pkg.conf.EmailConfig emailConfig = 1;
  // 对称加密配置
  pkg.conf.SymmetricEncryptionConfig symmetricEncryptionConfig = 2;
  // 非对称加密配置
  pkg.conf.AsymmetricEncryptionConfig asymmetricEncryptionConfig = 3;
}

message UpdateTeamMemberStatusRequest {
  repeated uint32 memberIds = 1;
  Status status = 2;
}
message UpdateTeamMemberStatusReply {}

message GetTeamMemberDetailRequest {
  uint32 id = 1;
}
message GetTeamMemberDetailReply {
  TeamMemberItem detail = 1;
}