syntax = "proto3";

package api.admin.strategy;

import "google/api/annotations.proto";
import "buf/validate/validate.proto";
import "admin/model.proto";
import "enum.proto";
import "global.proto";

option go_package = "github.com/aide-family/moon/api/admin/strategy;strategy";
option java_multiple_files = true;
option java_package = "api.admin.strategy";

// 策略管理模块
service Strategy {
  // 策略组模块

  // 创建策略组
  rpc CreateStrategyGroup (CreateStrategyGroupRequest) returns (CreateStrategyGroupReply) {
    option (google.api.http) = {
      post: "/v1/group/strategy/create"
      body: "*"
    };
  }

  // 删除策略组
  rpc DeleteStrategyGroup (DeleteStrategyGroupRequest) returns (DeleteStrategyGroupReply) {
    option (google.api.http) = {
      delete: "/v1/group/strategy/{id}"
    };
  }

  // 策略组列表
  rpc ListStrategyGroup (ListStrategyGroupRequest) returns (ListStrategyGroupReply) {
    option (google.api.http) = {
      post: "/v1/group/strategy/list"
      body: "*"
    };
  }

  // 策略组详情
  rpc GetStrategyGroup (GetStrategyGroupRequest) returns (GetStrategyGroupReply) {
    option (google.api.http) = {
      get: "/v1/group/strategy/{id}"
    };
  }

  // 修改策略组
  rpc UpdateStrategyGroup (UpdateStrategyGroupRequest) returns (UpdateStrategyGroupReply) {
    option (google.api.http) = {
      put: "/v1/group/strategy/{id}"
      body: "*"
    };
  }

  // 修改策略分组状态
  rpc UpdateStrategyGroupStatus(UpdateStrategyGroupStatusRequest) returns (UpdateStrategyGroupStatusReply) {
    option (google.api.http) = {
      put: "/v1/group/strategy/update/status"
      body: "*"
    };
  }

  // 策略模块

  // 创建策略
  rpc CreateStrategy (CreateStrategyRequest) returns (CreateStrategyReply) {
    option (google.api.http) = {
      post: "/v1/strategy/create"
      body: "*"
    };
  }

  // 修改策略
  rpc UpdateStrategy (UpdateStrategyRequest) returns (UpdateStrategyReply) {
    option (google.api.http) = {
      put: "/v1/strategy/update/{id}"
      body: "*"
    };
  }

  // 修改策略状态
  rpc UpdateStrategyStatus(UpdateStrategyStatusRequest) returns (UpdateStrategyStatusReply) {
    option (google.api.http) = {
      put: "/v1/strategy/status"
      body: "*"
    };
  }

  // 删除策略
  rpc DeleteStrategy (DeleteStrategyRequest) returns (DeleteStrategyReply) {
    option (google.api.http) = {
      delete: "/v1/strategy/delete/{id}"
    };
  }

  // 获取策略
  rpc GetStrategy (GetStrategyRequest) returns (GetStrategyReply) {
    option (google.api.http) = {
      get: "/v1/strategy/get/{id}"
    };
  }

  // 策略列表
  rpc ListStrategy (ListStrategyRequest) returns (ListStrategyReply) {
    option (google.api.http) = {
      post: "/v1/strategy/list"
      body: "*"
    };
  }

  // 复制策略 根据策略id 生成策略
  rpc CopyStrategy (CopyStrategyRequest) returns (CopyStrategyReply) {
    option (google.api.http) = {
      post: "/v1/strategy/copy"
      body: "*"
    };
  }

  // 推送策略
  rpc PushStrategy (PushStrategyRequest) returns (PushStrategyReply) {
    option (google.api.http) = {
      get: "/v1/strategy/push/{id}"
    };
  }
}

message CreateStrategyGroupRequest {
  // 策略组名称
  string name = 1 [(buf.validate.field).string.min_len = 1];
  // 策略组说明信息
  string remark = 2;
  // 策略组状态
  Status status = 3;
  //策略分组类型
  repeated uint32 categoriesIds = 4 [(buf.validate.field).cel = {
    message: "请选择策略分组类型",
    expression: "this.size() > 0"
  }, (buf.validate.field).cel = {
    message: "策略组类型重复",
    expression: "this.unique()"
  }];
}
message CreateStrategyGroupReply {}

message DeleteStrategyGroupRequest {
  // 策略组ID
  uint32 id = 1;
}
message DeleteStrategyGroupReply {}

message ListStrategyGroupRequest {
  // 分页参数
  PaginationReq pagination = 1 [(buf.validate.field).required = true];
  // 关键字模糊查询
  string keyword = 2 [(buf.validate.field).cel = {
    message: "关键字模糊查询长度限制在0-20个字符",
    expression: "this.size() <= 20"
  }];
  // 状态查询
  Status status = 3;
  // 策略分组类型
  repeated uint32 categoriesIds = 4;
}
message ListStrategyGroupReply {
  // 策略组列表
  repeated StrategyGroupItem list = 1;
  // 分页信息
  PaginationReply pagination = 2;
}

message GetStrategyGroupRequest {
  // 策略组ID
  uint32 id = 1;
}
message GetStrategyGroupReply {
  StrategyGroupItem detail = 1;
}

message UpdateStrategyGroupRequest {
  // 策略组ID
  uint32 id = 1 [(buf.validate.field).required = true];
  CreateStrategyGroupRequest update = 2 [(buf.validate.field).required = true];
}
message UpdateStrategyGroupReply {}

message CreateStrategyRequest {
  // 策略组ID
  uint32 groupId = 1 [(buf.validate.field).cel = {
    message: "策略组不能为空！",
    expression: "this > 0"
  }];
  // 策略模板id
  uint32 templateId = 2;
  // 备注
  string remark = 3 [(buf.validate.field).cel = {
    message: "字典备注长度限制在0-200个字符",
    expression: "this.size() <= 200"
    id: "CreateStrategyRequestRemark"
  }];
  // 状态
  Status status = 4;
  // 采样率
  uint32 step = 5 [(buf.validate.field).cel = {
    message: "采样率不能为空！",
    expression: "this > 0"
  }];
  // 数据源id
  repeated uint32 datasourceIds = 6 [(buf.validate.field).cel = {
    message: "请选择至少一个数据源",
    expression: "this.size() > 0"
  }, (buf.validate.field).cel = {
    message: "数据源重复",
    expression: "this.unique()"
  }];
  // 模板来源
  TemplateSourceType sourceType = 7;
  // 策略名称
  string name = 8 [(buf.validate.field).cel = {
    expression: "this.size() > 0 && this.size() <= 50"
    message: "策略名称长度必须大于0且小于50"
    id: "CreateStrategyRequestName"
  }];
  // Metric策略等级
  repeated CreateStrategyMetricLevelRequest strategyMetricLevel = 9 ;
  // 策略标签
  map<string, string> labels = 10;
  // 策略注解
  map<string, string> annotations = 11 [(buf.validate.field).cel = {
    expression: "uint(this.size()) >= 2 && uint(this.size()) <= 5"
    message: "注解数量必须大于等于2且小于等于5",
    id: "CreateStrategyRequestAnnotations"
  }, (buf.validate.field).cel = {
    message: "注解必须包含summary"
    expression: "has(this.summary)"
  }, (buf.validate.field).cel = {
    message: "注解必须包含description"
    expression: "has(this.description)"
  }];
  // 策略表达式
  string expr = 12 [(buf.validate.field).cel = {
    expression: "this.size() > 0 && this.size() <= 1000"
    message: "策略表达式长度必须大于0且小于1000"
    id: "CreateStrategyRequestExpr"
  }];
  //策略类型
  repeated uint32 categoriesIds = 13 [(buf.validate.field).cel = {
    message: "策略类型重复",
    expression: "this.unique()"
  }];
  // 告警组
  repeated uint32 alarmGroupIds = 14 [(buf.validate.field).cel = {
    message: "告警组重复",
    expression: "this.unique()"
  }];

  // 策略类型
  StrategyType strategyType = 15;
  //  MQ策略等级
  repeated CreateStrategyMQLevelRequest strategyMqLevel = 16 ;
  option (buf.validate.message).cel = {
    id: "StrategyMetricLevelRequired",
    expression: "this.strategyType != 1 || (this.strategyMetricLevel.size() > 0)",
    message: "StrategyMetricLevel不能为空"
  };

  option (buf.validate.message).cel = {
    id: "StrategyMqLevelRequired",
    expression: "this.strategyType != 6 || (this.strategyMqLevel.size() > 0)",
    message: "StrategyMqLevel不能为空"
  };
}
message CreateStrategyReply {}

message UpdateStrategyGroupStatusRequest {
  // 策略分组ID列表
  repeated uint32 ids = 1 [(buf.validate.field).cel = {
    expression: "this.size() >= 1"
    message: "请选择正确的策略数据"
  }];
  // 启用状态
  Status status = 2 [(buf.validate.field).cel = {
    expression: "this in [1, 2]"
    message: "请选择正确的启用状态, 启用(1);禁用(2)"
  }];
}

message UpdateStrategyGroupStatusReply{}

message UpdateStrategyRequest {
  uint32 id = 1 [(buf.validate.field).required = true];
  CreateStrategyRequest data = 2 [(buf.validate.field).required = true];
}
message UpdateStrategyReply {}

message DeleteStrategyRequest {
  uint32 id = 1;
}
message DeleteStrategyReply {}

message GetStrategyRequest {
  uint32 id = 1;
}
message GetStrategyReply {
  StrategyItem detail = 1;
}

message ListStrategyRequest {
  // 分页参数
  PaginationReq pagination = 1 [(buf.validate.field).required = true];
  // 关键字模糊查询
  string keyword = 2 [(buf.validate.field).cel = {
    message: "关键字模糊查询长度限制在0-20个字符",
    expression: "this.size() <= 20"
  }];
  // 状态查询
  Status status = 3;
  DatasourceType datasourceType = 4;
}
message ListStrategyReply {
  // 分页信息
  PaginationReply pagination = 1;
  // 策略列表
  repeated StrategyItem list = 2;
}

message UpdateStrategyStatusRequest {
  // 策略ID列表
  repeated uint32 ids = 1 [(buf.validate.field).cel = {
    expression: "this.size() >= 1"
    message: "请选择正确的策略数据"
  }];
  // 启用状态
  Status status = 2 [(buf.validate.field).cel = {
    expression: "this in [1, 2]"
    message: "请选择正确的启用状态, 启用(1);禁用(2)"
  }];
}
message UpdateStrategyStatusReply {}

message CreateStrategyMQLevelRequest{
  // 值
  string value = 1 [(buf.validate.field).required = true];
  // 条件
  MQCondition condition = 2 [(buf.validate.field).required = true];
  // 数据类型
  MQDataType dataType = 3 [(buf.validate.field).required = true];
  // 状态
  Status status = 4;
  // 告警等级ID
  uint32 alarmLevelId = 5;
  // 告警页面ID
  repeated uint32 alarmPageIds = 6 [(buf.validate.field).cel = {
    message: "请选择告警页面",
    expression: "this.size() > 0"
  }, (buf.validate.field).cel = {
    message: "告警页面重复",
    expression: "this.unique()"
  }];
  repeated uint32 alarmGroupIds = 7 [(buf.validate.field).cel = {
    message: "告警组重复",
    expression: "this.unique()"
  }];
  // 策略Labels
  repeated CreateStrategyLabelNoticeRequest labelNotices = 8;
  // path key
  string  pathKey = 9;
}

message CreateStrategyMetricLevelRequest{
  // 策略持续时间
  int64 duration = 1;
  // 持续次数
  uint32 count = 2;
  // 持续的类型
  SustainType sustainType = 3;
  // 执行频率
  int64 interval = 4;
  // 状态
  Status status = 5;
  // 告警等级ID
  uint32 levelId = 6;
  // 阈值
  double threshold = 7;
  // 条件
  Condition condition = 8;
  // 告警页面ID
  repeated uint32 alarmPageIds = 9 [(buf.validate.field).cel = {
    message: "请选择告警页面",
    expression: "this.size() > 0"
  }, (buf.validate.field).cel = {
    message: "告警页面重复",
    expression: "this.unique()"
  }];
  repeated uint32 alarmGroupIds = 10 [(buf.validate.field).cel = {
    message: "告警组重复",
    expression: "this.unique()"
  }];
  // 策略Labels
  repeated CreateStrategyLabelNoticeRequest labelNotices = 15;
  // ID
  uint32 id = 16;
}

message CopyStrategyRequest {
  uint32 strategyId = 1;
}
message CopyStrategyReply {
  uint32 id = 1;
}

message CreateStrategyLabelNoticeRequest {
  string name = 1 [(buf.validate.field).cel = {
    message: "标签名称长度限制在1-200个字符",
    expression: "this.size() <= 200 && this.size() > 0"
    id: "CreateStrategyLabelsRequestName"
  }];
  string value = 2 [(buf.validate.field).cel = {
    message: "标签值长度限制在1-200个字符",
    expression: "this.size() <= 200 && this.size() > 0"
    id: "CreateStrategyLabelsRequestValue"
  }];
  repeated uint32 alarmGroupIds = 10 [(buf.validate.field).cel = {
    message: "请选择告警组",
    expression: "this.size() > 0"
  }, (buf.validate.field).cel = {
    message: "告警组重复",
    expression: "this.unique()"
  }];
}

message PushStrategyRequest {
  uint32 id = 1 [(buf.validate.field).required = true];
}
message PushStrategyReply {}