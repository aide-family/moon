syntax = "proto3";

package api.admin.user;

import "google/api/annotations.proto";
import "buf/validate/validate.proto";
import "admin/model.proto";
import "enum.proto";
import "global.proto";

option go_package = "github.com/aide-family/moon/api/admin/user;user";
option java_multiple_files = true;
option java_package = "api.admin.user";

// 用户模块
service User {
  // 创建用户
  rpc CreateUser (CreateUserRequest) returns (CreateUserReply) {
    option (google.api.http) = {
      post: "/v1/user"
      body: "*"
    };
  }

  // 更新用户
  rpc UpdateUser (UpdateUserRequest) returns (UpdateUserReply) {
    option (google.api.http) = {
      put: "/v1/user/update/{id}"
      body: "*"
    };
  }

  // 删除用户
  rpc DeleteUser (DeleteUserRequest) returns (DeleteUserReply) {
    option (google.api.http) = {
      delete: "/v1/user/{id}"
    };
  }

  // 获取用户
  rpc GetUser (GetUserRequest) returns (GetUserReply) {
    option (google.api.http) = {
      get: "/v1/user/{id}"
    };
  }

  // 获取个人信息
  rpc GetUserSelfBasic (GetUserSelfBasicRequest) returns (GetUserSelfBasicReply) {
    option (google.api.http) = {
      get: "/v1/user/self/basic"
    };
  }

  // 列表用户
  rpc ListUser (ListUserRequest) returns (ListUserReply) {
    option (google.api.http) = {
      post: "/v1/user/list"
      body: "*"
    };
  }

  // 批量修改用户状态
  rpc BatchUpdateUserStatus (BatchUpdateUserStatusRequest) returns (BatchUpdateUserStatusReply) {
    option (google.api.http) = {
      put: "/v1/user/status"
      body: "*"
    };
  }

  // 重置用户密码
  rpc ResetUserPassword (ResetUserPasswordRequest) returns (ResetUserPasswordReply) {
    option (google.api.http) = {
      put: "/v1/user/password"
      body: "*"
    };
  }

  // 用户修改密码
  rpc ResetUserPasswordBySelf (ResetUserPasswordBySelfRequest) returns (ResetUserPasswordBySelfReply) {
    option (google.api.http) = {
      put: "/v1/user/password/self"
      body: "*"
    };
  }

  // 获取用户下拉列表
  rpc GetUserSelectList (ListUserRequest) returns (GetUserSelectListReply) {
    option (google.api.http) = {
      post: "/v1/user/select"
      body: "*"
    };
  }

  // 修改电话号码
  rpc UpdateUserPhone (UpdateUserPhoneRequest) returns (UpdateUserPhoneReply) {
    option (google.api.http) = {
      put: "/v1/user/phone"
      body: "*"
    };
  }

  // 修改邮箱
  rpc UpdateUserEmail (UpdateUserEmailRequest) returns (UpdateUserEmailReply) {
    option (google.api.http) = {
      put: "/v1/user/email"
      body: "*"
    };
  }

  // 修改用户头像
  rpc UpdateUserAvatar (UpdateUserAvatarRequest) returns (UpdateUserAvatarReply) {
    option (google.api.http) = {
      put: "/v1/user/avatar"
      body: "*"
    };
  }

  // 修改个人基础信息
  rpc UpdateUserBaseInfo (UpdateUserBaseInfoRequest) returns (UpdateUserBaseInfoReply) {
    option (google.api.http) = {
      put: "/v1/user/self/base"
      body: "*"
    };
  }

  // 设置用户角色
  rpc SetUserRole (SetUserRoleRequest) returns (SetUserRoleReply) {
    option (google.api.http) = {
      put: "/v1/user/role"
      body: "*"
    };
  }
}

message CreateUserRequest {
  // 用户名, 只能是英文字母、数字、下划线, 长度限制在3-20个字符
  string name = 1 [(buf.validate.field).cel = {
    message: "用户名必须是英文字母、数字、下划线, 长度限制在3-20个字符",
    expression: "this.size() >= 3 && this.size() <= 20"
  }];
  // 昵称, 长度限制在0-20个字符
  string nickname = 2 [(buf.validate.field).cel = {
    message: "昵称长度限制在0-20个字符",
    expression: "this.size() <= 20"
  }];
  // 邮箱, 必须满足邮箱格式
  string email = 3 [(buf.validate.field).cel = {
    message: "值必须为有效的电子邮件地址",
    expression: "this.isEmail()"
  }, (buf.validate.field).cel = {
    message: "邮箱长度限制在60个字符以内",
    expression: "this.size() <= 60"
  }];
  // 手机, 必须满足手机格式
  string phone = 4 [(buf.validate.field).cel = {
    message: "值必须为有效的手机号码",
    expression: "this.matches(\"^(13[0-9]|14[01456879]|15[0-35-9]|16[2567]|17[0-8]|18[0-9]|19[0-35-9])[0-9]{8}$\")",
  }, (buf.validate.field).cel = {
    message: "手机号码长度限制为11个字符",
    expression: "this.size() == 11"
  }];
  // 密码
  string password = 5 [(buf.validate.field).cel = {
    message: "密码不允许为空",
    expression: "this.size() != 0"
  }];
  // 备注
  string remark = 6 [(buf.validate.field).cel = {
    message: "备注长度限制在0-200个字符",
    expression: "this.size() <= 200"
  }];
  // 头像URL
  string avatar = 7 [(buf.validate.field).cel = {
    message: "头像URL长度限制在0-255个字符",
    expression: "this.size() <= 255"
  }];
  // 状态
  Status status = 8 [(buf.validate.field).cel = {
    expression: "(this in [1, 2])",
    message: "状态值必须在[启用(1), 禁用(2)]之间",
  }];
  // 性别
  Gender gender = 9 [(buf.validate.field).cel = {
    expression: "(this in [1, 2])",
    message: "性别值必须在[男(1), 女(2)]之间",
  }];
  // 角色
  Role role = 10 [(buf.validate.field).cel = {
    expression: "(this in [1, 2, 3])",
    message: "角色值必须在[超级管理员(1), 管理员(2), 普通用户(3)]之间",
  }];
}
message CreateUserReply {}

message UpdateUserRequest {
  // 用户id
  uint32 id = 1 [(buf.validate.field).cel = {
    message: "必须选择具体要更新的用户",
    expression: "this > 0"
  }];
  // 更新的数据
  CreateUserRequest data = 2 [(buf.validate.field).required = true];
}
message UpdateUserReply {}

message DeleteUserRequest {
  // 用户id
  uint32 id = 1 [(buf.validate.field).cel = {
    message: "必须选择具体要删除的用户",
    expression: "this > 0"
  }];
}
message DeleteUserReply {}

message GetUserRequest {
  // 用户id
  uint32 id = 1 [(buf.validate.field).cel = {
    message: "必须选择具体要获取的用户",
    expression: "this > 0"
  }];
}
message GetUserReply {
  // 用户详情
  UserItem detail = 1;
}

message ListUserRequest {
  // 分页参数
  PaginationReq pagination = 1 [(buf.validate.field).required = true];
  // 关键字模糊查询
  string keyword = 2 [(buf.validate.field).cel = {
    message: "关键字模糊查询长度限制在0-20个字符",
    expression: "this.size() <= 20"
  }];
  // 状态查询
  Status status = 3 [(buf.validate.field).cel = {
    expression: "(this in [0, 1, 2])",
    message: "状态值必须在[全部(0), 启用(1), 禁用(2)]之间",
  }];
  // 性别查询
  Gender gender = 4 [(buf.validate.field).cel = {
    expression: "(this in [0, 1, 2])",
    message: "性别值必须在[全部(0), 男(1), 女(2)]之间",
  }];
  // 角色查询
  Role role = 5 [(buf.validate.field).cel = {
    expression: "(this in [0, 1, 2, 3])",
    message: "角色值必须在[全部(0), 超级管理员(1), 管理员(2), 普通用户(3)]之间",
  }];
  // ID 列表
  repeated uint32 ids = 6;
}
message ListUserReply {
  // 用户列表
  repeated UserItem list = 1;
  // 分页信息
  PaginationReply pagination = 2;
}

message BatchUpdateUserStatusRequest {
  // 用户id列表
  repeated uint32 ids = 1 [(buf.validate.field).cel = {
    message: "必须选择具体要更新的用户",
    expression: "this.size() > 0"
  }, (buf.validate.field).cel = {
    message: "必须保证修改对象数据唯一",
    expression: "this.unique()"
  }];
  // 状态
  Status status = 2 [(buf.validate.field).cel = {
    expression: "(this in [1, 2])",
    message: "状态值必须在[启用(1), 禁用(2)]之间",
  }];
}
message BatchUpdateUserStatusReply {}

// 只有系统管理员有此权限
message ResetUserPasswordRequest {
  // 用户id
  uint32 id = 1 [(buf.validate.field).cel = {
    message: "必须选择具体要更新的用户",
    expression: "this > 0"
  }];
}
message ResetUserPasswordReply {}

message ResetUserPasswordBySelfRequest {
  // 旧密码
  string oldPassword = 1 [(buf.validate.field).cel = {
    message: "旧密码不允许为空",
    expression: "this.size() != 0"
  }];
  // 新密码
  string newPassword = 2 [(buf.validate.field).cel = {
    message: "新密码不允许为空",
    expression: "this.size() != 0"
  }];
}
message ResetUserPasswordBySelfReply {}

message GetUserSelectListReply {
  // 用户列表
  repeated SelectItem list = 1;
  // 分页信息
  PaginationReply pagination = 2;
}

message UpdateUserPhoneRequest {
  // 新电话号码
  string phone = 1 [(buf.validate.field).cel = {
    message: "新电话号码不允许为空",
    expression: "this.size() != 0"
  }, (buf.validate.field).cel = {
    message: "新电话号码必须为有效的手机号码",
    expression: "this.matches(\"^(13[0-9]|14[01456879]|15[0-35-9]|16[2567]|17[0-8]|18[0-9]|19[0-35-9])[0-9]{8}$\")",
  }];
}
message UpdateUserPhoneReply {}

message UpdateUserEmailRequest {
  // 新邮箱
  string email = 1 [(buf.validate.field).cel = {
    message: "新邮箱不允许为空",
    expression: "this.size() != 0"
  }, (buf.validate.field).cel = {
    message: "新邮箱格式不正确",
    expression: "this.isEmail()"
  }];
}
message UpdateUserEmailReply {}

message UpdateUserAvatarRequest {
  // 头像
  string avatar = 1 [(buf.validate.field).cel = {
    message: "头像不允许为空",
    expression: "this.size() != 0"
  }];
}
message UpdateUserAvatarReply {}

message UpdateUserBaseInfoRequest {
  // 用户昵称
  string nickname = 1 [(buf.validate.field).cel = {
    message: "用户昵称不允许为空",
    expression: "this.size() != 0"
  }];
  // 用户性别
  Gender gender = 2 [(buf.validate.field).cel = {
    expression: "(this in [0, 1, 2])",
    message: "性别值必须在[全部(0), 男(1), 女(2)]之间",
  }];
  // 备注
  string remark = 3 [(buf.validate.field).cel = {
    message: "备注长度限制在0-200个字符",
    expression: "this.size() <= 200"
  }];
}
message UpdateUserBaseInfoReply {}

message GetUserSelfBasicRequest {}
message GetUserSelfBasicReply {
  UserItem detail = 1;
}

message SetUserRoleRequest {
  // 用户id
  uint32 id = 1 [(buf.validate.field).cel = {
    message: "必须选择具体要操作的用户",
    expression: "this > 0"
  }];
  // 角色
  Role role = 2 [(buf.validate.field).cel = {
    expression: "(this in [1, 2, 3])",
    message: "角色值必须在[超级管理员(1), 管理员(2), 普通用户(3)]之间",
  }];
}
message SetUserRoleReply {}