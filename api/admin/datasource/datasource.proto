syntax = "proto3";

package api.admin.datasource;

import "google/api/annotations.proto";
import "buf/validate/validate.proto";
import "admin/model.proto";
import "enum.proto";
import "global.proto";
import "metadata.proto";

option go_package = "github.com/aide-family/moon/api/admin/datasource;datasource";
option java_multiple_files = true;
option java_package = "api.admin.datasource";

// 数据源管理模块
service Datasource {
  // 创建数据源
  rpc CreateDatasource (CreateDatasourceRequest) returns (CreateDatasourceReply) {
    option (google.api.http) = {
      post: "/v1/datasource"
      body: "*"
    };
  }

  // 更新数据源
  rpc UpdateDatasource (UpdateDatasourceRequest) returns (UpdateDatasourceReply) {
    option (google.api.http) = {
      put: "/v1/datasource/{id}"
      body: "*"
    };
  }

  // 删除数据源
  rpc DeleteDatasource (DeleteDatasourceRequest) returns (DeleteDatasourceReply) {
    option (google.api.http) = {
      delete: "/v1/datasource/{id}"
    };
  }

  // 获取数据源详情
  rpc GetDatasource (GetDatasourceRequest) returns (GetDatasourceReply) {
    option (google.api.http) = {
      get: "/v1/datasource/{id}"
    };
  }

  // 获取数据源列表
  rpc ListDatasource (ListDatasourceRequest) returns (ListDatasourceReply) {
    option (google.api.http) = {
      post: "/v1/datasource/list"
      body: "*"
    };
  }

  // 更新数据源状态
  rpc UpdateDatasourceStatus (UpdateDatasourceStatusRequest) returns (UpdateDatasourceStatusReply) {
    option (google.api.http) = {
      put: "/v1/datasource/{id}/status"
      body: "*"
    };
  }

  // 下拉列表
  rpc GetDatasourceSelect (ListDatasourceRequest) returns (GetDatasourceSelectReply) {
    option (google.api.http) = {
      post: "/v1/datasource/select"
      body: "*"
    };
  }

  // 同步数据源元数据
  rpc SyncDatasourceMeta (SyncDatasourceMetaRequest) returns (SyncDatasourceMetaReply) {
    option (google.api.http) = {
      post: "/v1/datasource/{id}/sync"
      body: "*"
    };
  }

  // 获取数据
  rpc DatasourceQuery (DatasourceQueryRequest) returns (DatasourceQueryReply) {
    option (google.api.http) = {
      post: "/v1/datasource/{id}/query"
      body: "*"
    };
  }
}

message DataSourceHealthRequest{
  string url = 1 [(buf.validate.field).required = true, (buf.validate.field).cel = {
    message: "数据源地址长度在 1 到 255 个字符之间"
    expression: 'this.size() >= 1 && this.size() <= 255'
  }, (buf.validate.field).cel = {
    message: "数据源地址必须是有效的 URI",
    expression: "this.isUri()",
  }];
  uint32 type = 2;
}


message CreateDatasourceRequest {
  // 数据源名称
  string name = 1 [(buf.validate.field).required = true, (buf.validate.field).cel = {
    message: "数据源名称长度在 1 到 50 个字符之间"
    expression: 'this.size() >= 1 && this.size() <= 50'
  }];
  // 数据源类型
  DatasourceType datasourceType = 2 [(buf.validate.field).required = true];
  // 数据源地址
  string endpoint = 3 [(buf.validate.field).required = true, (buf.validate.field).cel = {
    message: "数据源地址长度在 1 到 255 个字符之间"
    expression: 'this.size() >= 1 && this.size() <= 255'
  }, (buf.validate.field).cel = {
    message: "数据源地址必须是有效的 URI",
    expression: "this.isUri()",
  }];
  // 状态
  Status status = 4 [(buf.validate.field).required = true];
  // 描述
  string remark = 5 [(buf.validate.field).cel = {
    message: "描述长度在255 个字符以内",
    expression: 'this.size() <= 255'
  }];
  // 数据源配置
  map<string, string> config = 6;
  // 存储器类型
  StorageType storageType = 7;
}
message CreateDatasourceReply {}

message UpdateDatasourceRequest {
  uint32 id = 1 [(buf.validate.field).required = true];
  // 数据源名称
  string name = 2 [(buf.validate.field).required = true, (buf.validate.field).cel = {
    message: "数据源名称长度在 1 到 50 个字符之间"
    expression: 'this.size() >= 1 && this.size() <= 50'
  }];
  // 状态
  Status status = 3 [(buf.validate.field).required = true];
  // 描述
  string remark = 4 [(buf.validate.field).cel = {
    message: "描述长度在255 个字符以内",
    expression: 'this.size() <= 255'
  }];
  // 数据源类型
  DatasourceType datasourceType = 5 [(buf.validate.field).enum = {not_in: [0]}];
  // 存储器类型
  StorageType storageType = 6[(buf.validate.field).enum = {not_in: [0]}];
  // config 配置
  string  configValue = 7;
}
message UpdateDatasourceReply {}

message DeleteDatasourceRequest {
  uint32 id = 1 [(buf.validate.field).required = true];
}
message DeleteDatasourceReply {}

message GetDatasourceRequest {
  uint32 id = 1 [(buf.validate.field).required = true];
}
message GetDatasourceReply {
  DatasourceItem detail = 1;
}

message ListDatasourceRequest {
  // 分页参数
  PaginationReq pagination = 1 [(buf.validate.field).required = true];
  // 模糊查询
  string keyword = 2 [(buf.validate.field).cel = {
    message: "模糊查询长度在 20 个字符以内",
    expression: 'this.size() <= 20'
  }];
  // 状态
  Status status = 3;
  // 数据源类型
  DatasourceType datasourceType = 4;
  // 存储器类型
  StorageType storageType = 5;
}
message ListDatasourceReply {
  PaginationReply pagination = 1;
  repeated DatasourceItem list = 2;
}

message UpdateDatasourceStatusRequest {
  uint32 id = 1 [(buf.validate.field).required = true];
  Status status = 2 [(buf.validate.field).required = true];
}
message UpdateDatasourceStatusReply {}

message GetDatasourceSelectReply {
  repeated SelectItem list = 1;
}

message SyncDatasourceMetaRequest {
  uint32 id = 1 [(buf.validate.field).required = true];
}
message SyncDatasourceMetaReply {}

message DatasourceQueryRequest {
  uint32 id = 1 [(buf.validate.field).required = true];
  // 查询语句
  string query = 2 [(buf.validate.field).required = true];
  // 查询时间范围
  repeated string range = 3 [(buf.validate.field).required = true];
  // 步长
  uint32 step = 4;
}
message DatasourceQueryReply {
  repeated MetricQueryResult list = 1;
}

message ProxyQueryRequest {
  // 指定请求地址
  string to = 1;
  // 指定数据源
  uint32 datasourceID = 2;
  // 数据源明细信息
  DatasourceItem datasource = 3;
}

message ProxyMetricDatasourceQueryRequest {
  uint32 id = 1 [(buf.validate.field).required = true];
  uint32 teamID = 2 [(buf.validate.field).required = true];
  string to = 3;
}

