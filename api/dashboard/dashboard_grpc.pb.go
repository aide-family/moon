// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: dashboard/dashboard.proto

package dashboard

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Dashboard_CreateDashboard_FullMethodName     = "/api.dashboard.Dashboard/CreateDashboard"
	Dashboard_UpdateDashboard_FullMethodName     = "/api.dashboard.Dashboard/UpdateDashboard"
	Dashboard_DeleteDashboard_FullMethodName     = "/api.dashboard.Dashboard/DeleteDashboard"
	Dashboard_GetDashboard_FullMethodName        = "/api.dashboard.Dashboard/GetDashboard"
	Dashboard_ListDashboard_FullMethodName       = "/api.dashboard.Dashboard/ListDashboard"
	Dashboard_ListDashboardSelect_FullMethodName = "/api.dashboard.Dashboard/ListDashboardSelect"
)

// DashboardClient is the client API for Dashboard service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DashboardClient interface {
	// 创建新的大盘
	CreateDashboard(ctx context.Context, in *CreateDashboardRequest, opts ...grpc.CallOption) (*CreateDashboardReply, error)
	// 更新大盘
	UpdateDashboard(ctx context.Context, in *UpdateDashboardRequest, opts ...grpc.CallOption) (*UpdateDashboardReply, error)
	// 删除大盘
	DeleteDashboard(ctx context.Context, in *DeleteDashboardRequest, opts ...grpc.CallOption) (*DeleteDashboardReply, error)
	// 大盘详情
	GetDashboard(ctx context.Context, in *GetDashboardRequest, opts ...grpc.CallOption) (*GetDashboardReply, error)
	// 大盘列表
	ListDashboard(ctx context.Context, in *ListDashboardRequest, opts ...grpc.CallOption) (*ListDashboardReply, error)
	// 大盘下拉列表
	ListDashboardSelect(ctx context.Context, in *ListDashboardSelectRequest, opts ...grpc.CallOption) (*ListDashboardSelectReply, error)
}

type dashboardClient struct {
	cc grpc.ClientConnInterface
}

func NewDashboardClient(cc grpc.ClientConnInterface) DashboardClient {
	return &dashboardClient{cc}
}

func (c *dashboardClient) CreateDashboard(ctx context.Context, in *CreateDashboardRequest, opts ...grpc.CallOption) (*CreateDashboardReply, error) {
	out := new(CreateDashboardReply)
	err := c.cc.Invoke(ctx, Dashboard_CreateDashboard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardClient) UpdateDashboard(ctx context.Context, in *UpdateDashboardRequest, opts ...grpc.CallOption) (*UpdateDashboardReply, error) {
	out := new(UpdateDashboardReply)
	err := c.cc.Invoke(ctx, Dashboard_UpdateDashboard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardClient) DeleteDashboard(ctx context.Context, in *DeleteDashboardRequest, opts ...grpc.CallOption) (*DeleteDashboardReply, error) {
	out := new(DeleteDashboardReply)
	err := c.cc.Invoke(ctx, Dashboard_DeleteDashboard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardClient) GetDashboard(ctx context.Context, in *GetDashboardRequest, opts ...grpc.CallOption) (*GetDashboardReply, error) {
	out := new(GetDashboardReply)
	err := c.cc.Invoke(ctx, Dashboard_GetDashboard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardClient) ListDashboard(ctx context.Context, in *ListDashboardRequest, opts ...grpc.CallOption) (*ListDashboardReply, error) {
	out := new(ListDashboardReply)
	err := c.cc.Invoke(ctx, Dashboard_ListDashboard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardClient) ListDashboardSelect(ctx context.Context, in *ListDashboardSelectRequest, opts ...grpc.CallOption) (*ListDashboardSelectReply, error) {
	out := new(ListDashboardSelectReply)
	err := c.cc.Invoke(ctx, Dashboard_ListDashboardSelect_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DashboardServer is the server API for Dashboard service.
// All implementations must embed UnimplementedDashboardServer
// for forward compatibility
type DashboardServer interface {
	// 创建新的大盘
	CreateDashboard(context.Context, *CreateDashboardRequest) (*CreateDashboardReply, error)
	// 更新大盘
	UpdateDashboard(context.Context, *UpdateDashboardRequest) (*UpdateDashboardReply, error)
	// 删除大盘
	DeleteDashboard(context.Context, *DeleteDashboardRequest) (*DeleteDashboardReply, error)
	// 大盘详情
	GetDashboard(context.Context, *GetDashboardRequest) (*GetDashboardReply, error)
	// 大盘列表
	ListDashboard(context.Context, *ListDashboardRequest) (*ListDashboardReply, error)
	// 大盘下拉列表
	ListDashboardSelect(context.Context, *ListDashboardSelectRequest) (*ListDashboardSelectReply, error)
	mustEmbedUnimplementedDashboardServer()
}

// UnimplementedDashboardServer must be embedded to have forward compatible implementations.
type UnimplementedDashboardServer struct {
}

func (UnimplementedDashboardServer) CreateDashboard(context.Context, *CreateDashboardRequest) (*CreateDashboardReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDashboard not implemented")
}
func (UnimplementedDashboardServer) UpdateDashboard(context.Context, *UpdateDashboardRequest) (*UpdateDashboardReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDashboard not implemented")
}
func (UnimplementedDashboardServer) DeleteDashboard(context.Context, *DeleteDashboardRequest) (*DeleteDashboardReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDashboard not implemented")
}
func (UnimplementedDashboardServer) GetDashboard(context.Context, *GetDashboardRequest) (*GetDashboardReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDashboard not implemented")
}
func (UnimplementedDashboardServer) ListDashboard(context.Context, *ListDashboardRequest) (*ListDashboardReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDashboard not implemented")
}
func (UnimplementedDashboardServer) ListDashboardSelect(context.Context, *ListDashboardSelectRequest) (*ListDashboardSelectReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDashboardSelect not implemented")
}
func (UnimplementedDashboardServer) mustEmbedUnimplementedDashboardServer() {}

// UnsafeDashboardServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DashboardServer will
// result in compilation errors.
type UnsafeDashboardServer interface {
	mustEmbedUnimplementedDashboardServer()
}

func RegisterDashboardServer(s grpc.ServiceRegistrar, srv DashboardServer) {
	s.RegisterService(&Dashboard_ServiceDesc, srv)
}

func _Dashboard_CreateDashboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServer).CreateDashboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dashboard_CreateDashboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServer).CreateDashboard(ctx, req.(*CreateDashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dashboard_UpdateDashboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServer).UpdateDashboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dashboard_UpdateDashboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServer).UpdateDashboard(ctx, req.(*UpdateDashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dashboard_DeleteDashboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServer).DeleteDashboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dashboard_DeleteDashboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServer).DeleteDashboard(ctx, req.(*DeleteDashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dashboard_GetDashboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServer).GetDashboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dashboard_GetDashboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServer).GetDashboard(ctx, req.(*GetDashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dashboard_ListDashboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServer).ListDashboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dashboard_ListDashboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServer).ListDashboard(ctx, req.(*ListDashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dashboard_ListDashboardSelect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDashboardSelectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServer).ListDashboardSelect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dashboard_ListDashboardSelect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServer).ListDashboardSelect(ctx, req.(*ListDashboardSelectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Dashboard_ServiceDesc is the grpc.ServiceDesc for Dashboard service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Dashboard_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.dashboard.Dashboard",
	HandlerType: (*DashboardServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDashboard",
			Handler:    _Dashboard_CreateDashboard_Handler,
		},
		{
			MethodName: "UpdateDashboard",
			Handler:    _Dashboard_UpdateDashboard_Handler,
		},
		{
			MethodName: "DeleteDashboard",
			Handler:    _Dashboard_DeleteDashboard_Handler,
		},
		{
			MethodName: "GetDashboard",
			Handler:    _Dashboard_GetDashboard_Handler,
		},
		{
			MethodName: "ListDashboard",
			Handler:    _Dashboard_ListDashboard_Handler,
		},
		{
			MethodName: "ListDashboardSelect",
			Handler:    _Dashboard_ListDashboardSelect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dashboard/dashboard.proto",
}
