// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: dashboard/chart.proto

package dashboard

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	api "prometheus-manager/api"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = api.Status(0)
)

// Validate checks the field values on CreateChartRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateChartRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateChartRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateChartRequestMultiError, or nil if none found.
func (m *CreateChartRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateChartRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetTitle()); l < 1 || l > 32 {
		err := CreateChartRequestValidationError{
			field:  "Title",
			reason: "value length must be between 1 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRemark()) > 128 {
		err := CreateChartRequestValidationError{
			field:  "Remark",
			reason: "value length must be at most 128 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CreateChartRequest_Url_Pattern.MatchString(m.GetUrl()) {
		err := CreateChartRequestValidationError{
			field:  "Url",
			reason: "value does not match regex pattern \"^(http|https)://.*\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateChartRequestMultiError(errors)
	}

	return nil
}

// CreateChartRequestMultiError is an error wrapping multiple validation errors
// returned by CreateChartRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateChartRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateChartRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateChartRequestMultiError) AllErrors() []error { return m }

// CreateChartRequestValidationError is the validation error returned by
// CreateChartRequest.Validate if the designated constraints aren't met.
type CreateChartRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateChartRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateChartRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateChartRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateChartRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateChartRequestValidationError) ErrorName() string {
	return "CreateChartRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateChartRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateChartRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateChartRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateChartRequestValidationError{}

var _CreateChartRequest_Url_Pattern = regexp.MustCompile("^(http|https)://.*")

// Validate checks the field values on CreateChartReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateChartReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateChartReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateChartReplyMultiError, or nil if none found.
func (m *CreateChartReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateChartReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateChartReplyMultiError(errors)
	}

	return nil
}

// CreateChartReplyMultiError is an error wrapping multiple validation errors
// returned by CreateChartReply.ValidateAll() if the designated constraints
// aren't met.
type CreateChartReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateChartReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateChartReplyMultiError) AllErrors() []error { return m }

// CreateChartReplyValidationError is the validation error returned by
// CreateChartReply.Validate if the designated constraints aren't met.
type CreateChartReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateChartReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateChartReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateChartReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateChartReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateChartReplyValidationError) ErrorName() string { return "CreateChartReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateChartReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateChartReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateChartReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateChartReplyValidationError{}

// Validate checks the field values on UpdateChartRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateChartRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateChartRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateChartRequestMultiError, or nil if none found.
func (m *UpdateChartRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateChartRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateChartRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetTitle()); l < 1 || l > 32 {
		err := UpdateChartRequestValidationError{
			field:  "Title",
			reason: "value length must be between 1 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRemark()) > 128 {
		err := UpdateChartRequestValidationError{
			field:  "Remark",
			reason: "value length must be at most 128 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_UpdateChartRequest_Url_Pattern.MatchString(m.GetUrl()) {
		err := UpdateChartRequestValidationError{
			field:  "Url",
			reason: "value does not match regex pattern \"^(http|https)://.*\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateChartRequestMultiError(errors)
	}

	return nil
}

// UpdateChartRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateChartRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateChartRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateChartRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateChartRequestMultiError) AllErrors() []error { return m }

// UpdateChartRequestValidationError is the validation error returned by
// UpdateChartRequest.Validate if the designated constraints aren't met.
type UpdateChartRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateChartRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateChartRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateChartRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateChartRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateChartRequestValidationError) ErrorName() string {
	return "UpdateChartRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateChartRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateChartRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateChartRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateChartRequestValidationError{}

var _UpdateChartRequest_Url_Pattern = regexp.MustCompile("^(http|https)://.*")

// Validate checks the field values on UpdateChartReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateChartReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateChartReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateChartReplyMultiError, or nil if none found.
func (m *UpdateChartReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateChartReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return UpdateChartReplyMultiError(errors)
	}

	return nil
}

// UpdateChartReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateChartReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateChartReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateChartReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateChartReplyMultiError) AllErrors() []error { return m }

// UpdateChartReplyValidationError is the validation error returned by
// UpdateChartReply.Validate if the designated constraints aren't met.
type UpdateChartReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateChartReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateChartReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateChartReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateChartReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateChartReplyValidationError) ErrorName() string { return "UpdateChartReplyValidationError" }

// Error satisfies the builtin error interface
func (e UpdateChartReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateChartReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateChartReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateChartReplyValidationError{}

// Validate checks the field values on DeleteChartRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteChartRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteChartRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteChartRequestMultiError, or nil if none found.
func (m *DeleteChartRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteChartRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteChartRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteChartRequestMultiError(errors)
	}

	return nil
}

// DeleteChartRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteChartRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteChartRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteChartRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteChartRequestMultiError) AllErrors() []error { return m }

// DeleteChartRequestValidationError is the validation error returned by
// DeleteChartRequest.Validate if the designated constraints aren't met.
type DeleteChartRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteChartRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteChartRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteChartRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteChartRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteChartRequestValidationError) ErrorName() string {
	return "DeleteChartRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteChartRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteChartRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteChartRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteChartRequestValidationError{}

// Validate checks the field values on DeleteChartReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteChartReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteChartReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteChartReplyMultiError, or nil if none found.
func (m *DeleteChartReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteChartReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteChartReplyMultiError(errors)
	}

	return nil
}

// DeleteChartReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteChartReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteChartReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteChartReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteChartReplyMultiError) AllErrors() []error { return m }

// DeleteChartReplyValidationError is the validation error returned by
// DeleteChartReply.Validate if the designated constraints aren't met.
type DeleteChartReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteChartReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteChartReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteChartReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteChartReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteChartReplyValidationError) ErrorName() string { return "DeleteChartReplyValidationError" }

// Error satisfies the builtin error interface
func (e DeleteChartReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteChartReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteChartReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteChartReplyValidationError{}

// Validate checks the field values on GetChartRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetChartRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetChartRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetChartRequestMultiError, or nil if none found.
func (m *GetChartRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetChartRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetChartRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetChartRequestMultiError(errors)
	}

	return nil
}

// GetChartRequestMultiError is an error wrapping multiple validation errors
// returned by GetChartRequest.ValidateAll() if the designated constraints
// aren't met.
type GetChartRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetChartRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetChartRequestMultiError) AllErrors() []error { return m }

// GetChartRequestValidationError is the validation error returned by
// GetChartRequest.Validate if the designated constraints aren't met.
type GetChartRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetChartRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetChartRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetChartRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetChartRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetChartRequestValidationError) ErrorName() string { return "GetChartRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetChartRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetChartRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetChartRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetChartRequestValidationError{}

// Validate checks the field values on GetChartReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetChartReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetChartReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetChartReplyMultiError, or
// nil if none found.
func (m *GetChartReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetChartReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetChartReplyValidationError{
					field:  "Detail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetChartReplyValidationError{
					field:  "Detail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetChartReplyValidationError{
				field:  "Detail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetChartReplyMultiError(errors)
	}

	return nil
}

// GetChartReplyMultiError is an error wrapping multiple validation errors
// returned by GetChartReply.ValidateAll() if the designated constraints
// aren't met.
type GetChartReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetChartReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetChartReplyMultiError) AllErrors() []error { return m }

// GetChartReplyValidationError is the validation error returned by
// GetChartReply.Validate if the designated constraints aren't met.
type GetChartReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetChartReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetChartReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetChartReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetChartReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetChartReplyValidationError) ErrorName() string { return "GetChartReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetChartReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetChartReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetChartReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetChartReplyValidationError{}

// Validate checks the field values on ListChartRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListChartRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListChartRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListChartRequestMultiError, or nil if none found.
func (m *ListChartRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListChartRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() == nil {
		err := ListChartRequestValidationError{
			field:  "Page",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListChartRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListChartRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListChartRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if _, ok := api.Status_name[int32(m.GetStatus())]; !ok {
		err := ListChartRequestValidationError{
			field:  "Status",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetKeyword()) > 32 {
		err := ListChartRequestValidationError{
			field:  "Keyword",
			reason: "value length must be at most 32 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListChartRequestMultiError(errors)
	}

	return nil
}

// ListChartRequestMultiError is an error wrapping multiple validation errors
// returned by ListChartRequest.ValidateAll() if the designated constraints
// aren't met.
type ListChartRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListChartRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListChartRequestMultiError) AllErrors() []error { return m }

// ListChartRequestValidationError is the validation error returned by
// ListChartRequest.Validate if the designated constraints aren't met.
type ListChartRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListChartRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListChartRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListChartRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListChartRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListChartRequestValidationError) ErrorName() string { return "ListChartRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListChartRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListChartRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListChartRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListChartRequestValidationError{}

// Validate checks the field values on ListChartReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListChartReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListChartReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListChartReplyMultiError,
// or nil if none found.
func (m *ListChartReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListChartReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListChartReplyValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListChartReplyValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListChartReplyValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListChartReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListChartReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListChartReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListChartReplyMultiError(errors)
	}

	return nil
}

// ListChartReplyMultiError is an error wrapping multiple validation errors
// returned by ListChartReply.ValidateAll() if the designated constraints
// aren't met.
type ListChartReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListChartReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListChartReplyMultiError) AllErrors() []error { return m }

// ListChartReplyValidationError is the validation error returned by
// ListChartReply.Validate if the designated constraints aren't met.
type ListChartReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListChartReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListChartReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListChartReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListChartReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListChartReplyValidationError) ErrorName() string { return "ListChartReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListChartReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListChartReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListChartReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListChartReplyValidationError{}
