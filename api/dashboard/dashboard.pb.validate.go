// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: dashboard/dashboard.proto

package dashboard

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	api "prometheus-manager/api"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = api.Status(0)
)

// Validate checks the field values on CreateDashboardRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDashboardRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDashboardRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDashboardRequestMultiError, or nil if none found.
func (m *CreateDashboardRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDashboardRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetTitle()); l < 1 || l > 32 {
		err := CreateDashboardRequestValidationError{
			field:  "Title",
			reason: "value length must be between 1 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetColor()); l < 1 || l > 32 {
		err := CreateDashboardRequestValidationError{
			field:  "Color",
			reason: "value length must be between 1 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CreateDashboardRequest_Color_Pattern.MatchString(m.GetColor()) {
		err := CreateDashboardRequestValidationError{
			field:  "Color",
			reason: "value does not match regex pattern \"^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRemark()) > 255 {
		err := CreateDashboardRequestValidationError{
			field:  "Remark",
			reason: "value length must be at most 255 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateDashboardRequestMultiError(errors)
	}

	return nil
}

// CreateDashboardRequestMultiError is an error wrapping multiple validation
// errors returned by CreateDashboardRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateDashboardRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDashboardRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDashboardRequestMultiError) AllErrors() []error { return m }

// CreateDashboardRequestValidationError is the validation error returned by
// CreateDashboardRequest.Validate if the designated constraints aren't met.
type CreateDashboardRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDashboardRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDashboardRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDashboardRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDashboardRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDashboardRequestValidationError) ErrorName() string {
	return "CreateDashboardRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDashboardRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDashboardRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDashboardRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDashboardRequestValidationError{}

var _CreateDashboardRequest_Color_Pattern = regexp.MustCompile("^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$")

// Validate checks the field values on CreateDashboardReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDashboardReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDashboardReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDashboardReplyMultiError, or nil if none found.
func (m *CreateDashboardReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDashboardReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateDashboardReplyMultiError(errors)
	}

	return nil
}

// CreateDashboardReplyMultiError is an error wrapping multiple validation
// errors returned by CreateDashboardReply.ValidateAll() if the designated
// constraints aren't met.
type CreateDashboardReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDashboardReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDashboardReplyMultiError) AllErrors() []error { return m }

// CreateDashboardReplyValidationError is the validation error returned by
// CreateDashboardReply.Validate if the designated constraints aren't met.
type CreateDashboardReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDashboardReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDashboardReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDashboardReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDashboardReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDashboardReplyValidationError) ErrorName() string {
	return "CreateDashboardReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDashboardReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDashboardReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDashboardReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDashboardReplyValidationError{}

// Validate checks the field values on UpdateDashboardRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDashboardRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDashboardRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDashboardRequestMultiError, or nil if none found.
func (m *UpdateDashboardRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDashboardRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := UpdateDashboardRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetTitle()); l < 1 || l > 32 {
		err := UpdateDashboardRequestValidationError{
			field:  "Title",
			reason: "value length must be between 1 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetColor()); l < 1 || l > 32 {
		err := UpdateDashboardRequestValidationError{
			field:  "Color",
			reason: "value length must be between 1 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_UpdateDashboardRequest_Color_Pattern.MatchString(m.GetColor()) {
		err := UpdateDashboardRequestValidationError{
			field:  "Color",
			reason: "value does not match regex pattern \"^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRemark()) > 255 {
		err := UpdateDashboardRequestValidationError{
			field:  "Remark",
			reason: "value length must be at most 255 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateDashboardRequestMultiError(errors)
	}

	return nil
}

// UpdateDashboardRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateDashboardRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateDashboardRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDashboardRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDashboardRequestMultiError) AllErrors() []error { return m }

// UpdateDashboardRequestValidationError is the validation error returned by
// UpdateDashboardRequest.Validate if the designated constraints aren't met.
type UpdateDashboardRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDashboardRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDashboardRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDashboardRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDashboardRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDashboardRequestValidationError) ErrorName() string {
	return "UpdateDashboardRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDashboardRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDashboardRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDashboardRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDashboardRequestValidationError{}

var _UpdateDashboardRequest_Color_Pattern = regexp.MustCompile("^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$")

// Validate checks the field values on UpdateDashboardReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDashboardReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDashboardReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDashboardReplyMultiError, or nil if none found.
func (m *UpdateDashboardReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDashboardReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return UpdateDashboardReplyMultiError(errors)
	}

	return nil
}

// UpdateDashboardReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateDashboardReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateDashboardReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDashboardReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDashboardReplyMultiError) AllErrors() []error { return m }

// UpdateDashboardReplyValidationError is the validation error returned by
// UpdateDashboardReply.Validate if the designated constraints aren't met.
type UpdateDashboardReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDashboardReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDashboardReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDashboardReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDashboardReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDashboardReplyValidationError) ErrorName() string {
	return "UpdateDashboardReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDashboardReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDashboardReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDashboardReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDashboardReplyValidationError{}

// Validate checks the field values on DeleteDashboardRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDashboardRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDashboardRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDashboardRequestMultiError, or nil if none found.
func (m *DeleteDashboardRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDashboardRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := DeleteDashboardRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteDashboardRequestMultiError(errors)
	}

	return nil
}

// DeleteDashboardRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteDashboardRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteDashboardRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDashboardRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDashboardRequestMultiError) AllErrors() []error { return m }

// DeleteDashboardRequestValidationError is the validation error returned by
// DeleteDashboardRequest.Validate if the designated constraints aren't met.
type DeleteDashboardRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDashboardRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDashboardRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDashboardRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDashboardRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDashboardRequestValidationError) ErrorName() string {
	return "DeleteDashboardRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDashboardRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDashboardRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDashboardRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDashboardRequestValidationError{}

// Validate checks the field values on DeleteDashboardReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDashboardReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDashboardReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDashboardReplyMultiError, or nil if none found.
func (m *DeleteDashboardReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDashboardReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteDashboardReplyMultiError(errors)
	}

	return nil
}

// DeleteDashboardReplyMultiError is an error wrapping multiple validation
// errors returned by DeleteDashboardReply.ValidateAll() if the designated
// constraints aren't met.
type DeleteDashboardReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDashboardReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDashboardReplyMultiError) AllErrors() []error { return m }

// DeleteDashboardReplyValidationError is the validation error returned by
// DeleteDashboardReply.Validate if the designated constraints aren't met.
type DeleteDashboardReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDashboardReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDashboardReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDashboardReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDashboardReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDashboardReplyValidationError) ErrorName() string {
	return "DeleteDashboardReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDashboardReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDashboardReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDashboardReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDashboardReplyValidationError{}

// Validate checks the field values on GetDashboardRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDashboardRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDashboardRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDashboardRequestMultiError, or nil if none found.
func (m *GetDashboardRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDashboardRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := GetDashboardRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetDashboardRequestMultiError(errors)
	}

	return nil
}

// GetDashboardRequestMultiError is an error wrapping multiple validation
// errors returned by GetDashboardRequest.ValidateAll() if the designated
// constraints aren't met.
type GetDashboardRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDashboardRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDashboardRequestMultiError) AllErrors() []error { return m }

// GetDashboardRequestValidationError is the validation error returned by
// GetDashboardRequest.Validate if the designated constraints aren't met.
type GetDashboardRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDashboardRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDashboardRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDashboardRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDashboardRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDashboardRequestValidationError) ErrorName() string {
	return "GetDashboardRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDashboardRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDashboardRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDashboardRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDashboardRequestValidationError{}

// Validate checks the field values on GetDashboardReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetDashboardReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDashboardReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDashboardReplyMultiError, or nil if none found.
func (m *GetDashboardReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDashboardReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDashboardReplyValidationError{
					field:  "Detail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDashboardReplyValidationError{
					field:  "Detail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDashboardReplyValidationError{
				field:  "Detail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDashboardReplyMultiError(errors)
	}

	return nil
}

// GetDashboardReplyMultiError is an error wrapping multiple validation errors
// returned by GetDashboardReply.ValidateAll() if the designated constraints
// aren't met.
type GetDashboardReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDashboardReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDashboardReplyMultiError) AllErrors() []error { return m }

// GetDashboardReplyValidationError is the validation error returned by
// GetDashboardReply.Validate if the designated constraints aren't met.
type GetDashboardReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDashboardReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDashboardReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDashboardReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDashboardReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDashboardReplyValidationError) ErrorName() string {
	return "GetDashboardReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetDashboardReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDashboardReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDashboardReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDashboardReplyValidationError{}

// Validate checks the field values on ListDashboardRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDashboardRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDashboardRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDashboardRequestMultiError, or nil if none found.
func (m *ListDashboardRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDashboardRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() == nil {
		err := ListDashboardRequestValidationError{
			field:  "Page",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListDashboardRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListDashboardRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListDashboardRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if _, ok := api.Status_name[int32(m.GetStatus())]; !ok {
		err := ListDashboardRequestValidationError{
			field:  "Status",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetKeyword()) > 255 {
		err := ListDashboardRequestValidationError{
			field:  "Keyword",
			reason: "value length must be at most 255 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListDashboardRequestMultiError(errors)
	}

	return nil
}

// ListDashboardRequestMultiError is an error wrapping multiple validation
// errors returned by ListDashboardRequest.ValidateAll() if the designated
// constraints aren't met.
type ListDashboardRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDashboardRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDashboardRequestMultiError) AllErrors() []error { return m }

// ListDashboardRequestValidationError is the validation error returned by
// ListDashboardRequest.Validate if the designated constraints aren't met.
type ListDashboardRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDashboardRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDashboardRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDashboardRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDashboardRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDashboardRequestValidationError) ErrorName() string {
	return "ListDashboardRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListDashboardRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDashboardRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDashboardRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDashboardRequestValidationError{}

// Validate checks the field values on ListDashboardReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDashboardReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDashboardReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDashboardReplyMultiError, or nil if none found.
func (m *ListDashboardReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDashboardReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListDashboardReplyValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListDashboardReplyValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListDashboardReplyValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDashboardReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDashboardReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDashboardReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListDashboardReplyMultiError(errors)
	}

	return nil
}

// ListDashboardReplyMultiError is an error wrapping multiple validation errors
// returned by ListDashboardReply.ValidateAll() if the designated constraints
// aren't met.
type ListDashboardReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDashboardReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDashboardReplyMultiError) AllErrors() []error { return m }

// ListDashboardReplyValidationError is the validation error returned by
// ListDashboardReply.Validate if the designated constraints aren't met.
type ListDashboardReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDashboardReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDashboardReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDashboardReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDashboardReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDashboardReplyValidationError) ErrorName() string {
	return "ListDashboardReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListDashboardReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDashboardReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDashboardReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDashboardReplyValidationError{}

// Validate checks the field values on ListDashboardSelectRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDashboardSelectRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDashboardSelectRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDashboardSelectRequestMultiError, or nil if none found.
func (m *ListDashboardSelectRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDashboardSelectRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() == nil {
		err := ListDashboardSelectRequestValidationError{
			field:  "Page",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListDashboardSelectRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListDashboardSelectRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListDashboardSelectRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if _, ok := api.Status_name[int32(m.GetStatus())]; !ok {
		err := ListDashboardSelectRequestValidationError{
			field:  "Status",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetKeyword()) > 255 {
		err := ListDashboardSelectRequestValidationError{
			field:  "Keyword",
			reason: "value length must be at most 255 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListDashboardSelectRequestMultiError(errors)
	}

	return nil
}

// ListDashboardSelectRequestMultiError is an error wrapping multiple
// validation errors returned by ListDashboardSelectRequest.ValidateAll() if
// the designated constraints aren't met.
type ListDashboardSelectRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDashboardSelectRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDashboardSelectRequestMultiError) AllErrors() []error { return m }

// ListDashboardSelectRequestValidationError is the validation error returned
// by ListDashboardSelectRequest.Validate if the designated constraints aren't met.
type ListDashboardSelectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDashboardSelectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDashboardSelectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDashboardSelectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDashboardSelectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDashboardSelectRequestValidationError) ErrorName() string {
	return "ListDashboardSelectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListDashboardSelectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDashboardSelectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDashboardSelectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDashboardSelectRequestValidationError{}

// Validate checks the field values on ListDashboardSelectReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDashboardSelectReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDashboardSelectReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDashboardSelectReplyMultiError, or nil if none found.
func (m *ListDashboardSelectReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDashboardSelectReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListDashboardSelectReplyValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListDashboardSelectReplyValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListDashboardSelectReplyValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDashboardSelectReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDashboardSelectReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDashboardSelectReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListDashboardSelectReplyMultiError(errors)
	}

	return nil
}

// ListDashboardSelectReplyMultiError is an error wrapping multiple validation
// errors returned by ListDashboardSelectReply.ValidateAll() if the designated
// constraints aren't met.
type ListDashboardSelectReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDashboardSelectReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDashboardSelectReplyMultiError) AllErrors() []error { return m }

// ListDashboardSelectReplyValidationError is the validation error returned by
// ListDashboardSelectReply.Validate if the designated constraints aren't met.
type ListDashboardSelectReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDashboardSelectReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDashboardSelectReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDashboardSelectReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDashboardSelectReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDashboardSelectReplyValidationError) ErrorName() string {
	return "ListDashboardSelectReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListDashboardSelectReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDashboardSelectReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDashboardSelectReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDashboardSelectReplyValidationError{}
