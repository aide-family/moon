// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: model.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AlarmPageV1 with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AlarmPageV1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AlarmPageV1 with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AlarmPageV1MultiError, or
// nil if none found.
func (m *AlarmPageV1) ValidateAll() error {
	return m.validate(true)
}

func (m *AlarmPageV1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Icon

	// no validation rules for Color

	// no validation rules for Status

	// no validation rules for Remark

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	if len(errors) > 0 {
		return AlarmPageV1MultiError(errors)
	}

	return nil
}

// AlarmPageV1MultiError is an error wrapping multiple validation errors
// returned by AlarmPageV1.ValidateAll() if the designated constraints aren't met.
type AlarmPageV1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AlarmPageV1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AlarmPageV1MultiError) AllErrors() []error { return m }

// AlarmPageV1ValidationError is the validation error returned by
// AlarmPageV1.Validate if the designated constraints aren't met.
type AlarmPageV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AlarmPageV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AlarmPageV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AlarmPageV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AlarmPageV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AlarmPageV1ValidationError) ErrorName() string { return "AlarmPageV1ValidationError" }

// Error satisfies the builtin error interface
func (e AlarmPageV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAlarmPageV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AlarmPageV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AlarmPageV1ValidationError{}

// Validate checks the field values on AlarmPageSelectV1 with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AlarmPageSelectV1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AlarmPageSelectV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AlarmPageSelectV1MultiError, or nil if none found.
func (m *AlarmPageSelectV1) ValidateAll() error {
	return m.validate(true)
}

func (m *AlarmPageSelectV1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	// no validation rules for Label

	// no validation rules for Icon

	// no validation rules for Color

	// no validation rules for Status

	// no validation rules for Remark

	if len(errors) > 0 {
		return AlarmPageSelectV1MultiError(errors)
	}

	return nil
}

// AlarmPageSelectV1MultiError is an error wrapping multiple validation errors
// returned by AlarmPageSelectV1.ValidateAll() if the designated constraints
// aren't met.
type AlarmPageSelectV1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AlarmPageSelectV1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AlarmPageSelectV1MultiError) AllErrors() []error { return m }

// AlarmPageSelectV1ValidationError is the validation error returned by
// AlarmPageSelectV1.Validate if the designated constraints aren't met.
type AlarmPageSelectV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AlarmPageSelectV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AlarmPageSelectV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AlarmPageSelectV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AlarmPageSelectV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AlarmPageSelectV1ValidationError) ErrorName() string {
	return "AlarmPageSelectV1ValidationError"
}

// Error satisfies the builtin error interface
func (e AlarmPageSelectV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAlarmPageSelectV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AlarmPageSelectV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AlarmPageSelectV1ValidationError{}

// Validate checks the field values on AlarmHistoryV1 with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AlarmHistoryV1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AlarmHistoryV1 with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AlarmHistoryV1MultiError,
// or nil if none found.
func (m *AlarmHistoryV1) ValidateAll() error {
	return m.validate(true)
}

func (m *AlarmHistoryV1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for AlarmId

	// no validation rules for AlarmName

	if all {
		switch v := interface{}(m.GetAlarmLevel()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AlarmHistoryV1ValidationError{
					field:  "AlarmLevel",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AlarmHistoryV1ValidationError{
					field:  "AlarmLevel",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAlarmLevel()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AlarmHistoryV1ValidationError{
				field:  "AlarmLevel",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AlarmStatus

	// no validation rules for Labels

	// no validation rules for Annotations

	// no validation rules for StartAt

	// no validation rules for EndAt

	// no validation rules for Duration

	// no validation rules for Expr

	// no validation rules for Datasource

	if len(errors) > 0 {
		return AlarmHistoryV1MultiError(errors)
	}

	return nil
}

// AlarmHistoryV1MultiError is an error wrapping multiple validation errors
// returned by AlarmHistoryV1.ValidateAll() if the designated constraints
// aren't met.
type AlarmHistoryV1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AlarmHistoryV1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AlarmHistoryV1MultiError) AllErrors() []error { return m }

// AlarmHistoryV1ValidationError is the validation error returned by
// AlarmHistoryV1.Validate if the designated constraints aren't met.
type AlarmHistoryV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AlarmHistoryV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AlarmHistoryV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AlarmHistoryV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AlarmHistoryV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AlarmHistoryV1ValidationError) ErrorName() string { return "AlarmHistoryV1ValidationError" }

// Error satisfies the builtin error interface
func (e AlarmHistoryV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAlarmHistoryV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AlarmHistoryV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AlarmHistoryV1ValidationError{}

// Validate checks the field values on DictV1 with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DictV1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DictV1 with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in DictV1MultiError, or nil if none found.
func (m *DictV1) ValidateAll() error {
	return m.validate(true)
}

func (m *DictV1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Category

	// no validation rules for Color

	// no validation rules for Status

	// no validation rules for Remark

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	if len(errors) > 0 {
		return DictV1MultiError(errors)
	}

	return nil
}

// DictV1MultiError is an error wrapping multiple validation errors returned by
// DictV1.ValidateAll() if the designated constraints aren't met.
type DictV1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DictV1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DictV1MultiError) AllErrors() []error { return m }

// DictV1ValidationError is the validation error returned by DictV1.Validate if
// the designated constraints aren't met.
type DictV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DictV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DictV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DictV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DictV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DictV1ValidationError) ErrorName() string { return "DictV1ValidationError" }

// Error satisfies the builtin error interface
func (e DictV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDictV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DictV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DictV1ValidationError{}

// Validate checks the field values on DictSelectV1 with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DictSelectV1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DictSelectV1 with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DictSelectV1MultiError, or
// nil if none found.
func (m *DictSelectV1) ValidateAll() error {
	return m.validate(true)
}

func (m *DictSelectV1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	// no validation rules for Label

	// no validation rules for Category

	// no validation rules for Color

	// no validation rules for Status

	// no validation rules for Remark

	// no validation rules for IsDeleted

	if len(errors) > 0 {
		return DictSelectV1MultiError(errors)
	}

	return nil
}

// DictSelectV1MultiError is an error wrapping multiple validation errors
// returned by DictSelectV1.ValidateAll() if the designated constraints aren't met.
type DictSelectV1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DictSelectV1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DictSelectV1MultiError) AllErrors() []error { return m }

// DictSelectV1ValidationError is the validation error returned by
// DictSelectV1.Validate if the designated constraints aren't met.
type DictSelectV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DictSelectV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DictSelectV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DictSelectV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DictSelectV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DictSelectV1ValidationError) ErrorName() string { return "DictSelectV1ValidationError" }

// Error satisfies the builtin error interface
func (e DictSelectV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDictSelectV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DictSelectV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DictSelectV1ValidationError{}

// Validate checks the field values on PromStrategyV1 with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PromStrategyV1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PromStrategyV1 with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PromStrategyV1MultiError,
// or nil if none found.
func (m *PromStrategyV1) ValidateAll() error {
	return m.validate(true)
}

func (m *PromStrategyV1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Alert

	// no validation rules for Expr

	if all {
		switch v := interface{}(m.GetDuration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PromStrategyV1ValidationError{
					field:  "Duration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PromStrategyV1ValidationError{
					field:  "Duration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDuration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PromStrategyV1ValidationError{
				field:  "Duration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Labels

	// no validation rules for Annotations

	// no validation rules for Status

	// no validation rules for GroupId

	if all {
		switch v := interface{}(m.GetGroupInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PromStrategyV1ValidationError{
					field:  "GroupInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PromStrategyV1ValidationError{
					field:  "GroupInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGroupInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PromStrategyV1ValidationError{
				field:  "GroupInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AlarmLevelId

	if all {
		switch v := interface{}(m.GetAlarmLevelInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PromStrategyV1ValidationError{
					field:  "AlarmLevelInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PromStrategyV1ValidationError{
					field:  "AlarmLevelInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAlarmLevelInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PromStrategyV1ValidationError{
				field:  "AlarmLevelInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetAlarmPageInfo() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PromStrategyV1ValidationError{
						field:  fmt.Sprintf("AlarmPageInfo[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PromStrategyV1ValidationError{
						field:  fmt.Sprintf("AlarmPageInfo[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PromStrategyV1ValidationError{
					field:  fmt.Sprintf("AlarmPageInfo[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetCategoryInfo() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PromStrategyV1ValidationError{
						field:  fmt.Sprintf("CategoryInfo[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PromStrategyV1ValidationError{
						field:  fmt.Sprintf("CategoryInfo[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PromStrategyV1ValidationError{
					field:  fmt.Sprintf("CategoryInfo[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	// no validation rules for Remark

	if all {
		switch v := interface{}(m.GetDataSource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PromStrategyV1ValidationError{
					field:  "DataSource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PromStrategyV1ValidationError{
					field:  "DataSource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDataSource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PromStrategyV1ValidationError{
				field:  "DataSource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DataSourceId

	if all {
		switch v := interface{}(m.GetMaxSuppress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PromStrategyV1ValidationError{
					field:  "MaxSuppress",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PromStrategyV1ValidationError{
					field:  "MaxSuppress",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMaxSuppress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PromStrategyV1ValidationError{
				field:  "MaxSuppress",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSendInterval()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PromStrategyV1ValidationError{
					field:  "SendInterval",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PromStrategyV1ValidationError{
					field:  "SendInterval",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSendInterval()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PromStrategyV1ValidationError{
				field:  "SendInterval",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SendRecover

	if len(errors) > 0 {
		return PromStrategyV1MultiError(errors)
	}

	return nil
}

// PromStrategyV1MultiError is an error wrapping multiple validation errors
// returned by PromStrategyV1.ValidateAll() if the designated constraints
// aren't met.
type PromStrategyV1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PromStrategyV1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PromStrategyV1MultiError) AllErrors() []error { return m }

// PromStrategyV1ValidationError is the validation error returned by
// PromStrategyV1.Validate if the designated constraints aren't met.
type PromStrategyV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PromStrategyV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PromStrategyV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PromStrategyV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PromStrategyV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PromStrategyV1ValidationError) ErrorName() string { return "PromStrategyV1ValidationError" }

// Error satisfies the builtin error interface
func (e PromStrategyV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPromStrategyV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PromStrategyV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PromStrategyV1ValidationError{}

// Validate checks the field values on PromStrategySelectV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PromStrategySelectV1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PromStrategySelectV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PromStrategySelectV1MultiError, or nil if none found.
func (m *PromStrategySelectV1) ValidateAll() error {
	return m.validate(true)
}

func (m *PromStrategySelectV1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	// no validation rules for Label

	for idx, item := range m.GetCategory() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PromStrategySelectV1ValidationError{
						field:  fmt.Sprintf("Category[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PromStrategySelectV1ValidationError{
						field:  fmt.Sprintf("Category[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PromStrategySelectV1ValidationError{
					field:  fmt.Sprintf("Category[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Status

	if len(errors) > 0 {
		return PromStrategySelectV1MultiError(errors)
	}

	return nil
}

// PromStrategySelectV1MultiError is an error wrapping multiple validation
// errors returned by PromStrategySelectV1.ValidateAll() if the designated
// constraints aren't met.
type PromStrategySelectV1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PromStrategySelectV1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PromStrategySelectV1MultiError) AllErrors() []error { return m }

// PromStrategySelectV1ValidationError is the validation error returned by
// PromStrategySelectV1.Validate if the designated constraints aren't met.
type PromStrategySelectV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PromStrategySelectV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PromStrategySelectV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PromStrategySelectV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PromStrategySelectV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PromStrategySelectV1ValidationError) ErrorName() string {
	return "PromStrategySelectV1ValidationError"
}

// Error satisfies the builtin error interface
func (e PromStrategySelectV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPromStrategySelectV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PromStrategySelectV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PromStrategySelectV1ValidationError{}

// Validate checks the field values on PromGroup with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PromGroup) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PromGroup with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PromGroupMultiError, or nil
// if none found.
func (m *PromGroup) ValidateAll() error {
	return m.validate(true)
}

func (m *PromGroup) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	for idx, item := range m.GetCategories() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PromGroupValidationError{
						field:  fmt.Sprintf("Categories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PromGroupValidationError{
						field:  fmt.Sprintf("Categories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PromGroupValidationError{
					field:  fmt.Sprintf("Categories[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Status

	// no validation rules for Remark

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	// no validation rules for StrategyCount

	// no validation rules for EnableStrategyCount

	for idx, item := range m.GetStrategies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PromGroupValidationError{
						field:  fmt.Sprintf("Strategies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PromGroupValidationError{
						field:  fmt.Sprintf("Strategies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PromGroupValidationError{
					field:  fmt.Sprintf("Strategies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PromGroupMultiError(errors)
	}

	return nil
}

// PromGroupMultiError is an error wrapping multiple validation errors returned
// by PromGroup.ValidateAll() if the designated constraints aren't met.
type PromGroupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PromGroupMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PromGroupMultiError) AllErrors() []error { return m }

// PromGroupValidationError is the validation error returned by
// PromGroup.Validate if the designated constraints aren't met.
type PromGroupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PromGroupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PromGroupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PromGroupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PromGroupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PromGroupValidationError) ErrorName() string { return "PromGroupValidationError" }

// Error satisfies the builtin error interface
func (e PromGroupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPromGroup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PromGroupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PromGroupValidationError{}

// Validate checks the field values on PromGroupSelectV1 with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PromGroupSelectV1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PromGroupSelectV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PromGroupSelectV1MultiError, or nil if none found.
func (m *PromGroupSelectV1) ValidateAll() error {
	return m.validate(true)
}

func (m *PromGroupSelectV1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	// no validation rules for Label

	for idx, item := range m.GetCategory() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PromGroupSelectV1ValidationError{
						field:  fmt.Sprintf("Category[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PromGroupSelectV1ValidationError{
						field:  fmt.Sprintf("Category[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PromGroupSelectV1ValidationError{
					field:  fmt.Sprintf("Category[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Status

	// no validation rules for Remark

	if len(errors) > 0 {
		return PromGroupSelectV1MultiError(errors)
	}

	return nil
}

// PromGroupSelectV1MultiError is an error wrapping multiple validation errors
// returned by PromGroupSelectV1.ValidateAll() if the designated constraints
// aren't met.
type PromGroupSelectV1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PromGroupSelectV1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PromGroupSelectV1MultiError) AllErrors() []error { return m }

// PromGroupSelectV1ValidationError is the validation error returned by
// PromGroupSelectV1.Validate if the designated constraints aren't met.
type PromGroupSelectV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PromGroupSelectV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PromGroupSelectV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PromGroupSelectV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PromGroupSelectV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PromGroupSelectV1ValidationError) ErrorName() string {
	return "PromGroupSelectV1ValidationError"
}

// Error satisfies the builtin error interface
func (e PromGroupSelectV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPromGroupSelectV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PromGroupSelectV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PromGroupSelectV1ValidationError{}

// Validate checks the field values on AlarmData with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AlarmData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AlarmData with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AlarmDataMultiError, or nil
// if none found.
func (m *AlarmData) ValidateAll() error {
	return m.validate(true)
}

func (m *AlarmData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Receiver

	// no validation rules for Status

	for idx, item := range m.GetAlerts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AlarmDataValidationError{
						field:  fmt.Sprintf("Alerts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AlarmDataValidationError{
						field:  fmt.Sprintf("Alerts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AlarmDataValidationError{
					field:  fmt.Sprintf("Alerts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for GroupLabels

	// no validation rules for CommonLabels

	// no validation rules for CommonAnnotations

	// no validation rules for ExternalURL

	// no validation rules for Version

	// no validation rules for GroupKey

	// no validation rules for TruncatedAlerts

	if len(errors) > 0 {
		return AlarmDataMultiError(errors)
	}

	return nil
}

// AlarmDataMultiError is an error wrapping multiple validation errors returned
// by AlarmData.ValidateAll() if the designated constraints aren't met.
type AlarmDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AlarmDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AlarmDataMultiError) AllErrors() []error { return m }

// AlarmDataValidationError is the validation error returned by
// AlarmData.Validate if the designated constraints aren't met.
type AlarmDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AlarmDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AlarmDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AlarmDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AlarmDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AlarmDataValidationError) ErrorName() string { return "AlarmDataValidationError" }

// Error satisfies the builtin error interface
func (e AlarmDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAlarmData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AlarmDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AlarmDataValidationError{}

// Validate checks the field values on Alert with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Alert) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Alert with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AlertMultiError, or nil if none found.
func (m *Alert) ValidateAll() error {
	return m.validate(true)
}

func (m *Alert) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Labels

	// no validation rules for Annotations

	// no validation rules for StartsAt

	// no validation rules for EndsAt

	// no validation rules for GeneratorURL

	// no validation rules for Fingerprint

	if len(errors) > 0 {
		return AlertMultiError(errors)
	}

	return nil
}

// AlertMultiError is an error wrapping multiple validation errors returned by
// Alert.ValidateAll() if the designated constraints aren't met.
type AlertMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AlertMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AlertMultiError) AllErrors() []error { return m }

// AlertValidationError is the validation error returned by Alert.Validate if
// the designated constraints aren't met.
type AlertValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AlertValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AlertValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AlertValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AlertValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AlertValidationError) ErrorName() string { return "AlertValidationError" }

// Error satisfies the builtin error interface
func (e AlertValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAlert.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AlertValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AlertValidationError{}

// Validate checks the field values on PrometheusServerItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PrometheusServerItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PrometheusServerItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PrometheusServerItemMultiError, or nil if none found.
func (m *PrometheusServerItem) ValidateAll() error {
	return m.validate(true)
}

func (m *PrometheusServerItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Endpoint

	// no validation rules for Status

	// no validation rules for Remark

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return PrometheusServerItemMultiError(errors)
	}

	return nil
}

// PrometheusServerItemMultiError is an error wrapping multiple validation
// errors returned by PrometheusServerItem.ValidateAll() if the designated
// constraints aren't met.
type PrometheusServerItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PrometheusServerItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PrometheusServerItemMultiError) AllErrors() []error { return m }

// PrometheusServerItemValidationError is the validation error returned by
// PrometheusServerItem.Validate if the designated constraints aren't met.
type PrometheusServerItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PrometheusServerItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PrometheusServerItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PrometheusServerItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PrometheusServerItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PrometheusServerItemValidationError) ErrorName() string {
	return "PrometheusServerItemValidationError"
}

// Error satisfies the builtin error interface
func (e PrometheusServerItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPrometheusServerItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PrometheusServerItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PrometheusServerItemValidationError{}

// Validate checks the field values on PrometheusServerSelectItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PrometheusServerSelectItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PrometheusServerSelectItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PrometheusServerSelectItemMultiError, or nil if none found.
func (m *PrometheusServerSelectItem) ValidateAll() error {
	return m.validate(true)
}

func (m *PrometheusServerSelectItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	// no validation rules for Label

	// no validation rules for Status

	// no validation rules for Remark

	// no validation rules for Endpoint

	if len(errors) > 0 {
		return PrometheusServerSelectItemMultiError(errors)
	}

	return nil
}

// PrometheusServerSelectItemMultiError is an error wrapping multiple
// validation errors returned by PrometheusServerSelectItem.ValidateAll() if
// the designated constraints aren't met.
type PrometheusServerSelectItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PrometheusServerSelectItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PrometheusServerSelectItemMultiError) AllErrors() []error { return m }

// PrometheusServerSelectItemValidationError is the validation error returned
// by PrometheusServerSelectItem.Validate if the designated constraints aren't met.
type PrometheusServerSelectItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PrometheusServerSelectItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PrometheusServerSelectItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PrometheusServerSelectItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PrometheusServerSelectItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PrometheusServerSelectItemValidationError) ErrorName() string {
	return "PrometheusServerSelectItemValidationError"
}

// Error satisfies the builtin error interface
func (e PrometheusServerSelectItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPrometheusServerSelectItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PrometheusServerSelectItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PrometheusServerSelectItemValidationError{}

// Validate checks the field values on ChatGroup with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ChatGroup) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChatGroup with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ChatGroupMultiError, or nil
// if none found.
func (m *ChatGroup) ValidateAll() error {
	return m.validate(true)
}

func (m *ChatGroup) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Remark

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for Hook

	// no validation rules for Status

	// no validation rules for App

	// no validation rules for HookName

	// no validation rules for Template

	// no validation rules for Title

	// no validation rules for Secret

	if len(errors) > 0 {
		return ChatGroupMultiError(errors)
	}

	return nil
}

// ChatGroupMultiError is an error wrapping multiple validation errors returned
// by ChatGroup.ValidateAll() if the designated constraints aren't met.
type ChatGroupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatGroupMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatGroupMultiError) AllErrors() []error { return m }

// ChatGroupValidationError is the validation error returned by
// ChatGroup.Validate if the designated constraints aren't met.
type ChatGroupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatGroupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatGroupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatGroupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatGroupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatGroupValidationError) ErrorName() string { return "ChatGroupValidationError" }

// Error satisfies the builtin error interface
func (e ChatGroupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatGroup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatGroupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatGroupValidationError{}

// Validate checks the field values on ChatGroupSelectV1 with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ChatGroupSelectV1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChatGroupSelectV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChatGroupSelectV1MultiError, or nil if none found.
func (m *ChatGroupSelectV1) ValidateAll() error {
	return m.validate(true)
}

func (m *ChatGroupSelectV1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	// no validation rules for App

	// no validation rules for Label

	// no validation rules for Status

	if len(errors) > 0 {
		return ChatGroupSelectV1MultiError(errors)
	}

	return nil
}

// ChatGroupSelectV1MultiError is an error wrapping multiple validation errors
// returned by ChatGroupSelectV1.ValidateAll() if the designated constraints
// aren't met.
type ChatGroupSelectV1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatGroupSelectV1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatGroupSelectV1MultiError) AllErrors() []error { return m }

// ChatGroupSelectV1ValidationError is the validation error returned by
// ChatGroupSelectV1.Validate if the designated constraints aren't met.
type ChatGroupSelectV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatGroupSelectV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatGroupSelectV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatGroupSelectV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatGroupSelectV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatGroupSelectV1ValidationError) ErrorName() string {
	return "ChatGroupSelectV1ValidationError"
}

// Error satisfies the builtin error interface
func (e ChatGroupSelectV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatGroupSelectV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatGroupSelectV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatGroupSelectV1ValidationError{}

// Validate checks the field values on BeNotifyMember with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BeNotifyMember) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BeNotifyMember with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BeNotifyMemberMultiError,
// or nil if none found.
func (m *BeNotifyMember) ValidateAll() error {
	return m.validate(true)
}

func (m *BeNotifyMember) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetMemberId() <= 0 {
		err := BeNotifyMemberValidationError{
			field:  "MemberId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetNotifyTypes()) < 1 {
		err := BeNotifyMemberValidationError{
			field:  "NotifyTypes",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	_BeNotifyMember_NotifyTypes_Unique := make(map[NotifyType]struct{}, len(m.GetNotifyTypes()))

	for idx, item := range m.GetNotifyTypes() {
		_, _ = idx, item

		if _, exists := _BeNotifyMember_NotifyTypes_Unique[item]; exists {
			err := BeNotifyMemberValidationError{
				field:  fmt.Sprintf("NotifyTypes[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_BeNotifyMember_NotifyTypes_Unique[item] = struct{}{}
		}

		if _, ok := _BeNotifyMember_NotifyTypes_NotInLookup[item]; ok {
			err := BeNotifyMemberValidationError{
				field:  fmt.Sprintf("NotifyTypes[%v]", idx),
				reason: "value must not be in list [0]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if _, ok := NotifyType_name[int32(item)]; !ok {
			err := BeNotifyMemberValidationError{
				field:  fmt.Sprintf("NotifyTypes[%v]", idx),
				reason: "value must be one of the defined enum values",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for Id

	if len(errors) > 0 {
		return BeNotifyMemberMultiError(errors)
	}

	return nil
}

// BeNotifyMemberMultiError is an error wrapping multiple validation errors
// returned by BeNotifyMember.ValidateAll() if the designated constraints
// aren't met.
type BeNotifyMemberMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BeNotifyMemberMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BeNotifyMemberMultiError) AllErrors() []error { return m }

// BeNotifyMemberValidationError is the validation error returned by
// BeNotifyMember.Validate if the designated constraints aren't met.
type BeNotifyMemberValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BeNotifyMemberValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BeNotifyMemberValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BeNotifyMemberValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BeNotifyMemberValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BeNotifyMemberValidationError) ErrorName() string { return "BeNotifyMemberValidationError" }

// Error satisfies the builtin error interface
func (e BeNotifyMemberValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBeNotifyMember.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BeNotifyMemberValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BeNotifyMemberValidationError{}

var _BeNotifyMember_NotifyTypes_NotInLookup = map[NotifyType]struct{}{
	0: {},
}

// Validate checks the field values on BeNotifyMemberDetail with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BeNotifyMemberDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BeNotifyMemberDetail with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BeNotifyMemberDetailMultiError, or nil if none found.
func (m *BeNotifyMemberDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *BeNotifyMemberDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MemberId

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BeNotifyMemberDetailValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BeNotifyMemberDetailValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BeNotifyMemberDetailValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Status

	// no validation rules for Id

	if len(errors) > 0 {
		return BeNotifyMemberDetailMultiError(errors)
	}

	return nil
}

// BeNotifyMemberDetailMultiError is an error wrapping multiple validation
// errors returned by BeNotifyMemberDetail.ValidateAll() if the designated
// constraints aren't met.
type BeNotifyMemberDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BeNotifyMemberDetailMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BeNotifyMemberDetailMultiError) AllErrors() []error { return m }

// BeNotifyMemberDetailValidationError is the validation error returned by
// BeNotifyMemberDetail.Validate if the designated constraints aren't met.
type BeNotifyMemberDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BeNotifyMemberDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BeNotifyMemberDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BeNotifyMemberDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BeNotifyMemberDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BeNotifyMemberDetailValidationError) ErrorName() string {
	return "BeNotifyMemberDetailValidationError"
}

// Error satisfies the builtin error interface
func (e BeNotifyMemberDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBeNotifyMemberDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BeNotifyMemberDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BeNotifyMemberDetailValidationError{}

// Validate checks the field values on NotifyV1 with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NotifyV1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotifyV1 with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NotifyV1MultiError, or nil
// if none found.
func (m *NotifyV1) ValidateAll() error {
	return m.validate(true)
}

func (m *NotifyV1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Remark

	// no validation rules for Status

	for idx, item := range m.GetMembers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NotifyV1ValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NotifyV1ValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NotifyV1ValidationError{
					field:  fmt.Sprintf("Members[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetChatGroups() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NotifyV1ValidationError{
						field:  fmt.Sprintf("ChatGroups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NotifyV1ValidationError{
						field:  fmt.Sprintf("ChatGroups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NotifyV1ValidationError{
					field:  fmt.Sprintf("ChatGroups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	for idx, item := range m.GetExternalNotifyObjs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NotifyV1ValidationError{
						field:  fmt.Sprintf("ExternalNotifyObjs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NotifyV1ValidationError{
						field:  fmt.Sprintf("ExternalNotifyObjs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NotifyV1ValidationError{
					field:  fmt.Sprintf("ExternalNotifyObjs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return NotifyV1MultiError(errors)
	}

	return nil
}

// NotifyV1MultiError is an error wrapping multiple validation errors returned
// by NotifyV1.ValidateAll() if the designated constraints aren't met.
type NotifyV1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotifyV1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotifyV1MultiError) AllErrors() []error { return m }

// NotifyV1ValidationError is the validation error returned by
// NotifyV1.Validate if the designated constraints aren't met.
type NotifyV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotifyV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotifyV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotifyV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotifyV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotifyV1ValidationError) ErrorName() string { return "NotifyV1ValidationError" }

// Error satisfies the builtin error interface
func (e NotifyV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotifyV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotifyV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotifyV1ValidationError{}

// Validate checks the field values on ExternalNotifyObj with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ExternalNotifyObj) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExternalNotifyObj with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExternalNotifyObjMultiError, or nil if none found.
func (m *ExternalNotifyObj) ValidateAll() error {
	return m.validate(true)
}

func (m *ExternalNotifyObj) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Remark

	// no validation rules for Status

	for idx, item := range m.GetExternalCustomerList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExternalNotifyObjValidationError{
						field:  fmt.Sprintf("ExternalCustomerList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExternalNotifyObjValidationError{
						field:  fmt.Sprintf("ExternalCustomerList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExternalNotifyObjValidationError{
					field:  fmt.Sprintf("ExternalCustomerList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetExternalCustomerHookList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExternalNotifyObjValidationError{
						field:  fmt.Sprintf("ExternalCustomerHookList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExternalNotifyObjValidationError{
						field:  fmt.Sprintf("ExternalCustomerHookList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExternalNotifyObjValidationError{
					field:  fmt.Sprintf("ExternalCustomerHookList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	if len(errors) > 0 {
		return ExternalNotifyObjMultiError(errors)
	}

	return nil
}

// ExternalNotifyObjMultiError is an error wrapping multiple validation errors
// returned by ExternalNotifyObj.ValidateAll() if the designated constraints
// aren't met.
type ExternalNotifyObjMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExternalNotifyObjMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExternalNotifyObjMultiError) AllErrors() []error { return m }

// ExternalNotifyObjValidationError is the validation error returned by
// ExternalNotifyObj.Validate if the designated constraints aren't met.
type ExternalNotifyObjValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExternalNotifyObjValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExternalNotifyObjValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExternalNotifyObjValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExternalNotifyObjValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExternalNotifyObjValidationError) ErrorName() string {
	return "ExternalNotifyObjValidationError"
}

// Error satisfies the builtin error interface
func (e ExternalNotifyObjValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExternalNotifyObj.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExternalNotifyObjValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExternalNotifyObjValidationError{}

// Validate checks the field values on ExternalCustomer with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ExternalCustomer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExternalCustomer with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExternalCustomerMultiError, or nil if none found.
func (m *ExternalCustomer) ValidateAll() error {
	return m.validate(true)
}

func (m *ExternalCustomer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Remark

	// no validation rules for Status

	// no validation rules for Addr

	// no validation rules for Contact

	// no validation rules for Phone

	// no validation rules for Email

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	for idx, item := range m.GetExternalCustomerHookList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExternalCustomerValidationError{
						field:  fmt.Sprintf("ExternalCustomerHookList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExternalCustomerValidationError{
						field:  fmt.Sprintf("ExternalCustomerHookList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExternalCustomerValidationError{
					field:  fmt.Sprintf("ExternalCustomerHookList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ExternalCustomerMultiError(errors)
	}

	return nil
}

// ExternalCustomerMultiError is an error wrapping multiple validation errors
// returned by ExternalCustomer.ValidateAll() if the designated constraints
// aren't met.
type ExternalCustomerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExternalCustomerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExternalCustomerMultiError) AllErrors() []error { return m }

// ExternalCustomerValidationError is the validation error returned by
// ExternalCustomer.Validate if the designated constraints aren't met.
type ExternalCustomerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExternalCustomerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExternalCustomerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExternalCustomerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExternalCustomerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExternalCustomerValidationError) ErrorName() string { return "ExternalCustomerValidationError" }

// Error satisfies the builtin error interface
func (e ExternalCustomerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExternalCustomer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExternalCustomerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExternalCustomerValidationError{}

// Validate checks the field values on ExternalCustomerHook with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExternalCustomerHook) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExternalCustomerHook with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExternalCustomerHookMultiError, or nil if none found.
func (m *ExternalCustomerHook) ValidateAll() error {
	return m.validate(true)
}

func (m *ExternalCustomerHook) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for HookName

	// no validation rules for Remark

	// no validation rules for Status

	// no validation rules for CustomerId

	// no validation rules for Hook

	// no validation rules for NotifyApp

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	if len(errors) > 0 {
		return ExternalCustomerHookMultiError(errors)
	}

	return nil
}

// ExternalCustomerHookMultiError is an error wrapping multiple validation
// errors returned by ExternalCustomerHook.ValidateAll() if the designated
// constraints aren't met.
type ExternalCustomerHookMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExternalCustomerHookMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExternalCustomerHookMultiError) AllErrors() []error { return m }

// ExternalCustomerHookValidationError is the validation error returned by
// ExternalCustomerHook.Validate if the designated constraints aren't met.
type ExternalCustomerHookValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExternalCustomerHookValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExternalCustomerHookValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExternalCustomerHookValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExternalCustomerHookValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExternalCustomerHookValidationError) ErrorName() string {
	return "ExternalCustomerHookValidationError"
}

// Error satisfies the builtin error interface
func (e ExternalCustomerHookValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExternalCustomerHook.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExternalCustomerHookValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExternalCustomerHookValidationError{}

// Validate checks the field values on NotifySelectV1 with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NotifySelectV1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotifySelectV1 with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NotifySelectV1MultiError,
// or nil if none found.
func (m *NotifySelectV1) ValidateAll() error {
	return m.validate(true)
}

func (m *NotifySelectV1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	// no validation rules for Label

	// no validation rules for Remark

	// no validation rules for Status

	if len(errors) > 0 {
		return NotifySelectV1MultiError(errors)
	}

	return nil
}

// NotifySelectV1MultiError is an error wrapping multiple validation errors
// returned by NotifySelectV1.ValidateAll() if the designated constraints
// aren't met.
type NotifySelectV1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotifySelectV1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotifySelectV1MultiError) AllErrors() []error { return m }

// NotifySelectV1ValidationError is the validation error returned by
// NotifySelectV1.Validate if the designated constraints aren't met.
type NotifySelectV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotifySelectV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotifySelectV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotifySelectV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotifySelectV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotifySelectV1ValidationError) ErrorName() string { return "NotifySelectV1ValidationError" }

// Error satisfies the builtin error interface
func (e NotifySelectV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotifySelectV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotifySelectV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotifySelectV1ValidationError{}

// Validate checks the field values on InterveneInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *InterveneInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InterveneInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in InterveneInfoMultiError, or
// nil if none found.
func (m *InterveneInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *InterveneInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetIntervenedUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InterveneInfoValidationError{
					field:  "IntervenedUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InterveneInfoValidationError{
					field:  "IntervenedUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIntervenedUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InterveneInfoValidationError{
				field:  "IntervenedUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IntervenedAt

	// no validation rules for Remark

	// no validation rules for Id

	if len(errors) > 0 {
		return InterveneInfoMultiError(errors)
	}

	return nil
}

// InterveneInfoMultiError is an error wrapping multiple validation errors
// returned by InterveneInfo.ValidateAll() if the designated constraints
// aren't met.
type InterveneInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InterveneInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InterveneInfoMultiError) AllErrors() []error { return m }

// InterveneInfoValidationError is the validation error returned by
// InterveneInfo.Validate if the designated constraints aren't met.
type InterveneInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InterveneInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InterveneInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InterveneInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InterveneInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InterveneInfoValidationError) ErrorName() string { return "InterveneInfoValidationError" }

// Error satisfies the builtin error interface
func (e InterveneInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInterveneInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InterveneInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InterveneInfoValidationError{}

// Validate checks the field values on AlarmUpgradeInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AlarmUpgradeInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AlarmUpgradeInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AlarmUpgradeInfoMultiError, or nil if none found.
func (m *AlarmUpgradeInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *AlarmUpgradeInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUpgradedUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AlarmUpgradeInfoValidationError{
					field:  "UpgradedUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AlarmUpgradeInfoValidationError{
					field:  "UpgradedUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpgradedUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AlarmUpgradeInfoValidationError{
				field:  "UpgradedUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UpgradedAt

	// no validation rules for Remark

	// no validation rules for Id

	if len(errors) > 0 {
		return AlarmUpgradeInfoMultiError(errors)
	}

	return nil
}

// AlarmUpgradeInfoMultiError is an error wrapping multiple validation errors
// returned by AlarmUpgradeInfo.ValidateAll() if the designated constraints
// aren't met.
type AlarmUpgradeInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AlarmUpgradeInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AlarmUpgradeInfoMultiError) AllErrors() []error { return m }

// AlarmUpgradeInfoValidationError is the validation error returned by
// AlarmUpgradeInfo.Validate if the designated constraints aren't met.
type AlarmUpgradeInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AlarmUpgradeInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AlarmUpgradeInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AlarmUpgradeInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AlarmUpgradeInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AlarmUpgradeInfoValidationError) ErrorName() string { return "AlarmUpgradeInfoValidationError" }

// Error satisfies the builtin error interface
func (e AlarmUpgradeInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAlarmUpgradeInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AlarmUpgradeInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AlarmUpgradeInfoValidationError{}

// Validate checks the field values on AlarmSuppressInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AlarmSuppressInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AlarmSuppressInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AlarmSuppressInfoMultiError, or nil if none found.
func (m *AlarmSuppressInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *AlarmSuppressInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSuppressedUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AlarmSuppressInfoValidationError{
					field:  "SuppressedUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AlarmSuppressInfoValidationError{
					field:  "SuppressedUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSuppressedUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AlarmSuppressInfoValidationError{
				field:  "SuppressedUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SuppressedAt

	// no validation rules for Remark

	// no validation rules for Duration

	// no validation rules for Id

	if len(errors) > 0 {
		return AlarmSuppressInfoMultiError(errors)
	}

	return nil
}

// AlarmSuppressInfoMultiError is an error wrapping multiple validation errors
// returned by AlarmSuppressInfo.ValidateAll() if the designated constraints
// aren't met.
type AlarmSuppressInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AlarmSuppressInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AlarmSuppressInfoMultiError) AllErrors() []error { return m }

// AlarmSuppressInfoValidationError is the validation error returned by
// AlarmSuppressInfo.Validate if the designated constraints aren't met.
type AlarmSuppressInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AlarmSuppressInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AlarmSuppressInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AlarmSuppressInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AlarmSuppressInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AlarmSuppressInfoValidationError) ErrorName() string {
	return "AlarmSuppressInfoValidationError"
}

// Error satisfies the builtin error interface
func (e AlarmSuppressInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAlarmSuppressInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AlarmSuppressInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AlarmSuppressInfoValidationError{}

// Validate checks the field values on RealtimeAlarmData with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RealtimeAlarmData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RealtimeAlarmData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RealtimeAlarmDataMultiError, or nil if none found.
func (m *RealtimeAlarmData) ValidateAll() error {
	return m.validate(true)
}

func (m *RealtimeAlarmData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Instance

	// no validation rules for Note

	// no validation rules for LevelId

	// no validation rules for EventAt

	// no validation rules for Status

	for idx, item := range m.GetIntervenedUser() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RealtimeAlarmDataValidationError{
						field:  fmt.Sprintf("IntervenedUser[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RealtimeAlarmDataValidationError{
						field:  fmt.Sprintf("IntervenedUser[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RealtimeAlarmDataValidationError{
					field:  fmt.Sprintf("IntervenedUser[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetBeenNotifyMembers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RealtimeAlarmDataValidationError{
						field:  fmt.Sprintf("BeenNotifyMembers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RealtimeAlarmDataValidationError{
						field:  fmt.Sprintf("BeenNotifyMembers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RealtimeAlarmDataValidationError{
					field:  fmt.Sprintf("BeenNotifyMembers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NotifiedAt

	// no validation rules for HistoryId

	if all {
		switch v := interface{}(m.GetUpgradedUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RealtimeAlarmDataValidationError{
					field:  "UpgradedUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RealtimeAlarmDataValidationError{
					field:  "UpgradedUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpgradedUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RealtimeAlarmDataValidationError{
				field:  "UpgradedUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSuppressedUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RealtimeAlarmDataValidationError{
					field:  "SuppressedUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RealtimeAlarmDataValidationError{
					field:  "SuppressedUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSuppressedUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RealtimeAlarmDataValidationError{
				field:  "SuppressedUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for StrategyId

	for idx, item := range m.GetNotifiedChatGroups() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RealtimeAlarmDataValidationError{
						field:  fmt.Sprintf("NotifiedChatGroups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RealtimeAlarmDataValidationError{
						field:  fmt.Sprintf("NotifiedChatGroups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RealtimeAlarmDataValidationError{
					field:  fmt.Sprintf("NotifiedChatGroups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if all {
		switch v := interface{}(m.GetLevel()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RealtimeAlarmDataValidationError{
					field:  "Level",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RealtimeAlarmDataValidationError{
					field:  "Level",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLevel()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RealtimeAlarmDataValidationError{
				field:  "Level",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStrategy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RealtimeAlarmDataValidationError{
					field:  "Strategy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RealtimeAlarmDataValidationError{
					field:  "Strategy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStrategy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RealtimeAlarmDataValidationError{
				field:  "Strategy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Duration

	if len(errors) > 0 {
		return RealtimeAlarmDataMultiError(errors)
	}

	return nil
}

// RealtimeAlarmDataMultiError is an error wrapping multiple validation errors
// returned by RealtimeAlarmData.ValidateAll() if the designated constraints
// aren't met.
type RealtimeAlarmDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RealtimeAlarmDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RealtimeAlarmDataMultiError) AllErrors() []error { return m }

// RealtimeAlarmDataValidationError is the validation error returned by
// RealtimeAlarmData.Validate if the designated constraints aren't met.
type RealtimeAlarmDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RealtimeAlarmDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RealtimeAlarmDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RealtimeAlarmDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RealtimeAlarmDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RealtimeAlarmDataValidationError) ErrorName() string {
	return "RealtimeAlarmDataValidationError"
}

// Error satisfies the builtin error interface
func (e RealtimeAlarmDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRealtimeAlarmData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RealtimeAlarmDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RealtimeAlarmDataValidationError{}

// Validate checks the field values on Duration with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Duration) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Duration with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DurationMultiError, or nil
// if none found.
func (m *Duration) ValidateAll() error {
	return m.validate(true)
}

func (m *Duration) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetValue() <= 0 {
		err := DurationValidationError{
			field:  "Value",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _Duration_Unit_InLookup[m.GetUnit()]; !ok {
		err := DurationValidationError{
			field:  "Unit",
			reason: "value must be in list [s m h d]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DurationMultiError(errors)
	}

	return nil
}

// DurationMultiError is an error wrapping multiple validation errors returned
// by Duration.ValidateAll() if the designated constraints aren't met.
type DurationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DurationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DurationMultiError) AllErrors() []error { return m }

// DurationValidationError is the validation error returned by
// Duration.Validate if the designated constraints aren't met.
type DurationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DurationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DurationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DurationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DurationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DurationValidationError) ErrorName() string { return "DurationValidationError" }

// Error satisfies the builtin error interface
func (e DurationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDuration.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DurationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DurationValidationError{}

var _Duration_Unit_InLookup = map[string]struct{}{
	"s": {},
	"m": {},
	"h": {},
	"d": {},
}

// Validate checks the field values on GroupSimple with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GroupSimple) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupSimple with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GroupSimpleMultiError, or
// nil if none found.
func (m *GroupSimple) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupSimple) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	for idx, item := range m.GetStrategies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GroupSimpleValidationError{
						field:  fmt.Sprintf("Strategies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GroupSimpleValidationError{
						field:  fmt.Sprintf("Strategies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GroupSimpleValidationError{
					field:  fmt.Sprintf("Strategies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GroupSimpleMultiError(errors)
	}

	return nil
}

// GroupSimpleMultiError is an error wrapping multiple validation errors
// returned by GroupSimple.ValidateAll() if the designated constraints aren't met.
type GroupSimpleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupSimpleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupSimpleMultiError) AllErrors() []error { return m }

// GroupSimpleValidationError is the validation error returned by
// GroupSimple.Validate if the designated constraints aren't met.
type GroupSimpleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupSimpleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupSimpleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupSimpleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupSimpleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupSimpleValidationError) ErrorName() string { return "GroupSimpleValidationError" }

// Error satisfies the builtin error interface
func (e GroupSimpleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupSimple.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupSimpleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupSimpleValidationError{}

// Validate checks the field values on StrategySimple with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StrategySimple) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StrategySimple with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StrategySimpleMultiError,
// or nil if none found.
func (m *StrategySimple) ValidateAll() error {
	return m.validate(true)
}

func (m *StrategySimple) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Alert

	// no validation rules for Expr

	if all {
		switch v := interface{}(m.GetDuration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StrategySimpleValidationError{
					field:  "Duration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StrategySimpleValidationError{
					field:  "Duration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDuration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StrategySimpleValidationError{
				field:  "Duration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Labels

	// no validation rules for Annotations

	// no validation rules for GroupId

	// no validation rules for AlarmLevelId

	// no validation rules for Endpoint

	if len(errors) > 0 {
		return StrategySimpleMultiError(errors)
	}

	return nil
}

// StrategySimpleMultiError is an error wrapping multiple validation errors
// returned by StrategySimple.ValidateAll() if the designated constraints
// aren't met.
type StrategySimpleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StrategySimpleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StrategySimpleMultiError) AllErrors() []error { return m }

// StrategySimpleValidationError is the validation error returned by
// StrategySimple.Validate if the designated constraints aren't met.
type StrategySimpleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StrategySimpleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StrategySimpleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StrategySimpleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StrategySimpleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StrategySimpleValidationError) ErrorName() string { return "StrategySimpleValidationError" }

// Error satisfies the builtin error interface
func (e StrategySimpleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStrategySimple.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StrategySimpleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StrategySimpleValidationError{}

// Validate checks the field values on MyChart with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MyChart) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MyChart with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MyChartMultiError, or nil if none found.
func (m *MyChart) ValidateAll() error {
	return m.validate(true)
}

func (m *MyChart) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Title

	// no validation rules for Remark

	// no validation rules for Url

	// no validation rules for Id

	// no validation rules for Status

	if len(errors) > 0 {
		return MyChartMultiError(errors)
	}

	return nil
}

// MyChartMultiError is an error wrapping multiple validation errors returned
// by MyChart.ValidateAll() if the designated constraints aren't met.
type MyChartMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MyChartMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MyChartMultiError) AllErrors() []error { return m }

// MyChartValidationError is the validation error returned by MyChart.Validate
// if the designated constraints aren't met.
type MyChartValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MyChartValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MyChartValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MyChartValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MyChartValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MyChartValidationError) ErrorName() string { return "MyChartValidationError" }

// Error satisfies the builtin error interface
func (e MyChartValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMyChart.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MyChartValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MyChartValidationError{}

// Validate checks the field values on MyDashboardConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MyDashboardConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MyDashboardConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MyDashboardConfigMultiError, or nil if none found.
func (m *MyDashboardConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *MyDashboardConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Remark

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	// no validation rules for Color

	for idx, item := range m.GetCharts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MyDashboardConfigValidationError{
						field:  fmt.Sprintf("Charts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MyDashboardConfigValidationError{
						field:  fmt.Sprintf("Charts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MyDashboardConfigValidationError{
					field:  fmt.Sprintf("Charts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Status

	if len(errors) > 0 {
		return MyDashboardConfigMultiError(errors)
	}

	return nil
}

// MyDashboardConfigMultiError is an error wrapping multiple validation errors
// returned by MyDashboardConfig.ValidateAll() if the designated constraints
// aren't met.
type MyDashboardConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MyDashboardConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MyDashboardConfigMultiError) AllErrors() []error { return m }

// MyDashboardConfigValidationError is the validation error returned by
// MyDashboardConfig.Validate if the designated constraints aren't met.
type MyDashboardConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MyDashboardConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MyDashboardConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MyDashboardConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MyDashboardConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MyDashboardConfigValidationError) ErrorName() string {
	return "MyDashboardConfigValidationError"
}

// Error satisfies the builtin error interface
func (e MyDashboardConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMyDashboardConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MyDashboardConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MyDashboardConfigValidationError{}

// Validate checks the field values on MyDashboardConfigOption with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MyDashboardConfigOption) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MyDashboardConfigOption with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MyDashboardConfigOptionMultiError, or nil if none found.
func (m *MyDashboardConfigOption) ValidateAll() error {
	return m.validate(true)
}

func (m *MyDashboardConfigOption) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	// no validation rules for Label

	// no validation rules for Color

	if len(errors) > 0 {
		return MyDashboardConfigOptionMultiError(errors)
	}

	return nil
}

// MyDashboardConfigOptionMultiError is an error wrapping multiple validation
// errors returned by MyDashboardConfigOption.ValidateAll() if the designated
// constraints aren't met.
type MyDashboardConfigOptionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MyDashboardConfigOptionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MyDashboardConfigOptionMultiError) AllErrors() []error { return m }

// MyDashboardConfigOptionValidationError is the validation error returned by
// MyDashboardConfigOption.Validate if the designated constraints aren't met.
type MyDashboardConfigOptionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MyDashboardConfigOptionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MyDashboardConfigOptionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MyDashboardConfigOptionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MyDashboardConfigOptionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MyDashboardConfigOptionValidationError) ErrorName() string {
	return "MyDashboardConfigOptionValidationError"
}

// Error satisfies the builtin error interface
func (e MyDashboardConfigOptionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMyDashboardConfigOption.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MyDashboardConfigOptionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MyDashboardConfigOptionValidationError{}

// Validate checks the field values on PromRule with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PromRule) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PromRule with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PromRuleMultiError, or nil
// if none found.
func (m *PromRule) ValidateAll() error {
	return m.validate(true)
}

func (m *PromRule) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetAlert()); l < 1 || l > 255 {
		err := PromRuleValidationError{
			field:  "Alert",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetExpr()) < 1 {
		err := PromRuleValidationError{
			field:  "Expr",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := len(m.GetLabels()); l < 1 || l > 100 {
		err := PromRuleValidationError{
			field:  "Labels",
			reason: "value must contain between 1 and 100 pairs, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	{
		sorted_keys := make([]string, len(m.GetLabels()))
		i := 0
		for key := range m.GetLabels() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetLabels()[key]
			_ = val

			if l := utf8.RuneCountInString(key); l < 1 || l > 32 {
				err := PromRuleValidationError{
					field:  fmt.Sprintf("Labels[%v]", key),
					reason: "value length must be between 1 and 32 runes, inclusive",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

			if !_PromRule_Labels_Pattern.MatchString(key) {
				err := PromRuleValidationError{
					field:  fmt.Sprintf("Labels[%v]", key),
					reason: "value does not match regex pattern \"^[a-zA-Z0-9_]+$\"",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

			// no validation rules for Labels[key]
		}
	}

	if l := len(m.GetAnnotations()); l < 1 || l > 100 {
		err := PromRuleValidationError{
			field:  "Annotations",
			reason: "value must contain between 1 and 100 pairs, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	{
		sorted_keys := make([]string, len(m.GetAnnotations()))
		i := 0
		for key := range m.GetAnnotations() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetAnnotations()[key]
			_ = val

			if l := utf8.RuneCountInString(key); l < 1 || l > 32 {
				err := PromRuleValidationError{
					field:  fmt.Sprintf("Annotations[%v]", key),
					reason: "value length must be between 1 and 32 runes, inclusive",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

			if !_PromRule_Annotations_Pattern.MatchString(key) {
				err := PromRuleValidationError{
					field:  fmt.Sprintf("Annotations[%v]", key),
					reason: "value does not match regex pattern \"^[a-zA-Z0-9_]+$\"",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

			// no validation rules for Annotations[key]
		}
	}

	if utf8.RuneCountInString(m.GetFor()) < 2 {
		err := PromRuleValidationError{
			field:  "For",
			reason: "value length must be at least 2 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PromRuleMultiError(errors)
	}

	return nil
}

// PromRuleMultiError is an error wrapping multiple validation errors returned
// by PromRule.ValidateAll() if the designated constraints aren't met.
type PromRuleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PromRuleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PromRuleMultiError) AllErrors() []error { return m }

// PromRuleValidationError is the validation error returned by
// PromRule.Validate if the designated constraints aren't met.
type PromRuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PromRuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PromRuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PromRuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PromRuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PromRuleValidationError) ErrorName() string { return "PromRuleValidationError" }

// Error satisfies the builtin error interface
func (e PromRuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPromRule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PromRuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PromRuleValidationError{}

var _PromRule_Labels_Pattern = regexp.MustCompile("^[a-zA-Z0-9_]+$")

var _PromRule_Annotations_Pattern = regexp.MustCompile("^[a-zA-Z0-9_]+$")

// Validate checks the field values on PromRuleGroup with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PromRuleGroup) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PromRuleGroup with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PromRuleGroupMultiError, or
// nil if none found.
func (m *PromRuleGroup) ValidateAll() error {
	return m.validate(true)
}

func (m *PromRuleGroup) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 32 {
		err := PromRuleGroupValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetRules()) > 100 {
		err := PromRuleGroupValidationError{
			field:  "Rules",
			reason: "value must contain no more than 100 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetRules() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PromRuleGroupValidationError{
						field:  fmt.Sprintf("Rules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PromRuleGroupValidationError{
						field:  fmt.Sprintf("Rules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PromRuleGroupValidationError{
					field:  fmt.Sprintf("Rules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PromRuleGroupMultiError(errors)
	}

	return nil
}

// PromRuleGroupMultiError is an error wrapping multiple validation errors
// returned by PromRuleGroup.ValidateAll() if the designated constraints
// aren't met.
type PromRuleGroupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PromRuleGroupMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PromRuleGroupMultiError) AllErrors() []error { return m }

// PromRuleGroupValidationError is the validation error returned by
// PromRuleGroup.Validate if the designated constraints aren't met.
type PromRuleGroupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PromRuleGroupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PromRuleGroupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PromRuleGroupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PromRuleGroupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PromRuleGroupValidationError) ErrorName() string { return "PromRuleGroupValidationError" }

// Error satisfies the builtin error interface
func (e PromRuleGroupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPromRuleGroup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PromRuleGroupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PromRuleGroupValidationError{}
