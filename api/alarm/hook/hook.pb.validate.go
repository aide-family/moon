// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: alarm/hook/hook.proto

package hook

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on HookV1Request with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HookV1Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HookV1Request with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HookV1RequestMultiError, or
// nil if none found.
func (m *HookV1Request) ValidateAll() error {
	return m.validate(true)
}

func (m *HookV1Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Receiver

	if _, ok := _HookV1Request_Status_InLookup[m.GetStatus()]; !ok {
		err := HookV1RequestValidationError{
			field:  "Status",
			reason: "value must be in list [firing resolved]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetAlerts()) < 1 {
		err := HookV1RequestValidationError{
			field:  "Alerts",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetAlerts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HookV1RequestValidationError{
						field:  fmt.Sprintf("Alerts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HookV1RequestValidationError{
						field:  fmt.Sprintf("Alerts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HookV1RequestValidationError{
					field:  fmt.Sprintf("Alerts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for GroupLabels

	// no validation rules for CommonLabels

	// no validation rules for CommonAnnotations

	// no validation rules for ExternalURL

	// no validation rules for Version

	// no validation rules for GroupKey

	// no validation rules for TruncatedAlerts

	if len(errors) > 0 {
		return HookV1RequestMultiError(errors)
	}

	return nil
}

// HookV1RequestMultiError is an error wrapping multiple validation errors
// returned by HookV1Request.ValidateAll() if the designated constraints
// aren't met.
type HookV1RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HookV1RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HookV1RequestMultiError) AllErrors() []error { return m }

// HookV1RequestValidationError is the validation error returned by
// HookV1Request.Validate if the designated constraints aren't met.
type HookV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HookV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HookV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HookV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HookV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HookV1RequestValidationError) ErrorName() string { return "HookV1RequestValidationError" }

// Error satisfies the builtin error interface
func (e HookV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHookV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HookV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HookV1RequestValidationError{}

var _HookV1Request_Status_InLookup = map[string]struct{}{
	"firing":   {},
	"resolved": {},
}

// Validate checks the field values on AlertV1 with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AlertV1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AlertV1 with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AlertV1MultiError, or nil if none found.
func (m *AlertV1) ValidateAll() error {
	return m.validate(true)
}

func (m *AlertV1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _AlertV1_Status_InLookup[m.GetStatus()]; !ok {
		err := AlertV1ValidationError{
			field:  "Status",
			reason: "value must be in list [firing resolved]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Labels

	// no validation rules for Annotations

	// no validation rules for StartsAt

	// no validation rules for EndsAt

	// no validation rules for GeneratorURL

	if utf8.RuneCountInString(m.GetFingerprint()) < 1 {
		err := AlertV1ValidationError{
			field:  "Fingerprint",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AlertV1MultiError(errors)
	}

	return nil
}

// AlertV1MultiError is an error wrapping multiple validation errors returned
// by AlertV1.ValidateAll() if the designated constraints aren't met.
type AlertV1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AlertV1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AlertV1MultiError) AllErrors() []error { return m }

// AlertV1ValidationError is the validation error returned by AlertV1.Validate
// if the designated constraints aren't met.
type AlertV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AlertV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AlertV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AlertV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AlertV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AlertV1ValidationError) ErrorName() string { return "AlertV1ValidationError" }

// Error satisfies the builtin error interface
func (e AlertV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAlertV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AlertV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AlertV1ValidationError{}

var _AlertV1_Status_InLookup = map[string]struct{}{
	"firing":   {},
	"resolved": {},
}

// Validate checks the field values on HookV1Reply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HookV1Reply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HookV1Reply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HookV1ReplyMultiError, or
// nil if none found.
func (m *HookV1Reply) ValidateAll() error {
	return m.validate(true)
}

func (m *HookV1Reply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Msg

	// no validation rules for Code

	if len(errors) > 0 {
		return HookV1ReplyMultiError(errors)
	}

	return nil
}

// HookV1ReplyMultiError is an error wrapping multiple validation errors
// returned by HookV1Reply.ValidateAll() if the designated constraints aren't met.
type HookV1ReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HookV1ReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HookV1ReplyMultiError) AllErrors() []error { return m }

// HookV1ReplyValidationError is the validation error returned by
// HookV1Reply.Validate if the designated constraints aren't met.
type HookV1ReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HookV1ReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HookV1ReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HookV1ReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HookV1ReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HookV1ReplyValidationError) ErrorName() string { return "HookV1ReplyValidationError" }

// Error satisfies the builtin error interface
func (e HookV1ReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHookV1Reply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HookV1ReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HookV1ReplyValidationError{}
