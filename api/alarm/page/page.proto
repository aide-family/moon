syntax = "proto3";

package api.alarm.page;

import "google/api/annotations.proto";
import "validate/validate.proto";
import "base.proto";
import "model.proto";

option go_package = "prometheus-manager/api/alarm/page;page";
option java_multiple_files = true;
option java_package = "api.alarm.page";


// 告警页面管理模块相关接口
service AlarmPage {
	// 创建告警页面
	rpc CreateAlarmPage (CreateAlarmPageRequest) returns (CreateAlarmPageReply) {
		option (google.api.http) = {
			post: "/api/v1/alarm_page/create"
			body: "*"
		};
	}

	// 更新告警页面
	rpc UpdateAlarmPage (UpdateAlarmPageRequest) returns (UpdateAlarmPageReply) {
		option (google.api.http) = {
			post: "/api/v1/alarm_page/update"
			body: "*"
		};
	}

	// 批量更新告警页面状态
	rpc BatchUpdateAlarmPageStatus (BatchUpdateAlarmPageStatusRequest) returns (BatchUpdateAlarmPageStatusReply) {
		option (google.api.http) = {
			post: "/api/v1/alarm_page/status/batch/update"
			body: "*"
		};
	}

	// 删除告警页面
	rpc DeleteAlarmPage (DeleteAlarmPageRequest) returns (DeleteAlarmPageReply) {
		option (google.api.http) = {
			post: "/api/v1/alarm_page/delete"
			body: "*"
		};
	}

	// 批量删除告警页面
	rpc BatchDeleteAlarmPage (BatchDeleteAlarmPageRequest) returns (BatchDeleteAlarmPageReply) {
		option (google.api.http) = {
			post: "/api/v1/alarm_page/batch/delete"
			body: "*"
		};
	}

	// 获取告警页面
	rpc GetAlarmPage (GetAlarmPageRequest) returns (GetAlarmPageReply) {
		option (google.api.http) = {
			post: "/api/v1/alarm_page/get"
			body: "*"
		};
	}

	// 获取告警页面列表
	rpc ListAlarmPage (ListAlarmPageRequest) returns (ListAlarmPageReply) {
		option (google.api.http) = {
			post: "/api/v1/alarm_page/list"
			body: "*"
		};
	}

	// 获取告警页面下拉列表
	rpc SelectAlarmPage (SelectAlarmPageRequest) returns (SelectAlarmPageReply) {
		option (google.api.http) = {
			post: "/api/v1/alarm_page/select"
			body: "*"
		};
	}

	// 统计各告警页面告警的数量
	rpc CountAlarmPage (CountAlarmPageRequest) returns (CountAlarmPageReply) {
		option (google.api.http) = {
			post: "/api/v1/alarm_page/alarm/count"
			body: "*"
		};
	}

	// 我的告警页面列表
	rpc ListMyAlarmPage (ListMyAlarmPageRequest) returns (ListMyAlarmPageReply) {
		option (google.api.http) = {
			post: "/api/v1/alarm_page/my/list"
			body: "*"
		};
	}

	// 配置我的告警页面列表
	rpc MyAlarmPagesConfig (MyAlarmPagesConfigRequest) returns (MyAlarmPagesConfigReply) {
		option (google.api.http) = {
			post: "/api/v1/alarm_page/my/list/config"
			body: "*"
		};
	}
}

// 创建告警页面请求参数
message CreateAlarmPageRequest {
	// 告警页面名称(字符串长度1-20)
	string name = 1 [(validate.rules).string = {min_len: 1, max_len: 20}];
	// 告警页面图标(字符串长度0-2048)
	string icon = 2 [(validate.rules).string = {max_len: 2048}];
	// 告警页面颜色(字符串长度0-10)
	string color = 3 [(validate.rules).string = {max_len: 10}];
	// 告警页面备注(字符串长度0-200)
	string remark = 4 [(validate.rules).string = {max_len: 200}];
}
// 创建告警页面响应参数
message CreateAlarmPageReply {
	// 告警页面ID
	uint32 id = 1;
}

// 更新告警页面请求参数
message UpdateAlarmPageRequest {
	// 告警页面ID(大于0)
	uint32 id = 1 [(validate.rules).uint32.gt = 0];
	// 告警页面名称(字符串长度1-20)
	string name = 2 [(validate.rules).string = {min_len: 1, max_len: 20}];
	// 告警页面图标(字符串长度0-2048)
	string icon = 3 [(validate.rules).string = {max_len: 2048}];
	// 告警页面颜色(字符串长度0-10)
	string color = 4 [(validate.rules).string = {max_len: 10}];
	// 告警页面备注(字符串长度0-200)
	string remark = 5 [(validate.rules).string = {max_len: 200}];
}
// 更新告警页面响应参数
message UpdateAlarmPageReply {
	// 告警页面ID
	uint32 id = 1;
}

// 批量更新告警页面状态请求参数
message BatchUpdateAlarmPageStatusRequest {
	// 告警页面ID列表(大于0)
	repeated uint32 ids = 1 [(validate.rules).repeated.min_items = 1, (validate.rules).repeated.unique = true];
	// 告警页面状态
	Status status = 2 [(validate.rules).enum = {defined_only: true, not_in: [0]}];
}
// 批量更新告警页面状态响应参数
message BatchUpdateAlarmPageStatusReply {
	// 告警页面ID列表
	repeated uint32 ids = 1;
}

// 删除告警页面请求参数
message DeleteAlarmPageRequest {
	// 告警页面ID(大于0)
	uint32 id = 1 [(validate.rules).uint32.gt = 0];
}
// 删除告警页面响应参数
message DeleteAlarmPageReply {
	// 告警页面ID
	uint32 id = 1;
}

// 批量删除告警页面请求参数
message BatchDeleteAlarmPageRequest {
	// 告警页面ID列表(大于0)
	repeated uint32 ids = 1 [(validate.rules).repeated.min_items = 1, (validate.rules).repeated.unique = true];
}
// 批量删除告警页面响应参数
message BatchDeleteAlarmPageReply {
	// 告警页面ID列表
	repeated uint32 ids = 1;
}

// 获取告警页面请求参数
message GetAlarmPageRequest {
	// 告警页面ID(大于0)
	uint32 id = 1 [(validate.rules).uint32.gt = 0];
}
// 获取告警页面响应参数
message GetAlarmPageReply {
	// 告警页面信息
	AlarmPageV1 alarmPage = 1;
}

// 获取告警页面列表请求参数
message ListAlarmPageRequest {
	// 分页参数
	PageRequest page = 1 [(validate.rules).message.required = true];
	// 关键字(字符串长度0-20)
	string keyword = 2 [(validate.rules).string = {max_len: 20}];
	// 告警页面状态
	Status status = 3 [(validate.rules).enum = {defined_only: true}];
}
// 获取告警页面列表响应参数
message ListAlarmPageReply {
	// 分页参数
	PageReply page = 1;
	// 告警页面列表
	repeated AlarmPageV1 list = 2;
}

// 获取告警页面下拉列表请求参数
message SelectAlarmPageRequest {
	// 分页参数
	PageRequest page = 1 [(validate.rules).message.required = true];
	// 关键字(字符串长度0-20)
	string keyword = 2 [(validate.rules).string = {max_len: 20}];
	// 告警页面状态
	Status status = 3 [(validate.rules).enum = {defined_only: true}];
}
// 获取告警页面下拉列表响应参数
message SelectAlarmPageReply {
	// 分页参数
	PageReply page = 1;
	// 告警页面列表
	repeated AlarmPageSelectV1 list = 2;
}

// 统计各告警页面告警的数量请求参数
message CountAlarmPageRequest {
	// 告警页面ID列表(大于0)
	repeated uint32 ids = 1 [(validate.rules).repeated = {
		min_items: 1,
		unique: true,
		// 不能超过1000
		max_items: 30,
	}];
}
// 统计各告警页面告警的数量响应参数
message CountAlarmPageReply {
	map<uint32, int64> alarmCount = 1;
}

// 我的告警页面列表请求参数
message ListMyAlarmPageRequest {}
// 我的告警页面列表响应参数
message ListMyAlarmPageReply {
	// 我的告警页面列表
	repeated AlarmPageV1 list = 1;
}

// 配置我的告警页面列表请求参数
message MyAlarmPagesConfigRequest {
	// 告警页面ID列表(大于0)
	repeated uint32 alarmIds = 1 [(validate.rules).repeated = {
		min_items: 1,
		unique: true,
		// 不能超过1000
		max_items: 30,
	}];
}
// 配置我的告警页面列表响应参数
message MyAlarmPagesConfigReply {}