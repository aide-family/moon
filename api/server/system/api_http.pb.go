// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.3
// - protoc             v3.19.4
// source: server/system/api.proto

package system

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationApiAuthorizeApi = "/api.server.system.Api/AuthorizeApi"
const OperationApiCreateApi = "/api.server.system.Api/CreateApi"
const OperationApiDeleteApi = "/api.server.system.Api/DeleteApi"
const OperationApiEditApiStatus = "/api.server.system.Api/EditApiStatus"
const OperationApiGetApi = "/api.server.system.Api/GetApi"
const OperationApiGetApiTree = "/api.server.system.Api/GetApiTree"
const OperationApiListApi = "/api.server.system.Api/ListApi"
const OperationApiSelectApi = "/api.server.system.Api/SelectApi"
const OperationApiUpdateApi = "/api.server.system.Api/UpdateApi"

type ApiHTTPServer interface {
	AuthorizeApi(context.Context, *AuthorizeApiRequest) (*AuthorizeApiReply, error)
	CreateApi(context.Context, *CreateApiRequest) (*CreateApiReply, error)
	DeleteApi(context.Context, *DeleteApiRequest) (*DeleteApiReply, error)
	EditApiStatus(context.Context, *EditApiStatusRequest) (*EditApiStatusReply, error)
	GetApi(context.Context, *GetApiRequest) (*GetApiReply, error)
	GetApiTree(context.Context, *GetApiTreeRequest) (*GetApiTreeReply, error)
	ListApi(context.Context, *ListApiRequest) (*ListApiReply, error)
	SelectApi(context.Context, *SelectApiRequest) (*SelectApiReply, error)
	UpdateApi(context.Context, *UpdateApiRequest) (*UpdateApiReply, error)
}

func RegisterApiHTTPServer(s *http.Server, srv ApiHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/system/api/create", _Api_CreateApi0_HTTP_Handler(srv))
	r.POST("/api/v1/system/api/update", _Api_UpdateApi0_HTTP_Handler(srv))
	r.POST("/api/v1/system/api/delete", _Api_DeleteApi0_HTTP_Handler(srv))
	r.POST("/api/v1/system/api/get", _Api_GetApi0_HTTP_Handler(srv))
	r.POST("/api/v1/system/api/list", _Api_ListApi0_HTTP_Handler(srv))
	r.POST("/api/v1/system/api/select", _Api_SelectApi0_HTTP_Handler(srv))
	r.POST("/api/v1/system/api/status/edit", _Api_EditApiStatus0_HTTP_Handler(srv))
	r.POST("/api/v1/system/api/tree", _Api_GetApiTree0_HTTP_Handler(srv))
	r.POST("/api/v1/system/api/authorize", _Api_AuthorizeApi0_HTTP_Handler(srv))
}

func _Api_CreateApi0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateApiRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApiCreateApi)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateApi(ctx, req.(*CreateApiRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateApiReply)
		return ctx.Result(200, reply)
	}
}

func _Api_UpdateApi0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateApiRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApiUpdateApi)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateApi(ctx, req.(*UpdateApiRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateApiReply)
		return ctx.Result(200, reply)
	}
}

func _Api_DeleteApi0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteApiRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApiDeleteApi)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteApi(ctx, req.(*DeleteApiRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteApiReply)
		return ctx.Result(200, reply)
	}
}

func _Api_GetApi0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetApiRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApiGetApi)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetApi(ctx, req.(*GetApiRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetApiReply)
		return ctx.Result(200, reply)
	}
}

func _Api_ListApi0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListApiRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApiListApi)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListApi(ctx, req.(*ListApiRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListApiReply)
		return ctx.Result(200, reply)
	}
}

func _Api_SelectApi0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SelectApiRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApiSelectApi)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SelectApi(ctx, req.(*SelectApiRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SelectApiReply)
		return ctx.Result(200, reply)
	}
}

func _Api_EditApiStatus0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in EditApiStatusRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApiEditApiStatus)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.EditApiStatus(ctx, req.(*EditApiStatusRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*EditApiStatusReply)
		return ctx.Result(200, reply)
	}
}

func _Api_GetApiTree0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetApiTreeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApiGetApiTree)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetApiTree(ctx, req.(*GetApiTreeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetApiTreeReply)
		return ctx.Result(200, reply)
	}
}

func _Api_AuthorizeApi0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AuthorizeApiRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApiAuthorizeApi)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AuthorizeApi(ctx, req.(*AuthorizeApiRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AuthorizeApiReply)
		return ctx.Result(200, reply)
	}
}

type ApiHTTPClient interface {
	AuthorizeApi(ctx context.Context, req *AuthorizeApiRequest, opts ...http.CallOption) (rsp *AuthorizeApiReply, err error)
	CreateApi(ctx context.Context, req *CreateApiRequest, opts ...http.CallOption) (rsp *CreateApiReply, err error)
	DeleteApi(ctx context.Context, req *DeleteApiRequest, opts ...http.CallOption) (rsp *DeleteApiReply, err error)
	EditApiStatus(ctx context.Context, req *EditApiStatusRequest, opts ...http.CallOption) (rsp *EditApiStatusReply, err error)
	GetApi(ctx context.Context, req *GetApiRequest, opts ...http.CallOption) (rsp *GetApiReply, err error)
	GetApiTree(ctx context.Context, req *GetApiTreeRequest, opts ...http.CallOption) (rsp *GetApiTreeReply, err error)
	ListApi(ctx context.Context, req *ListApiRequest, opts ...http.CallOption) (rsp *ListApiReply, err error)
	SelectApi(ctx context.Context, req *SelectApiRequest, opts ...http.CallOption) (rsp *SelectApiReply, err error)
	UpdateApi(ctx context.Context, req *UpdateApiRequest, opts ...http.CallOption) (rsp *UpdateApiReply, err error)
}

type ApiHTTPClientImpl struct {
	cc *http.Client
}

func NewApiHTTPClient(client *http.Client) ApiHTTPClient {
	return &ApiHTTPClientImpl{client}
}

func (c *ApiHTTPClientImpl) AuthorizeApi(ctx context.Context, in *AuthorizeApiRequest, opts ...http.CallOption) (*AuthorizeApiReply, error) {
	var out AuthorizeApiReply
	pattern := "/api/v1/system/api/authorize"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationApiAuthorizeApi))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) CreateApi(ctx context.Context, in *CreateApiRequest, opts ...http.CallOption) (*CreateApiReply, error) {
	var out CreateApiReply
	pattern := "/api/v1/system/api/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationApiCreateApi))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) DeleteApi(ctx context.Context, in *DeleteApiRequest, opts ...http.CallOption) (*DeleteApiReply, error) {
	var out DeleteApiReply
	pattern := "/api/v1/system/api/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationApiDeleteApi))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) EditApiStatus(ctx context.Context, in *EditApiStatusRequest, opts ...http.CallOption) (*EditApiStatusReply, error) {
	var out EditApiStatusReply
	pattern := "/api/v1/system/api/status/edit"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationApiEditApiStatus))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) GetApi(ctx context.Context, in *GetApiRequest, opts ...http.CallOption) (*GetApiReply, error) {
	var out GetApiReply
	pattern := "/api/v1/system/api/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationApiGetApi))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) GetApiTree(ctx context.Context, in *GetApiTreeRequest, opts ...http.CallOption) (*GetApiTreeReply, error) {
	var out GetApiTreeReply
	pattern := "/api/v1/system/api/tree"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationApiGetApiTree))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) ListApi(ctx context.Context, in *ListApiRequest, opts ...http.CallOption) (*ListApiReply, error) {
	var out ListApiReply
	pattern := "/api/v1/system/api/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationApiListApi))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) SelectApi(ctx context.Context, in *SelectApiRequest, opts ...http.CallOption) (*SelectApiReply, error) {
	var out SelectApiReply
	pattern := "/api/v1/system/api/select"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationApiSelectApi))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) UpdateApi(ctx context.Context, in *UpdateApiRequest, opts ...http.CallOption) (*UpdateApiReply, error) {
	var out UpdateApiReply
	pattern := "/api/v1/system/api/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationApiUpdateApi))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
