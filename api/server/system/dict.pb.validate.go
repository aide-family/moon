// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: server/system/dict.proto

package system

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	api "prometheus-manager/api"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = api.Status(0)
)

// Validate checks the field values on CreateDictRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateDictRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDictRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDictRequestMultiError, or nil if none found.
func (m *CreateDictRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDictRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 20 {
		err := CreateDictRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _CreateDictRequest_Category_NotInLookup[m.GetCategory()]; ok {
		err := CreateDictRequestValidationError{
			field:  "Category",
			reason: "value must not be in list [0]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := api.Category_name[int32(m.GetCategory())]; !ok {
		err := CreateDictRequestValidationError{
			field:  "Category",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Color

	// no validation rules for Remark

	if len(errors) > 0 {
		return CreateDictRequestMultiError(errors)
	}

	return nil
}

// CreateDictRequestMultiError is an error wrapping multiple validation errors
// returned by CreateDictRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateDictRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDictRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDictRequestMultiError) AllErrors() []error { return m }

// CreateDictRequestValidationError is the validation error returned by
// CreateDictRequest.Validate if the designated constraints aren't met.
type CreateDictRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDictRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDictRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDictRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDictRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDictRequestValidationError) ErrorName() string {
	return "CreateDictRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDictRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDictRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDictRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDictRequestValidationError{}

var _CreateDictRequest_Category_NotInLookup = map[api.Category]struct{}{
	0: {},
}

// Validate checks the field values on CreateDictReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateDictReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDictReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDictReplyMultiError, or nil if none found.
func (m *CreateDictReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDictReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateDictReplyMultiError(errors)
	}

	return nil
}

// CreateDictReplyMultiError is an error wrapping multiple validation errors
// returned by CreateDictReply.ValidateAll() if the designated constraints
// aren't met.
type CreateDictReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDictReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDictReplyMultiError) AllErrors() []error { return m }

// CreateDictReplyValidationError is the validation error returned by
// CreateDictReply.Validate if the designated constraints aren't met.
type CreateDictReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDictReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDictReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDictReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDictReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDictReplyValidationError) ErrorName() string { return "CreateDictReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateDictReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDictReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDictReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDictReplyValidationError{}

// Validate checks the field values on UpdateDictRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateDictRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDictRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDictRequestMultiError, or nil if none found.
func (m *UpdateDictRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDictRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateDictRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 20 {
		err := UpdateDictRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _UpdateDictRequest_Category_NotInLookup[m.GetCategory()]; ok {
		err := UpdateDictRequestValidationError{
			field:  "Category",
			reason: "value must not be in list [0]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := api.Category_name[int32(m.GetCategory())]; !ok {
		err := UpdateDictRequestValidationError{
			field:  "Category",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetColor()) > 10 {
		err := UpdateDictRequestValidationError{
			field:  "Color",
			reason: "value length must be at most 10 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRemark()) > 255 {
		err := UpdateDictRequestValidationError{
			field:  "Remark",
			reason: "value length must be at most 255 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := api.Status_name[int32(m.GetStatus())]; !ok {
		err := UpdateDictRequestValidationError{
			field:  "Status",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateDictRequestMultiError(errors)
	}

	return nil
}

// UpdateDictRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateDictRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateDictRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDictRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDictRequestMultiError) AllErrors() []error { return m }

// UpdateDictRequestValidationError is the validation error returned by
// UpdateDictRequest.Validate if the designated constraints aren't met.
type UpdateDictRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDictRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDictRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDictRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDictRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDictRequestValidationError) ErrorName() string {
	return "UpdateDictRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDictRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDictRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDictRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDictRequestValidationError{}

var _UpdateDictRequest_Category_NotInLookup = map[api.Category]struct{}{
	0: {},
}

// Validate checks the field values on UpdateDictReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateDictReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDictReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDictReplyMultiError, or nil if none found.
func (m *UpdateDictReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDictReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return UpdateDictReplyMultiError(errors)
	}

	return nil
}

// UpdateDictReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateDictReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateDictReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDictReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDictReplyMultiError) AllErrors() []error { return m }

// UpdateDictReplyValidationError is the validation error returned by
// UpdateDictReply.Validate if the designated constraints aren't met.
type UpdateDictReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDictReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDictReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDictReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDictReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDictReplyValidationError) ErrorName() string { return "UpdateDictReplyValidationError" }

// Error satisfies the builtin error interface
func (e UpdateDictReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDictReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDictReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDictReplyValidationError{}

// Validate checks the field values on BatchUpdateDictStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchUpdateDictStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchUpdateDictStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchUpdateDictStatusRequestMultiError, or nil if none found.
func (m *BatchUpdateDictStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchUpdateDictStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetIds()) < 1 {
		err := BatchUpdateDictStatusRequestValidationError{
			field:  "Ids",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	_BatchUpdateDictStatusRequest_Ids_Unique := make(map[uint32]struct{}, len(m.GetIds()))

	for idx, item := range m.GetIds() {
		_, _ = idx, item

		if _, exists := _BatchUpdateDictStatusRequest_Ids_Unique[item]; exists {
			err := BatchUpdateDictStatusRequestValidationError{
				field:  fmt.Sprintf("Ids[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_BatchUpdateDictStatusRequest_Ids_Unique[item] = struct{}{}
		}

		// no validation rules for Ids[idx]
	}

	if _, ok := _BatchUpdateDictStatusRequest_Status_NotInLookup[m.GetStatus()]; ok {
		err := BatchUpdateDictStatusRequestValidationError{
			field:  "Status",
			reason: "value must not be in list [0]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := api.Status_name[int32(m.GetStatus())]; !ok {
		err := BatchUpdateDictStatusRequestValidationError{
			field:  "Status",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return BatchUpdateDictStatusRequestMultiError(errors)
	}

	return nil
}

// BatchUpdateDictStatusRequestMultiError is an error wrapping multiple
// validation errors returned by BatchUpdateDictStatusRequest.ValidateAll() if
// the designated constraints aren't met.
type BatchUpdateDictStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchUpdateDictStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchUpdateDictStatusRequestMultiError) AllErrors() []error { return m }

// BatchUpdateDictStatusRequestValidationError is the validation error returned
// by BatchUpdateDictStatusRequest.Validate if the designated constraints
// aren't met.
type BatchUpdateDictStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchUpdateDictStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchUpdateDictStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchUpdateDictStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchUpdateDictStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchUpdateDictStatusRequestValidationError) ErrorName() string {
	return "BatchUpdateDictStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BatchUpdateDictStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchUpdateDictStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchUpdateDictStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchUpdateDictStatusRequestValidationError{}

var _BatchUpdateDictStatusRequest_Status_NotInLookup = map[api.Status]struct{}{
	0: {},
}

// Validate checks the field values on BatchUpdateDictStatusReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchUpdateDictStatusReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchUpdateDictStatusReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchUpdateDictStatusReplyMultiError, or nil if none found.
func (m *BatchUpdateDictStatusReply) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchUpdateDictStatusReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return BatchUpdateDictStatusReplyMultiError(errors)
	}

	return nil
}

// BatchUpdateDictStatusReplyMultiError is an error wrapping multiple
// validation errors returned by BatchUpdateDictStatusReply.ValidateAll() if
// the designated constraints aren't met.
type BatchUpdateDictStatusReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchUpdateDictStatusReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchUpdateDictStatusReplyMultiError) AllErrors() []error { return m }

// BatchUpdateDictStatusReplyValidationError is the validation error returned
// by BatchUpdateDictStatusReply.Validate if the designated constraints aren't met.
type BatchUpdateDictStatusReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchUpdateDictStatusReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchUpdateDictStatusReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchUpdateDictStatusReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchUpdateDictStatusReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchUpdateDictStatusReplyValidationError) ErrorName() string {
	return "BatchUpdateDictStatusReplyValidationError"
}

// Error satisfies the builtin error interface
func (e BatchUpdateDictStatusReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchUpdateDictStatusReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchUpdateDictStatusReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchUpdateDictStatusReplyValidationError{}

// Validate checks the field values on DeleteDictRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteDictRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDictRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDictRequestMultiError, or nil if none found.
func (m *DeleteDictRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDictRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteDictRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteDictRequestMultiError(errors)
	}

	return nil
}

// DeleteDictRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteDictRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteDictRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDictRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDictRequestMultiError) AllErrors() []error { return m }

// DeleteDictRequestValidationError is the validation error returned by
// DeleteDictRequest.Validate if the designated constraints aren't met.
type DeleteDictRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDictRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDictRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDictRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDictRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDictRequestValidationError) ErrorName() string {
	return "DeleteDictRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDictRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDictRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDictRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDictRequestValidationError{}

// Validate checks the field values on DeleteDictReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteDictReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDictReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDictReplyMultiError, or nil if none found.
func (m *DeleteDictReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDictReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteDictReplyMultiError(errors)
	}

	return nil
}

// DeleteDictReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteDictReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteDictReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDictReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDictReplyMultiError) AllErrors() []error { return m }

// DeleteDictReplyValidationError is the validation error returned by
// DeleteDictReply.Validate if the designated constraints aren't met.
type DeleteDictReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDictReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDictReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDictReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDictReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDictReplyValidationError) ErrorName() string { return "DeleteDictReplyValidationError" }

// Error satisfies the builtin error interface
func (e DeleteDictReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDictReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDictReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDictReplyValidationError{}

// Validate checks the field values on BatchDeleteDictRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchDeleteDictRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchDeleteDictRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchDeleteDictRequestMultiError, or nil if none found.
func (m *BatchDeleteDictRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchDeleteDictRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetIds()) < 1 {
		err := BatchDeleteDictRequestValidationError{
			field:  "Ids",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	_BatchDeleteDictRequest_Ids_Unique := make(map[uint32]struct{}, len(m.GetIds()))

	for idx, item := range m.GetIds() {
		_, _ = idx, item

		if _, exists := _BatchDeleteDictRequest_Ids_Unique[item]; exists {
			err := BatchDeleteDictRequestValidationError{
				field:  fmt.Sprintf("Ids[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_BatchDeleteDictRequest_Ids_Unique[item] = struct{}{}
		}

		// no validation rules for Ids[idx]
	}

	if len(errors) > 0 {
		return BatchDeleteDictRequestMultiError(errors)
	}

	return nil
}

// BatchDeleteDictRequestMultiError is an error wrapping multiple validation
// errors returned by BatchDeleteDictRequest.ValidateAll() if the designated
// constraints aren't met.
type BatchDeleteDictRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchDeleteDictRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchDeleteDictRequestMultiError) AllErrors() []error { return m }

// BatchDeleteDictRequestValidationError is the validation error returned by
// BatchDeleteDictRequest.Validate if the designated constraints aren't met.
type BatchDeleteDictRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchDeleteDictRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchDeleteDictRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchDeleteDictRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchDeleteDictRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchDeleteDictRequestValidationError) ErrorName() string {
	return "BatchDeleteDictRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BatchDeleteDictRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchDeleteDictRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchDeleteDictRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchDeleteDictRequestValidationError{}

// Validate checks the field values on BatchDeleteDictReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchDeleteDictReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchDeleteDictReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchDeleteDictReplyMultiError, or nil if none found.
func (m *BatchDeleteDictReply) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchDeleteDictReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return BatchDeleteDictReplyMultiError(errors)
	}

	return nil
}

// BatchDeleteDictReplyMultiError is an error wrapping multiple validation
// errors returned by BatchDeleteDictReply.ValidateAll() if the designated
// constraints aren't met.
type BatchDeleteDictReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchDeleteDictReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchDeleteDictReplyMultiError) AllErrors() []error { return m }

// BatchDeleteDictReplyValidationError is the validation error returned by
// BatchDeleteDictReply.Validate if the designated constraints aren't met.
type BatchDeleteDictReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchDeleteDictReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchDeleteDictReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchDeleteDictReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchDeleteDictReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchDeleteDictReplyValidationError) ErrorName() string {
	return "BatchDeleteDictReplyValidationError"
}

// Error satisfies the builtin error interface
func (e BatchDeleteDictReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchDeleteDictReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchDeleteDictReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchDeleteDictReplyValidationError{}

// Validate checks the field values on GetDictRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetDictRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDictRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetDictRequestMultiError,
// or nil if none found.
func (m *GetDictRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDictRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetDictRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for IsDeleted

	if len(errors) > 0 {
		return GetDictRequestMultiError(errors)
	}

	return nil
}

// GetDictRequestMultiError is an error wrapping multiple validation errors
// returned by GetDictRequest.ValidateAll() if the designated constraints
// aren't met.
type GetDictRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDictRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDictRequestMultiError) AllErrors() []error { return m }

// GetDictRequestValidationError is the validation error returned by
// GetDictRequest.Validate if the designated constraints aren't met.
type GetDictRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDictRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDictRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDictRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDictRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDictRequestValidationError) ErrorName() string { return "GetDictRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetDictRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDictRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDictRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDictRequestValidationError{}

// Validate checks the field values on GetDictReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetDictReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDictReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetDictReplyMultiError, or
// nil if none found.
func (m *GetDictReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDictReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPromDict()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDictReplyValidationError{
					field:  "PromDict",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDictReplyValidationError{
					field:  "PromDict",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPromDict()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDictReplyValidationError{
				field:  "PromDict",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDictReplyMultiError(errors)
	}

	return nil
}

// GetDictReplyMultiError is an error wrapping multiple validation errors
// returned by GetDictReply.ValidateAll() if the designated constraints aren't met.
type GetDictReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDictReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDictReplyMultiError) AllErrors() []error { return m }

// GetDictReplyValidationError is the validation error returned by
// GetDictReply.Validate if the designated constraints aren't met.
type GetDictReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDictReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDictReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDictReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDictReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDictReplyValidationError) ErrorName() string { return "GetDictReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetDictReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDictReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDictReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDictReplyValidationError{}

// Validate checks the field values on ListDictRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListDictRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDictRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDictRequestMultiError, or nil if none found.
func (m *ListDictRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDictRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsDeleted

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListDictRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListDictRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListDictRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetKeyword()) > 20 {
		err := ListDictRequestValidationError{
			field:  "Keyword",
			reason: "value length must be at most 20 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Category

	// no validation rules for Status

	if len(errors) > 0 {
		return ListDictRequestMultiError(errors)
	}

	return nil
}

// ListDictRequestMultiError is an error wrapping multiple validation errors
// returned by ListDictRequest.ValidateAll() if the designated constraints
// aren't met.
type ListDictRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDictRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDictRequestMultiError) AllErrors() []error { return m }

// ListDictRequestValidationError is the validation error returned by
// ListDictRequest.Validate if the designated constraints aren't met.
type ListDictRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDictRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDictRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDictRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDictRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDictRequestValidationError) ErrorName() string { return "ListDictRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListDictRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDictRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDictRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDictRequestValidationError{}

// Validate checks the field values on ListDictReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListDictReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDictReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListDictReplyMultiError, or
// nil if none found.
func (m *ListDictReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDictReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListDictReplyValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListDictReplyValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListDictReplyValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDictReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDictReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDictReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListDictReplyMultiError(errors)
	}

	return nil
}

// ListDictReplyMultiError is an error wrapping multiple validation errors
// returned by ListDictReply.ValidateAll() if the designated constraints
// aren't met.
type ListDictReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDictReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDictReplyMultiError) AllErrors() []error { return m }

// ListDictReplyValidationError is the validation error returned by
// ListDictReply.Validate if the designated constraints aren't met.
type ListDictReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDictReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDictReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDictReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDictReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDictReplyValidationError) ErrorName() string { return "ListDictReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListDictReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDictReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDictReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDictReplyValidationError{}

// Validate checks the field values on SelectDictRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SelectDictRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SelectDictRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SelectDictRequestMultiError, or nil if none found.
func (m *SelectDictRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SelectDictRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsDeleted

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SelectDictRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SelectDictRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SelectDictRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetKeyword()) > 20 {
		err := SelectDictRequestValidationError{
			field:  "Keyword",
			reason: "value length must be at most 20 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Category

	// no validation rules for Status

	if len(errors) > 0 {
		return SelectDictRequestMultiError(errors)
	}

	return nil
}

// SelectDictRequestMultiError is an error wrapping multiple validation errors
// returned by SelectDictRequest.ValidateAll() if the designated constraints
// aren't met.
type SelectDictRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SelectDictRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SelectDictRequestMultiError) AllErrors() []error { return m }

// SelectDictRequestValidationError is the validation error returned by
// SelectDictRequest.Validate if the designated constraints aren't met.
type SelectDictRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SelectDictRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SelectDictRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SelectDictRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SelectDictRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SelectDictRequestValidationError) ErrorName() string {
	return "SelectDictRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SelectDictRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSelectDictRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SelectDictRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SelectDictRequestValidationError{}

// Validate checks the field values on SelectDictReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SelectDictReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SelectDictReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SelectDictReplyMultiError, or nil if none found.
func (m *SelectDictReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SelectDictReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SelectDictReplyValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SelectDictReplyValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SelectDictReplyValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SelectDictReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SelectDictReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SelectDictReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SelectDictReplyMultiError(errors)
	}

	return nil
}

// SelectDictReplyMultiError is an error wrapping multiple validation errors
// returned by SelectDictReply.ValidateAll() if the designated constraints
// aren't met.
type SelectDictReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SelectDictReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SelectDictReplyMultiError) AllErrors() []error { return m }

// SelectDictReplyValidationError is the validation error returned by
// SelectDictReply.Validate if the designated constraints aren't met.
type SelectDictReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SelectDictReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SelectDictReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SelectDictReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SelectDictReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SelectDictReplyValidationError) ErrorName() string { return "SelectDictReplyValidationError" }

// Error satisfies the builtin error interface
func (e SelectDictReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSelectDictReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SelectDictReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SelectDictReplyValidationError{}
