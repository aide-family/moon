// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v3.19.4
// source: server/system/dict.proto

package system

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationDictBatchDeleteDict = "/api.server.system.Dict/BatchDeleteDict"
const OperationDictBatchUpdateDictStatus = "/api.server.system.Dict/BatchUpdateDictStatus"
const OperationDictCountAlarmPage = "/api.server.system.Dict/CountAlarmPage"
const OperationDictCreateDict = "/api.server.system.Dict/CreateDict"
const OperationDictDeleteDict = "/api.server.system.Dict/DeleteDict"
const OperationDictGetDict = "/api.server.system.Dict/GetDict"
const OperationDictListDict = "/api.server.system.Dict/ListDict"
const OperationDictListMyAlarmPage = "/api.server.system.Dict/ListMyAlarmPage"
const OperationDictMyAlarmPagesConfig = "/api.server.system.Dict/MyAlarmPagesConfig"
const OperationDictSelectDict = "/api.server.system.Dict/SelectDict"
const OperationDictUpdateDict = "/api.server.system.Dict/UpdateDict"

type DictHTTPServer interface {
	// BatchDeleteDict 删除字典列表
	BatchDeleteDict(context.Context, *BatchDeleteDictRequest) (*BatchDeleteDictReply, error)
	// BatchUpdateDictStatus 更新字典状态
	BatchUpdateDictStatus(context.Context, *BatchUpdateDictStatusRequest) (*BatchUpdateDictStatusReply, error)
	// CountAlarmPage 统计各告警页面告警的数量
	CountAlarmPage(context.Context, *CountAlarmPageRequest) (*CountAlarmPageReply, error)
	// CreateDict 创建字典
	CreateDict(context.Context, *CreateDictRequest) (*CreateDictReply, error)
	// DeleteDict 删除字典
	DeleteDict(context.Context, *DeleteDictRequest) (*DeleteDictReply, error)
	// GetDict 获取字典
	GetDict(context.Context, *GetDictRequest) (*GetDictReply, error)
	// ListDict 获取字典列表
	ListDict(context.Context, *ListDictRequest) (*ListDictReply, error)
	// ListMyAlarmPage 我的告警页面列表
	ListMyAlarmPage(context.Context, *ListMyAlarmPageRequest) (*ListMyAlarmPageReply, error)
	// MyAlarmPagesConfig 配置我的告警页面列表
	MyAlarmPagesConfig(context.Context, *MyAlarmPagesConfigRequest) (*MyAlarmPagesConfigReply, error)
	// SelectDict 获取字典列表, 用于下拉选择
	SelectDict(context.Context, *SelectDictRequest) (*SelectDictReply, error)
	// UpdateDict 更新字典
	UpdateDict(context.Context, *UpdateDictRequest) (*UpdateDictReply, error)
}

func RegisterDictHTTPServer(s *http.Server, srv DictHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/dict/create", _Dict_CreateDict0_HTTP_Handler(srv))
	r.POST("/api/v1/dict/update", _Dict_UpdateDict0_HTTP_Handler(srv))
	r.POST("/api/v1/dict/status/update/batch", _Dict_BatchUpdateDictStatus0_HTTP_Handler(srv))
	r.POST("/api/v1/dict/delete", _Dict_DeleteDict0_HTTP_Handler(srv))
	r.POST("/api/v1/dict/batch/delete", _Dict_BatchDeleteDict0_HTTP_Handler(srv))
	r.POST("/api/v1/dict/get", _Dict_GetDict0_HTTP_Handler(srv))
	r.POST("/api/v1/dict/list", _Dict_ListDict0_HTTP_Handler(srv))
	r.POST("/api/v1/dict/select", _Dict_SelectDict0_HTTP_Handler(srv))
	r.POST("/api/v1/alarm_page/alarm/count", _Dict_CountAlarmPage0_HTTP_Handler(srv))
	r.POST("/api/v1/alarm_page/my/list", _Dict_ListMyAlarmPage0_HTTP_Handler(srv))
	r.POST("/api/v1/alarm_page/my/list/config", _Dict_MyAlarmPagesConfig0_HTTP_Handler(srv))
}

func _Dict_CreateDict0_HTTP_Handler(srv DictHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateDictRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDictCreateDict)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateDict(ctx, req.(*CreateDictRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateDictReply)
		return ctx.Result(200, reply)
	}
}

func _Dict_UpdateDict0_HTTP_Handler(srv DictHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateDictRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDictUpdateDict)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateDict(ctx, req.(*UpdateDictRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateDictReply)
		return ctx.Result(200, reply)
	}
}

func _Dict_BatchUpdateDictStatus0_HTTP_Handler(srv DictHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BatchUpdateDictStatusRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDictBatchUpdateDictStatus)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BatchUpdateDictStatus(ctx, req.(*BatchUpdateDictStatusRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BatchUpdateDictStatusReply)
		return ctx.Result(200, reply)
	}
}

func _Dict_DeleteDict0_HTTP_Handler(srv DictHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteDictRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDictDeleteDict)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteDict(ctx, req.(*DeleteDictRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteDictReply)
		return ctx.Result(200, reply)
	}
}

func _Dict_BatchDeleteDict0_HTTP_Handler(srv DictHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BatchDeleteDictRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDictBatchDeleteDict)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BatchDeleteDict(ctx, req.(*BatchDeleteDictRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BatchDeleteDictReply)
		return ctx.Result(200, reply)
	}
}

func _Dict_GetDict0_HTTP_Handler(srv DictHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDictRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDictGetDict)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDict(ctx, req.(*GetDictRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetDictReply)
		return ctx.Result(200, reply)
	}
}

func _Dict_ListDict0_HTTP_Handler(srv DictHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListDictRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDictListDict)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListDict(ctx, req.(*ListDictRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListDictReply)
		return ctx.Result(200, reply)
	}
}

func _Dict_SelectDict0_HTTP_Handler(srv DictHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SelectDictRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDictSelectDict)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SelectDict(ctx, req.(*SelectDictRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SelectDictReply)
		return ctx.Result(200, reply)
	}
}

func _Dict_CountAlarmPage0_HTTP_Handler(srv DictHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CountAlarmPageRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDictCountAlarmPage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CountAlarmPage(ctx, req.(*CountAlarmPageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CountAlarmPageReply)
		return ctx.Result(200, reply)
	}
}

func _Dict_ListMyAlarmPage0_HTTP_Handler(srv DictHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListMyAlarmPageRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDictListMyAlarmPage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListMyAlarmPage(ctx, req.(*ListMyAlarmPageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListMyAlarmPageReply)
		return ctx.Result(200, reply)
	}
}

func _Dict_MyAlarmPagesConfig0_HTTP_Handler(srv DictHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MyAlarmPagesConfigRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDictMyAlarmPagesConfig)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.MyAlarmPagesConfig(ctx, req.(*MyAlarmPagesConfigRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MyAlarmPagesConfigReply)
		return ctx.Result(200, reply)
	}
}

type DictHTTPClient interface {
	BatchDeleteDict(ctx context.Context, req *BatchDeleteDictRequest, opts ...http.CallOption) (rsp *BatchDeleteDictReply, err error)
	BatchUpdateDictStatus(ctx context.Context, req *BatchUpdateDictStatusRequest, opts ...http.CallOption) (rsp *BatchUpdateDictStatusReply, err error)
	CountAlarmPage(ctx context.Context, req *CountAlarmPageRequest, opts ...http.CallOption) (rsp *CountAlarmPageReply, err error)
	CreateDict(ctx context.Context, req *CreateDictRequest, opts ...http.CallOption) (rsp *CreateDictReply, err error)
	DeleteDict(ctx context.Context, req *DeleteDictRequest, opts ...http.CallOption) (rsp *DeleteDictReply, err error)
	GetDict(ctx context.Context, req *GetDictRequest, opts ...http.CallOption) (rsp *GetDictReply, err error)
	ListDict(ctx context.Context, req *ListDictRequest, opts ...http.CallOption) (rsp *ListDictReply, err error)
	ListMyAlarmPage(ctx context.Context, req *ListMyAlarmPageRequest, opts ...http.CallOption) (rsp *ListMyAlarmPageReply, err error)
	MyAlarmPagesConfig(ctx context.Context, req *MyAlarmPagesConfigRequest, opts ...http.CallOption) (rsp *MyAlarmPagesConfigReply, err error)
	SelectDict(ctx context.Context, req *SelectDictRequest, opts ...http.CallOption) (rsp *SelectDictReply, err error)
	UpdateDict(ctx context.Context, req *UpdateDictRequest, opts ...http.CallOption) (rsp *UpdateDictReply, err error)
}

type DictHTTPClientImpl struct {
	cc *http.Client
}

func NewDictHTTPClient(client *http.Client) DictHTTPClient {
	return &DictHTTPClientImpl{client}
}

func (c *DictHTTPClientImpl) BatchDeleteDict(ctx context.Context, in *BatchDeleteDictRequest, opts ...http.CallOption) (*BatchDeleteDictReply, error) {
	var out BatchDeleteDictReply
	pattern := "/api/v1/dict/batch/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDictBatchDeleteDict))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DictHTTPClientImpl) BatchUpdateDictStatus(ctx context.Context, in *BatchUpdateDictStatusRequest, opts ...http.CallOption) (*BatchUpdateDictStatusReply, error) {
	var out BatchUpdateDictStatusReply
	pattern := "/api/v1/dict/status/update/batch"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDictBatchUpdateDictStatus))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DictHTTPClientImpl) CountAlarmPage(ctx context.Context, in *CountAlarmPageRequest, opts ...http.CallOption) (*CountAlarmPageReply, error) {
	var out CountAlarmPageReply
	pattern := "/api/v1/alarm_page/alarm/count"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDictCountAlarmPage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DictHTTPClientImpl) CreateDict(ctx context.Context, in *CreateDictRequest, opts ...http.CallOption) (*CreateDictReply, error) {
	var out CreateDictReply
	pattern := "/api/v1/dict/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDictCreateDict))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DictHTTPClientImpl) DeleteDict(ctx context.Context, in *DeleteDictRequest, opts ...http.CallOption) (*DeleteDictReply, error) {
	var out DeleteDictReply
	pattern := "/api/v1/dict/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDictDeleteDict))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DictHTTPClientImpl) GetDict(ctx context.Context, in *GetDictRequest, opts ...http.CallOption) (*GetDictReply, error) {
	var out GetDictReply
	pattern := "/api/v1/dict/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDictGetDict))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DictHTTPClientImpl) ListDict(ctx context.Context, in *ListDictRequest, opts ...http.CallOption) (*ListDictReply, error) {
	var out ListDictReply
	pattern := "/api/v1/dict/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDictListDict))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DictHTTPClientImpl) ListMyAlarmPage(ctx context.Context, in *ListMyAlarmPageRequest, opts ...http.CallOption) (*ListMyAlarmPageReply, error) {
	var out ListMyAlarmPageReply
	pattern := "/api/v1/alarm_page/my/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDictListMyAlarmPage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DictHTTPClientImpl) MyAlarmPagesConfig(ctx context.Context, in *MyAlarmPagesConfigRequest, opts ...http.CallOption) (*MyAlarmPagesConfigReply, error) {
	var out MyAlarmPagesConfigReply
	pattern := "/api/v1/alarm_page/my/list/config"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDictMyAlarmPagesConfig))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DictHTTPClientImpl) SelectDict(ctx context.Context, in *SelectDictRequest, opts ...http.CallOption) (*SelectDictReply, error) {
	var out SelectDictReply
	pattern := "/api/v1/dict/select"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDictSelectDict))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DictHTTPClientImpl) UpdateDict(ctx context.Context, in *UpdateDictRequest, opts ...http.CallOption) (*UpdateDictReply, error) {
	var out UpdateDictReply
	pattern := "/api/v1/dict/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDictUpdateDict))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
