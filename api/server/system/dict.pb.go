// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v3.19.4
// source: server/system/dict.proto

package system

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	api "prometheus-manager/api"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 创建字典请求参数
type CreateDictRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 字典名称, 长度1-20
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 字典分类 枚举类型
	Category api.Category `protobuf:"varint,3,opt,name=category,proto3,enum=api.Category" json:"category,omitempty"`
	// 字典颜色, 用于前端渲染tag相关颜色用, 非必需
	Color string `protobuf:"bytes,4,opt,name=color,proto3" json:"color,omitempty"`
	// 字典备注
	Remark string `protobuf:"bytes,6,opt,name=remark,proto3" json:"remark,omitempty"`
}

func (x *CreateDictRequest) Reset() {
	*x = CreateDictRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_system_dict_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDictRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDictRequest) ProtoMessage() {}

func (x *CreateDictRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_system_dict_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDictRequest.ProtoReflect.Descriptor instead.
func (*CreateDictRequest) Descriptor() ([]byte, []int) {
	return file_server_system_dict_proto_rawDescGZIP(), []int{0}
}

func (x *CreateDictRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateDictRequest) GetCategory() api.Category {
	if x != nil {
		return x.Category
	}
	return api.Category(0)
}

func (x *CreateDictRequest) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *CreateDictRequest) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

// 创建字典响应参数
type CreateDictReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 创建成功后的字典ID
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateDictReply) Reset() {
	*x = CreateDictReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_system_dict_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDictReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDictReply) ProtoMessage() {}

func (x *CreateDictReply) ProtoReflect() protoreflect.Message {
	mi := &file_server_system_dict_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDictReply.ProtoReflect.Descriptor instead.
func (*CreateDictReply) Descriptor() ([]byte, []int) {
	return file_server_system_dict_proto_rawDescGZIP(), []int{1}
}

func (x *CreateDictReply) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 更新字典请求参数
type UpdateDictRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 需要更新的字典ID
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 字典名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 字典分类
	Category api.Category `protobuf:"varint,3,opt,name=category,proto3,enum=api.Category" json:"category,omitempty"`
	// 字典颜色
	Color string `protobuf:"bytes,4,opt,name=color,proto3" json:"color,omitempty"`
	// 字典备注
	Remark string `protobuf:"bytes,6,opt,name=remark,proto3" json:"remark,omitempty"`
	// 状态
	Status api.Status `protobuf:"varint,7,opt,name=status,proto3,enum=api.Status" json:"status,omitempty"`
}

func (x *UpdateDictRequest) Reset() {
	*x = UpdateDictRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_system_dict_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDictRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDictRequest) ProtoMessage() {}

func (x *UpdateDictRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_system_dict_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDictRequest.ProtoReflect.Descriptor instead.
func (*UpdateDictRequest) Descriptor() ([]byte, []int) {
	return file_server_system_dict_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateDictRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateDictRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateDictRequest) GetCategory() api.Category {
	if x != nil {
		return x.Category
	}
	return api.Category(0)
}

func (x *UpdateDictRequest) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *UpdateDictRequest) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *UpdateDictRequest) GetStatus() api.Status {
	if x != nil {
		return x.Status
	}
	return api.Status(0)
}

// 更新字典响应参数
type UpdateDictReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 更新成功后的字典ID
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *UpdateDictReply) Reset() {
	*x = UpdateDictReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_system_dict_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDictReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDictReply) ProtoMessage() {}

func (x *UpdateDictReply) ProtoReflect() protoreflect.Message {
	mi := &file_server_system_dict_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDictReply.ProtoReflect.Descriptor instead.
func (*UpdateDictReply) Descriptor() ([]byte, []int) {
	return file_server_system_dict_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateDictReply) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 更新字典状态请求参数
type BatchUpdateDictStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 需要更新的字典ID列表
	Ids []uint32 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	// 字典状态
	Status api.Status `protobuf:"varint,2,opt,name=status,proto3,enum=api.Status" json:"status,omitempty"`
}

func (x *BatchUpdateDictStatusRequest) Reset() {
	*x = BatchUpdateDictStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_system_dict_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchUpdateDictStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchUpdateDictStatusRequest) ProtoMessage() {}

func (x *BatchUpdateDictStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_system_dict_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchUpdateDictStatusRequest.ProtoReflect.Descriptor instead.
func (*BatchUpdateDictStatusRequest) Descriptor() ([]byte, []int) {
	return file_server_system_dict_proto_rawDescGZIP(), []int{4}
}

func (x *BatchUpdateDictStatusRequest) GetIds() []uint32 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *BatchUpdateDictStatusRequest) GetStatus() api.Status {
	if x != nil {
		return x.Status
	}
	return api.Status(0)
}

// 更新字典状态响应参数
type BatchUpdateDictStatusReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 更新成功后的字典ID列表
	Ids []uint32 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *BatchUpdateDictStatusReply) Reset() {
	*x = BatchUpdateDictStatusReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_system_dict_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchUpdateDictStatusReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchUpdateDictStatusReply) ProtoMessage() {}

func (x *BatchUpdateDictStatusReply) ProtoReflect() protoreflect.Message {
	mi := &file_server_system_dict_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchUpdateDictStatusReply.ProtoReflect.Descriptor instead.
func (*BatchUpdateDictStatusReply) Descriptor() ([]byte, []int) {
	return file_server_system_dict_proto_rawDescGZIP(), []int{5}
}

func (x *BatchUpdateDictStatusReply) GetIds() []uint32 {
	if x != nil {
		return x.Ids
	}
	return nil
}

// 删除字典请求参数
type DeleteDictRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 需要删除的字典ID
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteDictRequest) Reset() {
	*x = DeleteDictRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_system_dict_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDictRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDictRequest) ProtoMessage() {}

func (x *DeleteDictRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_system_dict_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDictRequest.ProtoReflect.Descriptor instead.
func (*DeleteDictRequest) Descriptor() ([]byte, []int) {
	return file_server_system_dict_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteDictRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 删除字典响应参数
type DeleteDictReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 删除成功后的字典ID
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteDictReply) Reset() {
	*x = DeleteDictReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_system_dict_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDictReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDictReply) ProtoMessage() {}

func (x *DeleteDictReply) ProtoReflect() protoreflect.Message {
	mi := &file_server_system_dict_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDictReply.ProtoReflect.Descriptor instead.
func (*DeleteDictReply) Descriptor() ([]byte, []int) {
	return file_server_system_dict_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteDictReply) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 批量删除字典列表请求参数
type BatchDeleteDictRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 需要删除的字典ID列表
	Ids []uint32 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *BatchDeleteDictRequest) Reset() {
	*x = BatchDeleteDictRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_system_dict_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchDeleteDictRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchDeleteDictRequest) ProtoMessage() {}

func (x *BatchDeleteDictRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_system_dict_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchDeleteDictRequest.ProtoReflect.Descriptor instead.
func (*BatchDeleteDictRequest) Descriptor() ([]byte, []int) {
	return file_server_system_dict_proto_rawDescGZIP(), []int{8}
}

func (x *BatchDeleteDictRequest) GetIds() []uint32 {
	if x != nil {
		return x.Ids
	}
	return nil
}

// 批量删除字典列表响应参数
type BatchDeleteDictReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 删除成功后的字典ID列表
	Ids []uint32 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *BatchDeleteDictReply) Reset() {
	*x = BatchDeleteDictReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_system_dict_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchDeleteDictReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchDeleteDictReply) ProtoMessage() {}

func (x *BatchDeleteDictReply) ProtoReflect() protoreflect.Message {
	mi := &file_server_system_dict_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchDeleteDictReply.ProtoReflect.Descriptor instead.
func (*BatchDeleteDictReply) Descriptor() ([]byte, []int) {
	return file_server_system_dict_proto_rawDescGZIP(), []int{9}
}

func (x *BatchDeleteDictReply) GetIds() []uint32 {
	if x != nil {
		return x.Ids
	}
	return nil
}

// 获取字典请求参数
type GetDictRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 需要获取的字典ID
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 是否获取已删除的字典
	IsDeleted bool `protobuf:"varint,2,opt,name=isDeleted,proto3" json:"isDeleted,omitempty"`
}

func (x *GetDictRequest) Reset() {
	*x = GetDictRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_system_dict_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDictRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDictRequest) ProtoMessage() {}

func (x *GetDictRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_system_dict_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDictRequest.ProtoReflect.Descriptor instead.
func (*GetDictRequest) Descriptor() ([]byte, []int) {
	return file_server_system_dict_proto_rawDescGZIP(), []int{10}
}

func (x *GetDictRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetDictRequest) GetIsDeleted() bool {
	if x != nil {
		return x.IsDeleted
	}
	return false
}

// 获取字典响应参数
type GetDictReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 字典详情
	PromDict *api.DictV1 `protobuf:"bytes,1,opt,name=promDict,proto3" json:"promDict,omitempty"`
}

func (x *GetDictReply) Reset() {
	*x = GetDictReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_system_dict_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDictReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDictReply) ProtoMessage() {}

func (x *GetDictReply) ProtoReflect() protoreflect.Message {
	mi := &file_server_system_dict_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDictReply.ProtoReflect.Descriptor instead.
func (*GetDictReply) Descriptor() ([]byte, []int) {
	return file_server_system_dict_proto_rawDescGZIP(), []int{11}
}

func (x *GetDictReply) GetPromDict() *api.DictV1 {
	if x != nil {
		return x.PromDict
	}
	return nil
}

// 获取字典列表请求参数参数
type ListDictRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 是否获取已删除的字典
	IsDeleted bool `protobuf:"varint,1,opt,name=isDeleted,proto3" json:"isDeleted,omitempty"`
	// 分页参数
	Page *api.PageRequest `protobuf:"bytes,2,opt,name=page,proto3" json:"page,omitempty"`
	// 关键字
	Keyword string `protobuf:"bytes,3,opt,name=keyword,proto3" json:"keyword,omitempty"`
	// 分类
	Category api.Category `protobuf:"varint,4,opt,name=category,proto3,enum=api.Category" json:"category,omitempty"`
	// 状态
	Status api.Status `protobuf:"varint,5,opt,name=status,proto3,enum=api.Status" json:"status,omitempty"`
}

func (x *ListDictRequest) Reset() {
	*x = ListDictRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_system_dict_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDictRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDictRequest) ProtoMessage() {}

func (x *ListDictRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_system_dict_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDictRequest.ProtoReflect.Descriptor instead.
func (*ListDictRequest) Descriptor() ([]byte, []int) {
	return file_server_system_dict_proto_rawDescGZIP(), []int{12}
}

func (x *ListDictRequest) GetIsDeleted() bool {
	if x != nil {
		return x.IsDeleted
	}
	return false
}

func (x *ListDictRequest) GetPage() *api.PageRequest {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *ListDictRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *ListDictRequest) GetCategory() api.Category {
	if x != nil {
		return x.Category
	}
	return api.Category(0)
}

func (x *ListDictRequest) GetStatus() api.Status {
	if x != nil {
		return x.Status
	}
	return api.Status(0)
}

// 获取字典列表响应参数
type ListDictReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 分页参数
	Page *api.PageReply `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	// 字典列表
	List []*api.DictV1 `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ListDictReply) Reset() {
	*x = ListDictReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_system_dict_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDictReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDictReply) ProtoMessage() {}

func (x *ListDictReply) ProtoReflect() protoreflect.Message {
	mi := &file_server_system_dict_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDictReply.ProtoReflect.Descriptor instead.
func (*ListDictReply) Descriptor() ([]byte, []int) {
	return file_server_system_dict_proto_rawDescGZIP(), []int{13}
}

func (x *ListDictReply) GetPage() *api.PageReply {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *ListDictReply) GetList() []*api.DictV1 {
	if x != nil {
		return x.List
	}
	return nil
}

// 获取字典列表请求参数
type SelectDictRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 是否获取已删除的字典
	IsDeleted bool `protobuf:"varint,1,opt,name=isDeleted,proto3" json:"isDeleted,omitempty"`
	// 分页参数
	Page *api.PageRequest `protobuf:"bytes,2,opt,name=page,proto3" json:"page,omitempty"`
	// 关键字
	Keyword string `protobuf:"bytes,3,opt,name=keyword,proto3" json:"keyword,omitempty"`
	// 分类
	Category api.Category `protobuf:"varint,4,opt,name=category,proto3,enum=api.Category" json:"category,omitempty"`
	// 状态
	Status api.Status `protobuf:"varint,5,opt,name=status,proto3,enum=api.Status" json:"status,omitempty"`
}

func (x *SelectDictRequest) Reset() {
	*x = SelectDictRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_system_dict_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectDictRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectDictRequest) ProtoMessage() {}

func (x *SelectDictRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_system_dict_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectDictRequest.ProtoReflect.Descriptor instead.
func (*SelectDictRequest) Descriptor() ([]byte, []int) {
	return file_server_system_dict_proto_rawDescGZIP(), []int{14}
}

func (x *SelectDictRequest) GetIsDeleted() bool {
	if x != nil {
		return x.IsDeleted
	}
	return false
}

func (x *SelectDictRequest) GetPage() *api.PageRequest {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *SelectDictRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *SelectDictRequest) GetCategory() api.Category {
	if x != nil {
		return x.Category
	}
	return api.Category(0)
}

func (x *SelectDictRequest) GetStatus() api.Status {
	if x != nil {
		return x.Status
	}
	return api.Status(0)
}

// 获取字典列表响应参数
type SelectDictReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 分页参数
	Page *api.PageReply `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	// 字典列表
	List []*api.DictSelectV1 `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *SelectDictReply) Reset() {
	*x = SelectDictReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_system_dict_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectDictReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectDictReply) ProtoMessage() {}

func (x *SelectDictReply) ProtoReflect() protoreflect.Message {
	mi := &file_server_system_dict_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectDictReply.ProtoReflect.Descriptor instead.
func (*SelectDictReply) Descriptor() ([]byte, []int) {
	return file_server_system_dict_proto_rawDescGZIP(), []int{15}
}

func (x *SelectDictReply) GetPage() *api.PageReply {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *SelectDictReply) GetList() []*api.DictSelectV1 {
	if x != nil {
		return x.List
	}
	return nil
}

var File_server_system_dict_proto protoreflect.FileDescriptor

var file_server_system_dict_proto_rawDesc = []byte{
	0x0a, 0x18, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f,
	0x64, 0x69, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x97, 0x01,
	0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x14, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x82, 0x01, 0x04, 0x10, 0x01, 0x20, 0x00, 0x52,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x21, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x44, 0x69, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0xf2, 0x01, 0x0a, 0x11, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01,
	0x18, 0x14, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x82, 0x01,
	0x04, 0x10, 0x01, 0x20, 0x00, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12,
	0x1d, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x0a, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x20,
	0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xff, 0x01, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x21, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x63, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x6d, 0x0a, 0x1c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x44, 0x69, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x42,
	0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x18, 0x01, 0x52, 0x03, 0x69, 0x64, 0x73,
	0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0a, 0xfa,
	0x42, 0x07, 0x82, 0x01, 0x04, 0x10, 0x01, 0x20, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x2e, 0x0a, 0x1a, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x44, 0x69, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x03, 0x69, 0x64,
	0x73, 0x22, 0x2c, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x69, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x21, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x69, 0x63, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x36, 0x0a, 0x16, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x44, 0x69, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x03,
	0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01,
	0x04, 0x08, 0x01, 0x18, 0x01, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x28, 0x0a, 0x14, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x69, 0x63, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x03, 0x69, 0x64, 0x73, 0x22, 0x47, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22, 0x37, 0x0a,
	0x0c, 0x47, 0x65, 0x74, 0x44, 0x69, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x27, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x6d, 0x44, 0x69, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x69, 0x63, 0x74, 0x56, 0x31, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x6d, 0x44, 0x69, 0x63, 0x74, 0x22, 0xc8, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x44,
	0x69, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69,
	0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x21,
	0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x14, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x29, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x54, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x63, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x22, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x69, 0x63, 0x74, 0x56,
	0x31, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xca, 0x01, 0x0a, 0x11, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x44, 0x69, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x21, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x14, 0x52, 0x07, 0x6b, 0x65, 0x79,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x29, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12,
	0x23, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x5c, 0x0a, 0x0f, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x44, 0x69,
	0x63, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x22, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x44, 0x69, 0x63, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x56, 0x31, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x32, 0xf7, 0x07, 0x0a, 0x04, 0x44, 0x69, 0x63, 0x74, 0x12, 0x76, 0x0a, 0x0a, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x63, 0x74, 0x12, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x63, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x3a, 0x01, 0x2a, 0x22, 0x13,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69, 0x63, 0x74, 0x2f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x12, 0x76, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x63,
	0x74, 0x12, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x63, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x44, 0x69, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1e, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x18, 0x3a, 0x01, 0x2a, 0x22, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x64, 0x69, 0x63, 0x74, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0xa4, 0x01, 0x0a, 0x15,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x63, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x3a, 0x01, 0x2a,
	0x22, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69, 0x63, 0x74, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x12, 0x76, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x69, 0x63, 0x74,
	0x12, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x69, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x44, 0x69, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x18, 0x3a, 0x01, 0x2a, 0x22, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64,
	0x69, 0x63, 0x74, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x8b, 0x01, 0x0a, 0x0f, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x69, 0x63, 0x74, 0x12, 0x29,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x69,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x69, 0x63, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x01, 0x2a, 0x22, 0x19, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69, 0x63, 0x74, 0x2f, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x6a, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x44,
	0x69, 0x63, 0x74, 0x12, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69,
	0x63, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x3a,
	0x01, 0x2a, 0x22, 0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69, 0x63, 0x74,
	0x2f, 0x67, 0x65, 0x74, 0x12, 0x6e, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x63, 0x74,
	0x12, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x63,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x3a, 0x01,
	0x2a, 0x22, 0x11, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69, 0x63, 0x74, 0x2f,
	0x6c, 0x69, 0x73, 0x74, 0x12, 0x76, 0x0a, 0x0a, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x44, 0x69,
	0x63, 0x74, 0x12, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x44, 0x69, 0x63,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x44, 0x69, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1e, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x18, 0x3a, 0x01, 0x2a, 0x22, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x64, 0x69, 0x63, 0x74, 0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x42, 0x42, 0x0a, 0x11,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x50, 0x01, 0x5a, 0x2b, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x2d,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x3b, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_server_system_dict_proto_rawDescOnce sync.Once
	file_server_system_dict_proto_rawDescData = file_server_system_dict_proto_rawDesc
)

func file_server_system_dict_proto_rawDescGZIP() []byte {
	file_server_system_dict_proto_rawDescOnce.Do(func() {
		file_server_system_dict_proto_rawDescData = protoimpl.X.CompressGZIP(file_server_system_dict_proto_rawDescData)
	})
	return file_server_system_dict_proto_rawDescData
}

var file_server_system_dict_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_server_system_dict_proto_goTypes = []interface{}{
	(*CreateDictRequest)(nil),            // 0: api.server.system.CreateDictRequest
	(*CreateDictReply)(nil),              // 1: api.server.system.CreateDictReply
	(*UpdateDictRequest)(nil),            // 2: api.server.system.UpdateDictRequest
	(*UpdateDictReply)(nil),              // 3: api.server.system.UpdateDictReply
	(*BatchUpdateDictStatusRequest)(nil), // 4: api.server.system.BatchUpdateDictStatusRequest
	(*BatchUpdateDictStatusReply)(nil),   // 5: api.server.system.BatchUpdateDictStatusReply
	(*DeleteDictRequest)(nil),            // 6: api.server.system.DeleteDictRequest
	(*DeleteDictReply)(nil),              // 7: api.server.system.DeleteDictReply
	(*BatchDeleteDictRequest)(nil),       // 8: api.server.system.BatchDeleteDictRequest
	(*BatchDeleteDictReply)(nil),         // 9: api.server.system.BatchDeleteDictReply
	(*GetDictRequest)(nil),               // 10: api.server.system.GetDictRequest
	(*GetDictReply)(nil),                 // 11: api.server.system.GetDictReply
	(*ListDictRequest)(nil),              // 12: api.server.system.ListDictRequest
	(*ListDictReply)(nil),                // 13: api.server.system.ListDictReply
	(*SelectDictRequest)(nil),            // 14: api.server.system.SelectDictRequest
	(*SelectDictReply)(nil),              // 15: api.server.system.SelectDictReply
	(api.Category)(0),                    // 16: api.Category
	(api.Status)(0),                      // 17: api.Status
	(*api.DictV1)(nil),                   // 18: api.DictV1
	(*api.PageRequest)(nil),              // 19: api.PageRequest
	(*api.PageReply)(nil),                // 20: api.PageReply
	(*api.DictSelectV1)(nil),             // 21: api.DictSelectV1
}
var file_server_system_dict_proto_depIdxs = []int32{
	16, // 0: api.server.system.CreateDictRequest.category:type_name -> api.Category
	16, // 1: api.server.system.UpdateDictRequest.category:type_name -> api.Category
	17, // 2: api.server.system.UpdateDictRequest.status:type_name -> api.Status
	17, // 3: api.server.system.BatchUpdateDictStatusRequest.status:type_name -> api.Status
	18, // 4: api.server.system.GetDictReply.promDict:type_name -> api.DictV1
	19, // 5: api.server.system.ListDictRequest.page:type_name -> api.PageRequest
	16, // 6: api.server.system.ListDictRequest.category:type_name -> api.Category
	17, // 7: api.server.system.ListDictRequest.status:type_name -> api.Status
	20, // 8: api.server.system.ListDictReply.page:type_name -> api.PageReply
	18, // 9: api.server.system.ListDictReply.list:type_name -> api.DictV1
	19, // 10: api.server.system.SelectDictRequest.page:type_name -> api.PageRequest
	16, // 11: api.server.system.SelectDictRequest.category:type_name -> api.Category
	17, // 12: api.server.system.SelectDictRequest.status:type_name -> api.Status
	20, // 13: api.server.system.SelectDictReply.page:type_name -> api.PageReply
	21, // 14: api.server.system.SelectDictReply.list:type_name -> api.DictSelectV1
	0,  // 15: api.server.system.Dict.CreateDict:input_type -> api.server.system.CreateDictRequest
	2,  // 16: api.server.system.Dict.UpdateDict:input_type -> api.server.system.UpdateDictRequest
	4,  // 17: api.server.system.Dict.BatchUpdateDictStatus:input_type -> api.server.system.BatchUpdateDictStatusRequest
	6,  // 18: api.server.system.Dict.DeleteDict:input_type -> api.server.system.DeleteDictRequest
	8,  // 19: api.server.system.Dict.BatchDeleteDict:input_type -> api.server.system.BatchDeleteDictRequest
	10, // 20: api.server.system.Dict.GetDict:input_type -> api.server.system.GetDictRequest
	12, // 21: api.server.system.Dict.ListDict:input_type -> api.server.system.ListDictRequest
	14, // 22: api.server.system.Dict.SelectDict:input_type -> api.server.system.SelectDictRequest
	1,  // 23: api.server.system.Dict.CreateDict:output_type -> api.server.system.CreateDictReply
	3,  // 24: api.server.system.Dict.UpdateDict:output_type -> api.server.system.UpdateDictReply
	5,  // 25: api.server.system.Dict.BatchUpdateDictStatus:output_type -> api.server.system.BatchUpdateDictStatusReply
	7,  // 26: api.server.system.Dict.DeleteDict:output_type -> api.server.system.DeleteDictReply
	9,  // 27: api.server.system.Dict.BatchDeleteDict:output_type -> api.server.system.BatchDeleteDictReply
	11, // 28: api.server.system.Dict.GetDict:output_type -> api.server.system.GetDictReply
	13, // 29: api.server.system.Dict.ListDict:output_type -> api.server.system.ListDictReply
	15, // 30: api.server.system.Dict.SelectDict:output_type -> api.server.system.SelectDictReply
	23, // [23:31] is the sub-list for method output_type
	15, // [15:23] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_server_system_dict_proto_init() }
func file_server_system_dict_proto_init() {
	if File_server_system_dict_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_server_system_dict_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDictRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_system_dict_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDictReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_system_dict_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDictRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_system_dict_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDictReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_system_dict_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchUpdateDictStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_system_dict_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchUpdateDictStatusReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_system_dict_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDictRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_system_dict_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDictReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_system_dict_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchDeleteDictRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_system_dict_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchDeleteDictReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_system_dict_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDictRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_system_dict_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDictReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_system_dict_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDictRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_system_dict_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDictReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_system_dict_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectDictRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_system_dict_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectDictReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_server_system_dict_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_server_system_dict_proto_goTypes,
		DependencyIndexes: file_server_system_dict_proto_depIdxs,
		MessageInfos:      file_server_system_dict_proto_msgTypes,
	}.Build()
	File_server_system_dict_proto = out.File
	file_server_system_dict_proto_rawDesc = nil
	file_server_system_dict_proto_goTypes = nil
	file_server_system_dict_proto_depIdxs = nil
}
