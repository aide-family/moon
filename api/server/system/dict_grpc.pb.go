// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: server/system/dict.proto

package system

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Dict_CreateDict_FullMethodName            = "/api.server.system.Dict/CreateDict"
	Dict_UpdateDict_FullMethodName            = "/api.server.system.Dict/UpdateDict"
	Dict_BatchUpdateDictStatus_FullMethodName = "/api.server.system.Dict/BatchUpdateDictStatus"
	Dict_DeleteDict_FullMethodName            = "/api.server.system.Dict/DeleteDict"
	Dict_BatchDeleteDict_FullMethodName       = "/api.server.system.Dict/BatchDeleteDict"
	Dict_GetDict_FullMethodName               = "/api.server.system.Dict/GetDict"
	Dict_ListDict_FullMethodName              = "/api.server.system.Dict/ListDict"
	Dict_SelectDict_FullMethodName            = "/api.server.system.Dict/SelectDict"
	Dict_CountAlarmPage_FullMethodName        = "/api.server.system.Dict/CountAlarmPage"
	Dict_ListMyAlarmPage_FullMethodName       = "/api.server.system.Dict/ListMyAlarmPage"
	Dict_MyAlarmPagesConfig_FullMethodName    = "/api.server.system.Dict/MyAlarmPagesConfig"
)

// DictClient is the client API for Dict service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DictClient interface {
	// 创建字典
	CreateDict(ctx context.Context, in *CreateDictRequest, opts ...grpc.CallOption) (*CreateDictReply, error)
	// 更新字典
	UpdateDict(ctx context.Context, in *UpdateDictRequest, opts ...grpc.CallOption) (*UpdateDictReply, error)
	// 更新字典状态
	BatchUpdateDictStatus(ctx context.Context, in *BatchUpdateDictStatusRequest, opts ...grpc.CallOption) (*BatchUpdateDictStatusReply, error)
	// 删除字典
	DeleteDict(ctx context.Context, in *DeleteDictRequest, opts ...grpc.CallOption) (*DeleteDictReply, error)
	// 删除字典列表
	BatchDeleteDict(ctx context.Context, in *BatchDeleteDictRequest, opts ...grpc.CallOption) (*BatchDeleteDictReply, error)
	// 获取字典
	GetDict(ctx context.Context, in *GetDictRequest, opts ...grpc.CallOption) (*GetDictReply, error)
	// 获取字典列表
	ListDict(ctx context.Context, in *ListDictRequest, opts ...grpc.CallOption) (*ListDictReply, error)
	// 获取字典列表, 用于下拉选择
	SelectDict(ctx context.Context, in *SelectDictRequest, opts ...grpc.CallOption) (*SelectDictReply, error)
	// 统计各告警页面告警的数量
	CountAlarmPage(ctx context.Context, in *CountAlarmPageRequest, opts ...grpc.CallOption) (*CountAlarmPageReply, error)
	// 我的告警页面列表
	ListMyAlarmPage(ctx context.Context, in *ListMyAlarmPageRequest, opts ...grpc.CallOption) (*ListMyAlarmPageReply, error)
	// 配置我的告警页面列表
	MyAlarmPagesConfig(ctx context.Context, in *MyAlarmPagesConfigRequest, opts ...grpc.CallOption) (*MyAlarmPagesConfigReply, error)
}

type dictClient struct {
	cc grpc.ClientConnInterface
}

func NewDictClient(cc grpc.ClientConnInterface) DictClient {
	return &dictClient{cc}
}

func (c *dictClient) CreateDict(ctx context.Context, in *CreateDictRequest, opts ...grpc.CallOption) (*CreateDictReply, error) {
	out := new(CreateDictReply)
	err := c.cc.Invoke(ctx, Dict_CreateDict_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictClient) UpdateDict(ctx context.Context, in *UpdateDictRequest, opts ...grpc.CallOption) (*UpdateDictReply, error) {
	out := new(UpdateDictReply)
	err := c.cc.Invoke(ctx, Dict_UpdateDict_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictClient) BatchUpdateDictStatus(ctx context.Context, in *BatchUpdateDictStatusRequest, opts ...grpc.CallOption) (*BatchUpdateDictStatusReply, error) {
	out := new(BatchUpdateDictStatusReply)
	err := c.cc.Invoke(ctx, Dict_BatchUpdateDictStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictClient) DeleteDict(ctx context.Context, in *DeleteDictRequest, opts ...grpc.CallOption) (*DeleteDictReply, error) {
	out := new(DeleteDictReply)
	err := c.cc.Invoke(ctx, Dict_DeleteDict_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictClient) BatchDeleteDict(ctx context.Context, in *BatchDeleteDictRequest, opts ...grpc.CallOption) (*BatchDeleteDictReply, error) {
	out := new(BatchDeleteDictReply)
	err := c.cc.Invoke(ctx, Dict_BatchDeleteDict_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictClient) GetDict(ctx context.Context, in *GetDictRequest, opts ...grpc.CallOption) (*GetDictReply, error) {
	out := new(GetDictReply)
	err := c.cc.Invoke(ctx, Dict_GetDict_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictClient) ListDict(ctx context.Context, in *ListDictRequest, opts ...grpc.CallOption) (*ListDictReply, error) {
	out := new(ListDictReply)
	err := c.cc.Invoke(ctx, Dict_ListDict_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictClient) SelectDict(ctx context.Context, in *SelectDictRequest, opts ...grpc.CallOption) (*SelectDictReply, error) {
	out := new(SelectDictReply)
	err := c.cc.Invoke(ctx, Dict_SelectDict_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictClient) CountAlarmPage(ctx context.Context, in *CountAlarmPageRequest, opts ...grpc.CallOption) (*CountAlarmPageReply, error) {
	out := new(CountAlarmPageReply)
	err := c.cc.Invoke(ctx, Dict_CountAlarmPage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictClient) ListMyAlarmPage(ctx context.Context, in *ListMyAlarmPageRequest, opts ...grpc.CallOption) (*ListMyAlarmPageReply, error) {
	out := new(ListMyAlarmPageReply)
	err := c.cc.Invoke(ctx, Dict_ListMyAlarmPage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictClient) MyAlarmPagesConfig(ctx context.Context, in *MyAlarmPagesConfigRequest, opts ...grpc.CallOption) (*MyAlarmPagesConfigReply, error) {
	out := new(MyAlarmPagesConfigReply)
	err := c.cc.Invoke(ctx, Dict_MyAlarmPagesConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DictServer is the server API for Dict service.
// All implementations must embed UnimplementedDictServer
// for forward compatibility
type DictServer interface {
	// 创建字典
	CreateDict(context.Context, *CreateDictRequest) (*CreateDictReply, error)
	// 更新字典
	UpdateDict(context.Context, *UpdateDictRequest) (*UpdateDictReply, error)
	// 更新字典状态
	BatchUpdateDictStatus(context.Context, *BatchUpdateDictStatusRequest) (*BatchUpdateDictStatusReply, error)
	// 删除字典
	DeleteDict(context.Context, *DeleteDictRequest) (*DeleteDictReply, error)
	// 删除字典列表
	BatchDeleteDict(context.Context, *BatchDeleteDictRequest) (*BatchDeleteDictReply, error)
	// 获取字典
	GetDict(context.Context, *GetDictRequest) (*GetDictReply, error)
	// 获取字典列表
	ListDict(context.Context, *ListDictRequest) (*ListDictReply, error)
	// 获取字典列表, 用于下拉选择
	SelectDict(context.Context, *SelectDictRequest) (*SelectDictReply, error)
	// 统计各告警页面告警的数量
	CountAlarmPage(context.Context, *CountAlarmPageRequest) (*CountAlarmPageReply, error)
	// 我的告警页面列表
	ListMyAlarmPage(context.Context, *ListMyAlarmPageRequest) (*ListMyAlarmPageReply, error)
	// 配置我的告警页面列表
	MyAlarmPagesConfig(context.Context, *MyAlarmPagesConfigRequest) (*MyAlarmPagesConfigReply, error)
	mustEmbedUnimplementedDictServer()
}

// UnimplementedDictServer must be embedded to have forward compatible implementations.
type UnimplementedDictServer struct {
}

func (UnimplementedDictServer) CreateDict(context.Context, *CreateDictRequest) (*CreateDictReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDict not implemented")
}
func (UnimplementedDictServer) UpdateDict(context.Context, *UpdateDictRequest) (*UpdateDictReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDict not implemented")
}
func (UnimplementedDictServer) BatchUpdateDictStatus(context.Context, *BatchUpdateDictStatusRequest) (*BatchUpdateDictStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchUpdateDictStatus not implemented")
}
func (UnimplementedDictServer) DeleteDict(context.Context, *DeleteDictRequest) (*DeleteDictReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDict not implemented")
}
func (UnimplementedDictServer) BatchDeleteDict(context.Context, *BatchDeleteDictRequest) (*BatchDeleteDictReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeleteDict not implemented")
}
func (UnimplementedDictServer) GetDict(context.Context, *GetDictRequest) (*GetDictReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDict not implemented")
}
func (UnimplementedDictServer) ListDict(context.Context, *ListDictRequest) (*ListDictReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDict not implemented")
}
func (UnimplementedDictServer) SelectDict(context.Context, *SelectDictRequest) (*SelectDictReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectDict not implemented")
}
func (UnimplementedDictServer) CountAlarmPage(context.Context, *CountAlarmPageRequest) (*CountAlarmPageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountAlarmPage not implemented")
}
func (UnimplementedDictServer) ListMyAlarmPage(context.Context, *ListMyAlarmPageRequest) (*ListMyAlarmPageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMyAlarmPage not implemented")
}
func (UnimplementedDictServer) MyAlarmPagesConfig(context.Context, *MyAlarmPagesConfigRequest) (*MyAlarmPagesConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MyAlarmPagesConfig not implemented")
}
func (UnimplementedDictServer) mustEmbedUnimplementedDictServer() {}

// UnsafeDictServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DictServer will
// result in compilation errors.
type UnsafeDictServer interface {
	mustEmbedUnimplementedDictServer()
}

func RegisterDictServer(s grpc.ServiceRegistrar, srv DictServer) {
	s.RegisterService(&Dict_ServiceDesc, srv)
}

func _Dict_CreateDict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDictRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictServer).CreateDict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dict_CreateDict_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictServer).CreateDict(ctx, req.(*CreateDictRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dict_UpdateDict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDictRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictServer).UpdateDict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dict_UpdateDict_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictServer).UpdateDict(ctx, req.(*UpdateDictRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dict_BatchUpdateDictStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchUpdateDictStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictServer).BatchUpdateDictStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dict_BatchUpdateDictStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictServer).BatchUpdateDictStatus(ctx, req.(*BatchUpdateDictStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dict_DeleteDict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDictRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictServer).DeleteDict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dict_DeleteDict_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictServer).DeleteDict(ctx, req.(*DeleteDictRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dict_BatchDeleteDict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchDeleteDictRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictServer).BatchDeleteDict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dict_BatchDeleteDict_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictServer).BatchDeleteDict(ctx, req.(*BatchDeleteDictRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dict_GetDict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDictRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictServer).GetDict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dict_GetDict_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictServer).GetDict(ctx, req.(*GetDictRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dict_ListDict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDictRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictServer).ListDict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dict_ListDict_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictServer).ListDict(ctx, req.(*ListDictRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dict_SelectDict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectDictRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictServer).SelectDict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dict_SelectDict_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictServer).SelectDict(ctx, req.(*SelectDictRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dict_CountAlarmPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountAlarmPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictServer).CountAlarmPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dict_CountAlarmPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictServer).CountAlarmPage(ctx, req.(*CountAlarmPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dict_ListMyAlarmPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMyAlarmPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictServer).ListMyAlarmPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dict_ListMyAlarmPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictServer).ListMyAlarmPage(ctx, req.(*ListMyAlarmPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dict_MyAlarmPagesConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyAlarmPagesConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictServer).MyAlarmPagesConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dict_MyAlarmPagesConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictServer).MyAlarmPagesConfig(ctx, req.(*MyAlarmPagesConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Dict_ServiceDesc is the grpc.ServiceDesc for Dict service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Dict_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.server.system.Dict",
	HandlerType: (*DictServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDict",
			Handler:    _Dict_CreateDict_Handler,
		},
		{
			MethodName: "UpdateDict",
			Handler:    _Dict_UpdateDict_Handler,
		},
		{
			MethodName: "BatchUpdateDictStatus",
			Handler:    _Dict_BatchUpdateDictStatus_Handler,
		},
		{
			MethodName: "DeleteDict",
			Handler:    _Dict_DeleteDict_Handler,
		},
		{
			MethodName: "BatchDeleteDict",
			Handler:    _Dict_BatchDeleteDict_Handler,
		},
		{
			MethodName: "GetDict",
			Handler:    _Dict_GetDict_Handler,
		},
		{
			MethodName: "ListDict",
			Handler:    _Dict_ListDict_Handler,
		},
		{
			MethodName: "SelectDict",
			Handler:    _Dict_SelectDict_Handler,
		},
		{
			MethodName: "CountAlarmPage",
			Handler:    _Dict_CountAlarmPage_Handler,
		},
		{
			MethodName: "ListMyAlarmPage",
			Handler:    _Dict_ListMyAlarmPage_Handler,
		},
		{
			MethodName: "MyAlarmPagesConfig",
			Handler:    _Dict_MyAlarmPagesConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server/system/dict.proto",
}
