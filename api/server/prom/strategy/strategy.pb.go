// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: server/prom/strategy/strategy.proto

package strategy

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	api "prometheus-manager/api"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 创建策略请求参数
type CreateStrategyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 策略组ID, 必填, 所属的策略组ID信息
	GroupId uint32 `protobuf:"varint,1,opt,name=groupId,proto3" json:"groupId,omitempty"`
	// 告警名称, 必填, 字符串, 长度限制: 1-255, 正则表达式: ^[a-zA-Z0-9_]+$
	Alert string `protobuf:"bytes,2,opt,name=alert,proto3" json:"alert,omitempty"`
	// 表达式, 必填, promQL表达式
	Expr string `protobuf:"bytes,3,opt,name=expr,proto3" json:"expr,omitempty"`
	// 持续时间,(1s,1m,1h,1d), 对应prometheus的持续时间单位for
	Duration *api.Duration `protobuf:"bytes,4,opt,name=duration,proto3" json:"duration,omitempty"`
	// 标签, keys 长度限制: 1-32, 正则表达式: ^[a-zA-Z0-9_]+$
	Labels map[string]string `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 注解, keys 长度限制: 1-32, 正则表达式: ^[a-zA-Z0-9_]+$
	Annotations map[string]string `protobuf:"bytes,6,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 告警页面ID列表, 对应告警页面的ID
	AlarmPageIds []uint32 `protobuf:"varint,7,rep,packed,name=alarmPageIds,proto3" json:"alarmPageIds,omitempty"`
	// 分类ID列表, 对应字典表ID
	CategoryIds []uint32 `protobuf:"varint,8,rep,packed,name=categoryIds,proto3" json:"categoryIds,omitempty"`
	// 告警级别ID, 对应字典表ID(告警等级维护在字典表中)
	AlarmLevelId uint32 `protobuf:"varint,9,opt,name=alarmLevelId,proto3" json:"alarmLevelId,omitempty"`
	// 备注, 长度限制: 0-255
	Remark string `protobuf:"bytes,10,opt,name=remark,proto3" json:"remark,omitempty"`
	// 数据源
	DataSourceId uint32 `protobuf:"varint,11,opt,name=dataSourceId,proto3" json:"dataSourceId,omitempty"`
	// 最大抑制时常
	MaxSuppress *api.Duration `protobuf:"bytes,12,opt,name=maxSuppress,proto3" json:"maxSuppress,omitempty"`
	// 告警通知间隔
	SendInterval *api.Duration `protobuf:"bytes,13,opt,name=sendInterval,proto3" json:"sendInterval,omitempty"`
	// 是否发送告警通知
	SendRecover bool `protobuf:"varint,14,opt,name=sendRecover,proto3" json:"sendRecover,omitempty"`
}

func (x *CreateStrategyRequest) Reset() {
	*x = CreateStrategyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_prom_strategy_strategy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateStrategyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateStrategyRequest) ProtoMessage() {}

func (x *CreateStrategyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_prom_strategy_strategy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateStrategyRequest.ProtoReflect.Descriptor instead.
func (*CreateStrategyRequest) Descriptor() ([]byte, []int) {
	return file_server_prom_strategy_strategy_proto_rawDescGZIP(), []int{0}
}

func (x *CreateStrategyRequest) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *CreateStrategyRequest) GetAlert() string {
	if x != nil {
		return x.Alert
	}
	return ""
}

func (x *CreateStrategyRequest) GetExpr() string {
	if x != nil {
		return x.Expr
	}
	return ""
}

func (x *CreateStrategyRequest) GetDuration() *api.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *CreateStrategyRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *CreateStrategyRequest) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *CreateStrategyRequest) GetAlarmPageIds() []uint32 {
	if x != nil {
		return x.AlarmPageIds
	}
	return nil
}

func (x *CreateStrategyRequest) GetCategoryIds() []uint32 {
	if x != nil {
		return x.CategoryIds
	}
	return nil
}

func (x *CreateStrategyRequest) GetAlarmLevelId() uint32 {
	if x != nil {
		return x.AlarmLevelId
	}
	return 0
}

func (x *CreateStrategyRequest) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *CreateStrategyRequest) GetDataSourceId() uint32 {
	if x != nil {
		return x.DataSourceId
	}
	return 0
}

func (x *CreateStrategyRequest) GetMaxSuppress() *api.Duration {
	if x != nil {
		return x.MaxSuppress
	}
	return nil
}

func (x *CreateStrategyRequest) GetSendInterval() *api.Duration {
	if x != nil {
		return x.SendInterval
	}
	return nil
}

func (x *CreateStrategyRequest) GetSendRecover() bool {
	if x != nil {
		return x.SendRecover
	}
	return false
}

// 创建策略响应参数
type CreateStrategyReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id 策略ID, 成功返回策略ID
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateStrategyReply) Reset() {
	*x = CreateStrategyReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_prom_strategy_strategy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateStrategyReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateStrategyReply) ProtoMessage() {}

func (x *CreateStrategyReply) ProtoReflect() protoreflect.Message {
	mi := &file_server_prom_strategy_strategy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateStrategyReply.ProtoReflect.Descriptor instead.
func (*CreateStrategyReply) Descriptor() ([]byte, []int) {
	return file_server_prom_strategy_strategy_proto_rawDescGZIP(), []int{1}
}

func (x *CreateStrategyReply) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 更新策略请求参数
type UpdateStrategyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 策略ID, 路径参数, 必填, 大于0
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 策略组ID, 所属的策略组ID信息, 可以替换成新的, 如果不替换则使用原有的
	GroupId uint32 `protobuf:"varint,2,opt,name=groupId,proto3" json:"groupId,omitempty"`
	// 告警名称, 必填, 字符串, 长度限制: 1-255, 正则表达式: ^[a-zA-Z0-9_]+$
	Alert string `protobuf:"bytes,3,opt,name=alert,proto3" json:"alert,omitempty"`
	// 表达式, 必填, promQL表达式
	Expr string `protobuf:"bytes,4,opt,name=expr,proto3" json:"expr,omitempty"`
	// 持续时间,(1s,1m,1h,1d), 对应prometheus的持续时间单位for
	Duration *api.Duration `protobuf:"bytes,5,opt,name=duration,proto3" json:"duration,omitempty"`
	// 标签, keys 长度限制: 1-32, 正则表达式: ^[a-zA-Z0-9_]+$
	Labels map[string]string `protobuf:"bytes,6,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 注解, keys 长度限制: 1-32, 正则表达式: ^[a-zA-Z0-9_]+$
	Annotations map[string]string `protobuf:"bytes,7,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 告警页面ID列表
	AlarmPageIds []uint32 `protobuf:"varint,8,rep,packed,name=alarmPageIds,proto3" json:"alarmPageIds,omitempty"`
	// 分类ID列表, 对应字典表ID
	CategoryIds []uint32 `protobuf:"varint,9,rep,packed,name=categoryIds,proto3" json:"categoryIds,omitempty"`
	// 告警级别ID, 对应字典表ID(告警等级维护在字典表中)
	AlarmLevelId uint32 `protobuf:"varint,10,opt,name=alarmLevelId,proto3" json:"alarmLevelId,omitempty"`
	// 备注, 长度限制: 0-255
	Remark string `protobuf:"bytes,11,opt,name=remark,proto3" json:"remark,omitempty"`
	// 数据源
	DataSourceId uint32 `protobuf:"varint,12,opt,name=dataSourceId,proto3" json:"dataSourceId,omitempty"`
	// 最大抑制时常
	MaxSuppress *api.Duration `protobuf:"bytes,13,opt,name=maxSuppress,proto3" json:"maxSuppress,omitempty"`
	// 告警通知间隔
	SendInterval *api.Duration `protobuf:"bytes,14,opt,name=sendInterval,proto3" json:"sendInterval,omitempty"`
	// 是否发送告警通知
	SendRecover bool `protobuf:"varint,15,opt,name=sendRecover,proto3" json:"sendRecover,omitempty"`
}

func (x *UpdateStrategyRequest) Reset() {
	*x = UpdateStrategyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_prom_strategy_strategy_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateStrategyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateStrategyRequest) ProtoMessage() {}

func (x *UpdateStrategyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_prom_strategy_strategy_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateStrategyRequest.ProtoReflect.Descriptor instead.
func (*UpdateStrategyRequest) Descriptor() ([]byte, []int) {
	return file_server_prom_strategy_strategy_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateStrategyRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateStrategyRequest) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *UpdateStrategyRequest) GetAlert() string {
	if x != nil {
		return x.Alert
	}
	return ""
}

func (x *UpdateStrategyRequest) GetExpr() string {
	if x != nil {
		return x.Expr
	}
	return ""
}

func (x *UpdateStrategyRequest) GetDuration() *api.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *UpdateStrategyRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *UpdateStrategyRequest) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *UpdateStrategyRequest) GetAlarmPageIds() []uint32 {
	if x != nil {
		return x.AlarmPageIds
	}
	return nil
}

func (x *UpdateStrategyRequest) GetCategoryIds() []uint32 {
	if x != nil {
		return x.CategoryIds
	}
	return nil
}

func (x *UpdateStrategyRequest) GetAlarmLevelId() uint32 {
	if x != nil {
		return x.AlarmLevelId
	}
	return 0
}

func (x *UpdateStrategyRequest) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *UpdateStrategyRequest) GetDataSourceId() uint32 {
	if x != nil {
		return x.DataSourceId
	}
	return 0
}

func (x *UpdateStrategyRequest) GetMaxSuppress() *api.Duration {
	if x != nil {
		return x.MaxSuppress
	}
	return nil
}

func (x *UpdateStrategyRequest) GetSendInterval() *api.Duration {
	if x != nil {
		return x.SendInterval
	}
	return nil
}

func (x *UpdateStrategyRequest) GetSendRecover() bool {
	if x != nil {
		return x.SendRecover
	}
	return false
}

// 更新策略响应参数
type UpdateStrategyReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 策略ID, 成功返回策略ID
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *UpdateStrategyReply) Reset() {
	*x = UpdateStrategyReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_prom_strategy_strategy_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateStrategyReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateStrategyReply) ProtoMessage() {}

func (x *UpdateStrategyReply) ProtoReflect() protoreflect.Message {
	mi := &file_server_prom_strategy_strategy_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateStrategyReply.ProtoReflect.Descriptor instead.
func (*UpdateStrategyReply) Descriptor() ([]byte, []int) {
	return file_server_prom_strategy_strategy_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateStrategyReply) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 批量更新策略状态请求参数
type BatchUpdateStrategyStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 策略ID列表, 最少1个, 必须大于0, 唯一
	Ids []uint32 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	// 策略状态, 不能为0
	Status api.Status `protobuf:"varint,2,opt,name=status,proto3,enum=api.Status" json:"status,omitempty"`
}

func (x *BatchUpdateStrategyStatusRequest) Reset() {
	*x = BatchUpdateStrategyStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_prom_strategy_strategy_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchUpdateStrategyStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchUpdateStrategyStatusRequest) ProtoMessage() {}

func (x *BatchUpdateStrategyStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_prom_strategy_strategy_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchUpdateStrategyStatusRequest.ProtoReflect.Descriptor instead.
func (*BatchUpdateStrategyStatusRequest) Descriptor() ([]byte, []int) {
	return file_server_prom_strategy_strategy_proto_rawDescGZIP(), []int{4}
}

func (x *BatchUpdateStrategyStatusRequest) GetIds() []uint32 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *BatchUpdateStrategyStatusRequest) GetStatus() api.Status {
	if x != nil {
		return x.Status
	}
	return api.Status(0)
}

// 批量更新策略状态响应参数
type BatchUpdateStrategyStatusReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 策略ID列表, 成功后返回策略ID列表
	Ids []uint32 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *BatchUpdateStrategyStatusReply) Reset() {
	*x = BatchUpdateStrategyStatusReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_prom_strategy_strategy_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchUpdateStrategyStatusReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchUpdateStrategyStatusReply) ProtoMessage() {}

func (x *BatchUpdateStrategyStatusReply) ProtoReflect() protoreflect.Message {
	mi := &file_server_prom_strategy_strategy_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchUpdateStrategyStatusReply.ProtoReflect.Descriptor instead.
func (*BatchUpdateStrategyStatusReply) Descriptor() ([]byte, []int) {
	return file_server_prom_strategy_strategy_proto_rawDescGZIP(), []int{5}
}

func (x *BatchUpdateStrategyStatusReply) GetIds() []uint32 {
	if x != nil {
		return x.Ids
	}
	return nil
}

// 删除策略请求参数
type DeleteStrategyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 策略ID, 路径参数, 必填, 大于0
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteStrategyRequest) Reset() {
	*x = DeleteStrategyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_prom_strategy_strategy_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteStrategyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteStrategyRequest) ProtoMessage() {}

func (x *DeleteStrategyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_prom_strategy_strategy_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteStrategyRequest.ProtoReflect.Descriptor instead.
func (*DeleteStrategyRequest) Descriptor() ([]byte, []int) {
	return file_server_prom_strategy_strategy_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteStrategyRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 删除策略响应参数
type DeleteStrategyReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 策略ID, 成功返回策略ID
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteStrategyReply) Reset() {
	*x = DeleteStrategyReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_prom_strategy_strategy_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteStrategyReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteStrategyReply) ProtoMessage() {}

func (x *DeleteStrategyReply) ProtoReflect() protoreflect.Message {
	mi := &file_server_prom_strategy_strategy_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteStrategyReply.ProtoReflect.Descriptor instead.
func (*DeleteStrategyReply) Descriptor() ([]byte, []int) {
	return file_server_prom_strategy_strategy_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteStrategyReply) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 批量删除策略请求参数
type BatchDeleteStrategyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 策略ID列表, 最少1个, 必须大于0, 唯一
	Ids []uint32 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *BatchDeleteStrategyRequest) Reset() {
	*x = BatchDeleteStrategyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_prom_strategy_strategy_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchDeleteStrategyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchDeleteStrategyRequest) ProtoMessage() {}

func (x *BatchDeleteStrategyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_prom_strategy_strategy_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchDeleteStrategyRequest.ProtoReflect.Descriptor instead.
func (*BatchDeleteStrategyRequest) Descriptor() ([]byte, []int) {
	return file_server_prom_strategy_strategy_proto_rawDescGZIP(), []int{8}
}

func (x *BatchDeleteStrategyRequest) GetIds() []uint32 {
	if x != nil {
		return x.Ids
	}
	return nil
}

// 批量删除策略响应参数
type BatchDeleteStrategyReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 策略ID列表, 成功后返回策略ID列表
	Ids []uint32 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *BatchDeleteStrategyReply) Reset() {
	*x = BatchDeleteStrategyReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_prom_strategy_strategy_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchDeleteStrategyReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchDeleteStrategyReply) ProtoMessage() {}

func (x *BatchDeleteStrategyReply) ProtoReflect() protoreflect.Message {
	mi := &file_server_prom_strategy_strategy_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchDeleteStrategyReply.ProtoReflect.Descriptor instead.
func (*BatchDeleteStrategyReply) Descriptor() ([]byte, []int) {
	return file_server_prom_strategy_strategy_proto_rawDescGZIP(), []int{9}
}

func (x *BatchDeleteStrategyReply) GetIds() []uint32 {
	if x != nil {
		return x.Ids
	}
	return nil
}

// 获取策略请求参数
type GetStrategyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 策略ID, 路径参数, 必填, 大于0
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetStrategyRequest) Reset() {
	*x = GetStrategyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_prom_strategy_strategy_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStrategyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStrategyRequest) ProtoMessage() {}

func (x *GetStrategyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_prom_strategy_strategy_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStrategyRequest.ProtoReflect.Descriptor instead.
func (*GetStrategyRequest) Descriptor() ([]byte, []int) {
	return file_server_prom_strategy_strategy_proto_rawDescGZIP(), []int{10}
}

func (x *GetStrategyRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 获取策略响应参数
type GetStrategyReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 策略信息
	Detail *api.PromStrategyV1 `protobuf:"bytes,1,opt,name=detail,proto3" json:"detail,omitempty"`
}

func (x *GetStrategyReply) Reset() {
	*x = GetStrategyReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_prom_strategy_strategy_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStrategyReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStrategyReply) ProtoMessage() {}

func (x *GetStrategyReply) ProtoReflect() protoreflect.Message {
	mi := &file_server_prom_strategy_strategy_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStrategyReply.ProtoReflect.Descriptor instead.
func (*GetStrategyReply) Descriptor() ([]byte, []int) {
	return file_server_prom_strategy_strategy_proto_rawDescGZIP(), []int{11}
}

func (x *GetStrategyReply) GetDetail() *api.PromStrategyV1 {
	if x != nil {
		return x.Detail
	}
	return nil
}

// 获取策略列表请求参数
type ListStrategyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 分页参数, 必填
	Page *api.PageRequest `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	// 关键字, 可选, 长度限制: 0-255, 用于模糊查询
	Keyword string `protobuf:"bytes,2,opt,name=keyword,proto3" json:"keyword,omitempty"`
	// 策略组ID, 可选, 用于查询指定策略组下的策略
	GroupId uint32 `protobuf:"varint,3,opt,name=groupId,proto3" json:"groupId,omitempty"`
	// 分类ID列表, 可选, 用于查询指定分类下的策略
	CategoryIds []uint32 `protobuf:"varint,4,rep,packed,name=categoryIds,proto3" json:"categoryIds,omitempty"`
	// 告警级别ID, 可选, 用于查询指定告警级别下的策略
	AlarmLevelId uint32 `protobuf:"varint,5,opt,name=alarmLevelId,proto3" json:"alarmLevelId,omitempty"`
	// 策略状态, 可选, 用于查询指定状态下的策略
	Status api.Status `protobuf:"varint,6,opt,name=status,proto3,enum=api.Status" json:"status,omitempty"`
	// 是否获取已删除的策略
	IsDeleted bool `protobuf:"varint,7,opt,name=isDeleted,proto3" json:"isDeleted,omitempty"`
	// 策略ID
	StrategyId uint32 `protobuf:"varint,8,opt,name=strategyId,proto3" json:"strategyId,omitempty"`
}

func (x *ListStrategyRequest) Reset() {
	*x = ListStrategyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_prom_strategy_strategy_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStrategyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStrategyRequest) ProtoMessage() {}

func (x *ListStrategyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_prom_strategy_strategy_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStrategyRequest.ProtoReflect.Descriptor instead.
func (*ListStrategyRequest) Descriptor() ([]byte, []int) {
	return file_server_prom_strategy_strategy_proto_rawDescGZIP(), []int{12}
}

func (x *ListStrategyRequest) GetPage() *api.PageRequest {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *ListStrategyRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *ListStrategyRequest) GetGroupId() uint32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *ListStrategyRequest) GetCategoryIds() []uint32 {
	if x != nil {
		return x.CategoryIds
	}
	return nil
}

func (x *ListStrategyRequest) GetAlarmLevelId() uint32 {
	if x != nil {
		return x.AlarmLevelId
	}
	return 0
}

func (x *ListStrategyRequest) GetStatus() api.Status {
	if x != nil {
		return x.Status
	}
	return api.Status(0)
}

func (x *ListStrategyRequest) GetIsDeleted() bool {
	if x != nil {
		return x.IsDeleted
	}
	return false
}

func (x *ListStrategyRequest) GetStrategyId() uint32 {
	if x != nil {
		return x.StrategyId
	}
	return 0
}

// 获取策略列表响应参数
type ListStrategyReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 分页参数
	Page *api.PageReply `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	// 策略列表
	List []*api.PromStrategyV1 `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ListStrategyReply) Reset() {
	*x = ListStrategyReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_prom_strategy_strategy_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStrategyReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStrategyReply) ProtoMessage() {}

func (x *ListStrategyReply) ProtoReflect() protoreflect.Message {
	mi := &file_server_prom_strategy_strategy_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStrategyReply.ProtoReflect.Descriptor instead.
func (*ListStrategyReply) Descriptor() ([]byte, []int) {
	return file_server_prom_strategy_strategy_proto_rawDescGZIP(), []int{13}
}

func (x *ListStrategyReply) GetPage() *api.PageReply {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *ListStrategyReply) GetList() []*api.PromStrategyV1 {
	if x != nil {
		return x.List
	}
	return nil
}

// 获取策略下拉列表请求参数
type SelectStrategyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 分页参数
	Page *api.PageRequest `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	// 关键字, 可选, 长度限制: 0-255, 用于模糊查询
	Keyword string `protobuf:"bytes,2,opt,name=keyword,proto3" json:"keyword,omitempty"`
	// 状态
	Status api.Status `protobuf:"varint,3,opt,name=status,proto3,enum=api.Status" json:"status,omitempty"`
}

func (x *SelectStrategyRequest) Reset() {
	*x = SelectStrategyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_prom_strategy_strategy_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectStrategyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectStrategyRequest) ProtoMessage() {}

func (x *SelectStrategyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_prom_strategy_strategy_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectStrategyRequest.ProtoReflect.Descriptor instead.
func (*SelectStrategyRequest) Descriptor() ([]byte, []int) {
	return file_server_prom_strategy_strategy_proto_rawDescGZIP(), []int{14}
}

func (x *SelectStrategyRequest) GetPage() *api.PageRequest {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *SelectStrategyRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *SelectStrategyRequest) GetStatus() api.Status {
	if x != nil {
		return x.Status
	}
	return api.Status(0)
}

// 获取策略列表响应参数
type SelectStrategyReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 分页参数
	Page *api.PageReply `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	// 策略下拉列表
	List []*api.PromStrategySelectV1 `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *SelectStrategyReply) Reset() {
	*x = SelectStrategyReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_prom_strategy_strategy_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectStrategyReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectStrategyReply) ProtoMessage() {}

func (x *SelectStrategyReply) ProtoReflect() protoreflect.Message {
	mi := &file_server_prom_strategy_strategy_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectStrategyReply.ProtoReflect.Descriptor instead.
func (*SelectStrategyReply) Descriptor() ([]byte, []int) {
	return file_server_prom_strategy_strategy_proto_rawDescGZIP(), []int{15}
}

func (x *SelectStrategyReply) GetPage() *api.PageReply {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *SelectStrategyReply) GetList() []*api.PromStrategySelectV1 {
	if x != nil {
		return x.List
	}
	return nil
}

// 导出策略请求参数
type ExportStrategyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 需要导出的策略ID列表, 最少1个, 必须大于0, 唯一
	Ids []uint32 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *ExportStrategyRequest) Reset() {
	*x = ExportStrategyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_prom_strategy_strategy_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportStrategyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportStrategyRequest) ProtoMessage() {}

func (x *ExportStrategyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_prom_strategy_strategy_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportStrategyRequest.ProtoReflect.Descriptor instead.
func (*ExportStrategyRequest) Descriptor() ([]byte, []int) {
	return file_server_prom_strategy_strategy_proto_rawDescGZIP(), []int{16}
}

func (x *ExportStrategyRequest) GetIds() []uint32 {
	if x != nil {
		return x.Ids
	}
	return nil
}

// 导出策略响应
type ExportStrategyReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 导出的策略文件bytes
	File []byte `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	// 导出的策略文件名
	FileName string `protobuf:"bytes,2,opt,name=fileName,proto3" json:"fileName,omitempty"`
}

func (x *ExportStrategyReply) Reset() {
	*x = ExportStrategyReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_prom_strategy_strategy_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportStrategyReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportStrategyReply) ProtoMessage() {}

func (x *ExportStrategyReply) ProtoReflect() protoreflect.Message {
	mi := &file_server_prom_strategy_strategy_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportStrategyReply.ProtoReflect.Descriptor instead.
func (*ExportStrategyReply) Descriptor() ([]byte, []int) {
	return file_server_prom_strategy_strategy_proto_rawDescGZIP(), []int{17}
}

func (x *ExportStrategyReply) GetFile() []byte {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *ExportStrategyReply) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

// 获取策略通知对象请求参数
type GetStrategyNotifyObjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 策略ID, 路径参数, 必填, 大于0
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetStrategyNotifyObjectRequest) Reset() {
	*x = GetStrategyNotifyObjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_prom_strategy_strategy_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStrategyNotifyObjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStrategyNotifyObjectRequest) ProtoMessage() {}

func (x *GetStrategyNotifyObjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_prom_strategy_strategy_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStrategyNotifyObjectRequest.ProtoReflect.Descriptor instead.
func (*GetStrategyNotifyObjectRequest) Descriptor() ([]byte, []int) {
	return file_server_prom_strategy_strategy_proto_rawDescGZIP(), []int{18}
}

func (x *GetStrategyNotifyObjectRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 获取策略通知对象响应参数
type GetStrategyNotifyObjectReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 策略通知对象列表
	Detail           *api.PromStrategyV1 `protobuf:"bytes,1,opt,name=detail,proto3" json:"detail,omitempty"`
	NotifyObjectList []*api.NotifyV1     `protobuf:"bytes,2,rep,name=notifyObjectList,proto3" json:"notifyObjectList,omitempty"`
}

func (x *GetStrategyNotifyObjectReply) Reset() {
	*x = GetStrategyNotifyObjectReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_prom_strategy_strategy_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStrategyNotifyObjectReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStrategyNotifyObjectReply) ProtoMessage() {}

func (x *GetStrategyNotifyObjectReply) ProtoReflect() protoreflect.Message {
	mi := &file_server_prom_strategy_strategy_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStrategyNotifyObjectReply.ProtoReflect.Descriptor instead.
func (*GetStrategyNotifyObjectReply) Descriptor() ([]byte, []int) {
	return file_server_prom_strategy_strategy_proto_rawDescGZIP(), []int{19}
}

func (x *GetStrategyNotifyObjectReply) GetDetail() *api.PromStrategyV1 {
	if x != nil {
		return x.Detail
	}
	return nil
}

func (x *GetStrategyNotifyObjectReply) GetNotifyObjectList() []*api.NotifyV1 {
	if x != nil {
		return x.NotifyObjectList
	}
	return nil
}

// 绑定通知对象请求参数
type BindStrategyNotifyObjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 策略ID, 路径参数, 必填, 大于0
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 通知对象列表
	NotifyObjectIds []uint32 `protobuf:"varint,2,rep,packed,name=notifyObjectIds,proto3" json:"notifyObjectIds,omitempty"`
}

func (x *BindStrategyNotifyObjectRequest) Reset() {
	*x = BindStrategyNotifyObjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_prom_strategy_strategy_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BindStrategyNotifyObjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindStrategyNotifyObjectRequest) ProtoMessage() {}

func (x *BindStrategyNotifyObjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_prom_strategy_strategy_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindStrategyNotifyObjectRequest.ProtoReflect.Descriptor instead.
func (*BindStrategyNotifyObjectRequest) Descriptor() ([]byte, []int) {
	return file_server_prom_strategy_strategy_proto_rawDescGZIP(), []int{20}
}

func (x *BindStrategyNotifyObjectRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BindStrategyNotifyObjectRequest) GetNotifyObjectIds() []uint32 {
	if x != nil {
		return x.NotifyObjectIds
	}
	return nil
}

// 绑定通知对象响应参数
type BindStrategyNotifyObjectReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 策略ID, 成功返回策略ID
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *BindStrategyNotifyObjectReply) Reset() {
	*x = BindStrategyNotifyObjectReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_prom_strategy_strategy_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BindStrategyNotifyObjectReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindStrategyNotifyObjectReply) ProtoMessage() {}

func (x *BindStrategyNotifyObjectReply) ProtoReflect() protoreflect.Message {
	mi := &file_server_prom_strategy_strategy_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindStrategyNotifyObjectReply.ProtoReflect.Descriptor instead.
func (*BindStrategyNotifyObjectReply) Descriptor() ([]byte, []int) {
	return file_server_prom_strategy_strategy_proto_rawDescGZIP(), []int{21}
}

func (x *BindStrategyNotifyObjectReply) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 测试hook模板请求参数
type TestTemplateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// APP
	NotifyType api.NotifyTemplateType `protobuf:"varint,2,opt,name=notifyType,proto3,enum=api.NotifyTemplateType" json:"notifyType,omitempty"`
	// 模板
	Template string `protobuf:"bytes,3,opt,name=template,proto3" json:"template,omitempty"`
	// 策略ID
	StrategyId uint32 `protobuf:"varint,4,opt,name=strategyId,proto3" json:"strategyId,omitempty"`
}

func (x *TestTemplateRequest) Reset() {
	*x = TestTemplateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_prom_strategy_strategy_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestTemplateRequest) ProtoMessage() {}

func (x *TestTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_prom_strategy_strategy_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestTemplateRequest.ProtoReflect.Descriptor instead.
func (*TestTemplateRequest) Descriptor() ([]byte, []int) {
	return file_server_prom_strategy_strategy_proto_rawDescGZIP(), []int{22}
}

func (x *TestTemplateRequest) GetNotifyType() api.NotifyTemplateType {
	if x != nil {
		return x.NotifyType
	}
	return api.NotifyTemplateType(0)
}

func (x *TestTemplateRequest) GetTemplate() string {
	if x != nil {
		return x.Template
	}
	return ""
}

func (x *TestTemplateRequest) GetStrategyId() uint32 {
	if x != nil {
		return x.StrategyId
	}
	return 0
}

// 测试hook模板响应参数
type TestTemplateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *TestTemplateReply) Reset() {
	*x = TestTemplateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_prom_strategy_strategy_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestTemplateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestTemplateReply) ProtoMessage() {}

func (x *TestTemplateReply) ProtoReflect() protoreflect.Message {
	mi := &file_server_prom_strategy_strategy_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestTemplateReply.ProtoReflect.Descriptor instead.
func (*TestTemplateReply) Descriptor() ([]byte, []int) {
	return file_server_prom_strategy_strategy_proto_rawDescGZIP(), []int{23}
}

func (x *TestTemplateReply) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

var File_server_prom_strategy_strategy_proto protoreflect.FileDescriptor

var file_server_prom_strategy_strategy_proto_rawDesc = []byte{
	0x0a, 0x23, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x6d, 0x2f, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xaa, 0x07, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x07, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x2a,
	0x02, 0x20, 0x00, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x05,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xfa, 0x42, 0x18,
	0x72, 0x16, 0x10, 0x01, 0x18, 0xff, 0x01, 0x32, 0x0f, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d,
	0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x5d, 0x2b, 0x24, 0x52, 0x05, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x12,
	0x1b, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x12, 0x33, 0x0a, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x78, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x23,
	0xfa, 0x42, 0x20, 0x9a, 0x01, 0x1d, 0x08, 0x01, 0x10, 0x64, 0x22, 0x17, 0x72, 0x15, 0x10, 0x01,
	0x18, 0x20, 0x32, 0x0f, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f,
	0x5d, 0x2b, 0x24, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x87, 0x01, 0x0a, 0x0b,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x40, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x42, 0x23, 0xfa, 0x42, 0x20, 0x9a, 0x01, 0x1d, 0x08, 0x01, 0x10, 0x64, 0x22,
	0x17, 0x72, 0x15, 0x10, 0x01, 0x18, 0x20, 0x32, 0x0f, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d,
	0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x5d, 0x2b, 0x24, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x34, 0x0a, 0x0c, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x50, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x10, 0xfa, 0x42, 0x0d,
	0x92, 0x01, 0x0a, 0x08, 0x01, 0x18, 0x01, 0x22, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x0c, 0x61,
	0x6c, 0x61, 0x72, 0x6d, 0x50, 0x61, 0x67, 0x65, 0x49, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x0b, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0d,
	0x42, 0x10, 0xfa, 0x42, 0x0d, 0x92, 0x01, 0x0a, 0x08, 0x01, 0x18, 0x01, 0x22, 0x04, 0x2a, 0x02,
	0x20, 0x00, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x73, 0x12,
	0x2b, 0x0a, 0x0c, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x0c,
	0x61, 0x6c, 0x61, 0x72, 0x6d, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x06,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x72, 0x03, 0x18, 0xff, 0x01, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x2b,
	0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x0c, 0x64,
	0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x0b, 0x6d,
	0x61, 0x78, 0x53, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0b, 0x6d, 0x61, 0x78, 0x53, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x12, 0x31, 0x0a, 0x0c,
	0x73, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12,
	0x20, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x25, 0x0a, 0x13,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x69, 0x64, 0x22, 0xc3, 0x07, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x2a, 0x02,
	0x20, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x20, 0x00,
	0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x05, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xfa, 0x42, 0x18, 0x72, 0x16, 0x10,
	0x01, 0x18, 0xff, 0x01, 0x32, 0x0f, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d,
	0x39, 0x5f, 0x5d, 0x2b, 0x24, 0x52, 0x05, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x04,
	0x65, 0x78, 0x70, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x12, 0x33, 0x0a, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a,
	0x01, 0x02, 0x10, 0x01, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x78,
	0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x6d,
	0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x23, 0xfa, 0x42, 0x20,
	0x9a, 0x01, 0x1d, 0x08, 0x01, 0x10, 0x64, 0x22, 0x17, 0x72, 0x15, 0x10, 0x01, 0x18, 0x20, 0x32,
	0x0f, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x5d, 0x2b, 0x24,
	0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x87, 0x01, 0x0a, 0x0b, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x6d,
	0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x42, 0x23, 0xfa, 0x42, 0x20, 0x9a, 0x01, 0x1d, 0x08, 0x01, 0x10, 0x64, 0x22, 0x17, 0x72, 0x15,
	0x10, 0x01, 0x18, 0x20, 0x32, 0x0f, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d,
	0x39, 0x5f, 0x5d, 0x2b, 0x24, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x34, 0x0a, 0x0c, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x50, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x10, 0xfa, 0x42, 0x0d, 0x92, 0x01, 0x0a,
	0x08, 0x01, 0x18, 0x01, 0x22, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x0c, 0x61, 0x6c, 0x61, 0x72,
	0x6d, 0x50, 0x61, 0x67, 0x65, 0x49, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x10, 0xfa,
	0x42, 0x0d, 0x92, 0x01, 0x0a, 0x08, 0x01, 0x18, 0x01, 0x22, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x52,
	0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x73, 0x12, 0x2b, 0x0a, 0x0c,
	0x61, 0x6c, 0x61, 0x72, 0x6d, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x0c, 0x61, 0x6c, 0x61,
	0x72, 0x6d, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x06, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03,
	0x18, 0xff, 0x01, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x2b, 0x0a, 0x0c, 0x64,
	0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x53,
	0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x6d, 0x61,
	0x78, 0x53, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x12, 0x31, 0x0a, 0x0c, 0x73, 0x65, 0x6e,
	0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c,
	0x73, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0b,
	0x73, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x1a, 0x39,
	0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x25, 0x0a, 0x13, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x77, 0x0a, 0x20, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0d, 0x42, 0x10, 0xfa, 0x42, 0x0d, 0x92, 0x01, 0x0a, 0x08, 0x01, 0x18, 0x01, 0x22, 0x04, 0x2a,
	0x02, 0x20, 0x00, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x82, 0x01, 0x04, 0x10, 0x01, 0x20,
	0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x32, 0x0a, 0x1e, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x69,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x30, 0x0a,
	0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x25, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x40, 0x0a, 0x1a, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0d, 0x42, 0x10, 0xfa, 0x42, 0x0d, 0x92, 0x01, 0x0a, 0x08, 0x01, 0x18, 0x01, 0x22, 0x04, 0x2a,
	0x02, 0x20, 0x00, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x2c, 0x0a, 0x18, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x2d, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x20,
	0x00, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3f, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2b, 0x0a, 0x06, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x50, 0x72, 0x6f, 0x6d, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x56, 0x31, 0x52, 0x06,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0xc8, 0x02, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x22,
	0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xff, 0x01, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x0b,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0d, 0x42, 0x10, 0xfa, 0x42, 0x0d, 0x92, 0x01, 0x0a, 0x10, 0x0a, 0x18, 0x01, 0x22, 0x04, 0x2a,
	0x02, 0x20, 0x00, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x73,
	0x12, 0x22, 0x0a, 0x0c, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x49, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x49,
	0x64, 0x22, 0x60, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x22, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50,
	0x72, 0x6f, 0x6d, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x56, 0x31, 0x52, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x22, 0x9a, 0x01, 0x0a, 0x15, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a,
	0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xff, 0x01, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x68, 0x0a, 0x13, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x22, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x50, 0x72, 0x6f, 0x6d, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x56, 0x31, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x3b, 0x0a, 0x15, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d,
	0x42, 0x10, 0xfa, 0x42, 0x0d, 0x92, 0x01, 0x0a, 0x08, 0x01, 0x18, 0x01, 0x22, 0x04, 0x2a, 0x02,
	0x20, 0x00, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x45, 0x0a, 0x13, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x66, 0x69,
	0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x39,
	0x0a, 0x1e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x02, 0x69, 0x64, 0x22, 0x86, 0x01, 0x0a, 0x1c, 0x47, 0x65,
	0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2b, 0x0a, 0x06, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x56, 0x31, 0x52,
	0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x39, 0x0a, 0x10, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x56, 0x31,
	0x52, 0x10, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x70, 0x0a, 0x1f, 0x42, 0x69, 0x6e, 0x64, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x34,
	0x0a, 0x0f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08,
	0x01, 0x18, 0x01, 0x52, 0x0f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x73, 0x22, 0x2f, 0x0a, 0x1d, 0x42, 0x69, 0x6e, 0x64, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x9d, 0x01, 0x0a, 0x13, 0x54, 0x65, 0x73, 0x74, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a,
	0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82,
	0x01, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0a,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x49, 0x64, 0x22, 0x25, 0x0a, 0x11, 0x54, 0x65, 0x73, 0x74, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x32, 0xa1, 0x0f, 0x0a,
	0x08, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x94, 0x01, 0x0a, 0x0e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x2f, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x2e, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x2e,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x22, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1c, 0x22, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a,
	0x12, 0x94, 0x01, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x12, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x17, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0xc2, 0x01, 0x0a, 0x19, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x38, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x2f, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x29, 0x22, 0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2f, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x94, 0x01, 0x0a,
	0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12,
	0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x6d, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x3a, 0x01, 0x2a, 0x12, 0xa9, 0x01, 0x0a, 0x13, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x34, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x2e, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x22, 0x1d, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2f,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x12,
	0x8b, 0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12,
	0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x6d, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x2e,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1c, 0x22, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x2f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x3a, 0x01, 0x2a, 0x12, 0x8c, 0x01,
	0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x2d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x6d,
	0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x2e,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1a, 0x22, 0x15, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x94, 0x01, 0x0a,
	0x0e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12,
	0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x6d, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x3a, 0x01, 0x2a, 0x12, 0x94, 0x01, 0x0a, 0x0e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x17,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x2f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0xb6, 0x01, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x38, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x36, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23,
	0x22, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x3a, 0x01, 0x2a, 0x12, 0xbe, 0x01, 0x0a, 0x18, 0x42, 0x69, 0x6e, 0x64, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x39, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x42, 0x69, 0x6e, 0x64,
	0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x2e, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x22, 0x23, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2f, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x62, 0x69, 0x6e,
	0x64, 0x3a, 0x01, 0x2a, 0x12, 0x99, 0x01, 0x0a, 0x12, 0x54, 0x65, 0x73, 0x74, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x2e, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x22,
	0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x3a, 0x01, 0x2a,
	0x42, 0x52, 0x0a, 0x18, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x50, 0x01, 0x5a, 0x34,
	0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x72,
	0x6f, 0x6d, 0x2f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x3b, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_server_prom_strategy_strategy_proto_rawDescOnce sync.Once
	file_server_prom_strategy_strategy_proto_rawDescData = file_server_prom_strategy_strategy_proto_rawDesc
)

func file_server_prom_strategy_strategy_proto_rawDescGZIP() []byte {
	file_server_prom_strategy_strategy_proto_rawDescOnce.Do(func() {
		file_server_prom_strategy_strategy_proto_rawDescData = protoimpl.X.CompressGZIP(file_server_prom_strategy_strategy_proto_rawDescData)
	})
	return file_server_prom_strategy_strategy_proto_rawDescData
}

var file_server_prom_strategy_strategy_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_server_prom_strategy_strategy_proto_goTypes = []interface{}{
	(*CreateStrategyRequest)(nil),            // 0: api.server.prom.strategy.CreateStrategyRequest
	(*CreateStrategyReply)(nil),              // 1: api.server.prom.strategy.CreateStrategyReply
	(*UpdateStrategyRequest)(nil),            // 2: api.server.prom.strategy.UpdateStrategyRequest
	(*UpdateStrategyReply)(nil),              // 3: api.server.prom.strategy.UpdateStrategyReply
	(*BatchUpdateStrategyStatusRequest)(nil), // 4: api.server.prom.strategy.BatchUpdateStrategyStatusRequest
	(*BatchUpdateStrategyStatusReply)(nil),   // 5: api.server.prom.strategy.BatchUpdateStrategyStatusReply
	(*DeleteStrategyRequest)(nil),            // 6: api.server.prom.strategy.DeleteStrategyRequest
	(*DeleteStrategyReply)(nil),              // 7: api.server.prom.strategy.DeleteStrategyReply
	(*BatchDeleteStrategyRequest)(nil),       // 8: api.server.prom.strategy.BatchDeleteStrategyRequest
	(*BatchDeleteStrategyReply)(nil),         // 9: api.server.prom.strategy.BatchDeleteStrategyReply
	(*GetStrategyRequest)(nil),               // 10: api.server.prom.strategy.GetStrategyRequest
	(*GetStrategyReply)(nil),                 // 11: api.server.prom.strategy.GetStrategyReply
	(*ListStrategyRequest)(nil),              // 12: api.server.prom.strategy.ListStrategyRequest
	(*ListStrategyReply)(nil),                // 13: api.server.prom.strategy.ListStrategyReply
	(*SelectStrategyRequest)(nil),            // 14: api.server.prom.strategy.SelectStrategyRequest
	(*SelectStrategyReply)(nil),              // 15: api.server.prom.strategy.SelectStrategyReply
	(*ExportStrategyRequest)(nil),            // 16: api.server.prom.strategy.ExportStrategyRequest
	(*ExportStrategyReply)(nil),              // 17: api.server.prom.strategy.ExportStrategyReply
	(*GetStrategyNotifyObjectRequest)(nil),   // 18: api.server.prom.strategy.GetStrategyNotifyObjectRequest
	(*GetStrategyNotifyObjectReply)(nil),     // 19: api.server.prom.strategy.GetStrategyNotifyObjectReply
	(*BindStrategyNotifyObjectRequest)(nil),  // 20: api.server.prom.strategy.BindStrategyNotifyObjectRequest
	(*BindStrategyNotifyObjectReply)(nil),    // 21: api.server.prom.strategy.BindStrategyNotifyObjectReply
	(*TestTemplateRequest)(nil),              // 22: api.server.prom.strategy.TestTemplateRequest
	(*TestTemplateReply)(nil),                // 23: api.server.prom.strategy.TestTemplateReply
	nil,                                      // 24: api.server.prom.strategy.CreateStrategyRequest.LabelsEntry
	nil,                                      // 25: api.server.prom.strategy.CreateStrategyRequest.AnnotationsEntry
	nil,                                      // 26: api.server.prom.strategy.UpdateStrategyRequest.LabelsEntry
	nil,                                      // 27: api.server.prom.strategy.UpdateStrategyRequest.AnnotationsEntry
	(*api.Duration)(nil),                     // 28: api.Duration
	(api.Status)(0),                          // 29: api.Status
	(*api.PromStrategyV1)(nil),               // 30: api.PromStrategyV1
	(*api.PageRequest)(nil),                  // 31: api.PageRequest
	(*api.PageReply)(nil),                    // 32: api.PageReply
	(*api.PromStrategySelectV1)(nil),         // 33: api.PromStrategySelectV1
	(*api.NotifyV1)(nil),                     // 34: api.NotifyV1
	(api.NotifyTemplateType)(0),              // 35: api.NotifyTemplateType
}
var file_server_prom_strategy_strategy_proto_depIdxs = []int32{
	28, // 0: api.server.prom.strategy.CreateStrategyRequest.duration:type_name -> api.Duration
	24, // 1: api.server.prom.strategy.CreateStrategyRequest.labels:type_name -> api.server.prom.strategy.CreateStrategyRequest.LabelsEntry
	25, // 2: api.server.prom.strategy.CreateStrategyRequest.annotations:type_name -> api.server.prom.strategy.CreateStrategyRequest.AnnotationsEntry
	28, // 3: api.server.prom.strategy.CreateStrategyRequest.maxSuppress:type_name -> api.Duration
	28, // 4: api.server.prom.strategy.CreateStrategyRequest.sendInterval:type_name -> api.Duration
	28, // 5: api.server.prom.strategy.UpdateStrategyRequest.duration:type_name -> api.Duration
	26, // 6: api.server.prom.strategy.UpdateStrategyRequest.labels:type_name -> api.server.prom.strategy.UpdateStrategyRequest.LabelsEntry
	27, // 7: api.server.prom.strategy.UpdateStrategyRequest.annotations:type_name -> api.server.prom.strategy.UpdateStrategyRequest.AnnotationsEntry
	28, // 8: api.server.prom.strategy.UpdateStrategyRequest.maxSuppress:type_name -> api.Duration
	28, // 9: api.server.prom.strategy.UpdateStrategyRequest.sendInterval:type_name -> api.Duration
	29, // 10: api.server.prom.strategy.BatchUpdateStrategyStatusRequest.status:type_name -> api.Status
	30, // 11: api.server.prom.strategy.GetStrategyReply.detail:type_name -> api.PromStrategyV1
	31, // 12: api.server.prom.strategy.ListStrategyRequest.page:type_name -> api.PageRequest
	29, // 13: api.server.prom.strategy.ListStrategyRequest.status:type_name -> api.Status
	32, // 14: api.server.prom.strategy.ListStrategyReply.page:type_name -> api.PageReply
	30, // 15: api.server.prom.strategy.ListStrategyReply.list:type_name -> api.PromStrategyV1
	31, // 16: api.server.prom.strategy.SelectStrategyRequest.page:type_name -> api.PageRequest
	29, // 17: api.server.prom.strategy.SelectStrategyRequest.status:type_name -> api.Status
	32, // 18: api.server.prom.strategy.SelectStrategyReply.page:type_name -> api.PageReply
	33, // 19: api.server.prom.strategy.SelectStrategyReply.list:type_name -> api.PromStrategySelectV1
	30, // 20: api.server.prom.strategy.GetStrategyNotifyObjectReply.detail:type_name -> api.PromStrategyV1
	34, // 21: api.server.prom.strategy.GetStrategyNotifyObjectReply.notifyObjectList:type_name -> api.NotifyV1
	35, // 22: api.server.prom.strategy.TestTemplateRequest.notifyType:type_name -> api.NotifyTemplateType
	0,  // 23: api.server.prom.strategy.Strategy.CreateStrategy:input_type -> api.server.prom.strategy.CreateStrategyRequest
	2,  // 24: api.server.prom.strategy.Strategy.UpdateStrategy:input_type -> api.server.prom.strategy.UpdateStrategyRequest
	4,  // 25: api.server.prom.strategy.Strategy.BatchUpdateStrategyStatus:input_type -> api.server.prom.strategy.BatchUpdateStrategyStatusRequest
	6,  // 26: api.server.prom.strategy.Strategy.DeleteStrategy:input_type -> api.server.prom.strategy.DeleteStrategyRequest
	8,  // 27: api.server.prom.strategy.Strategy.BatchDeleteStrategy:input_type -> api.server.prom.strategy.BatchDeleteStrategyRequest
	10, // 28: api.server.prom.strategy.Strategy.GetStrategy:input_type -> api.server.prom.strategy.GetStrategyRequest
	12, // 29: api.server.prom.strategy.Strategy.ListStrategy:input_type -> api.server.prom.strategy.ListStrategyRequest
	14, // 30: api.server.prom.strategy.Strategy.SelectStrategy:input_type -> api.server.prom.strategy.SelectStrategyRequest
	16, // 31: api.server.prom.strategy.Strategy.ExportStrategy:input_type -> api.server.prom.strategy.ExportStrategyRequest
	18, // 32: api.server.prom.strategy.Strategy.GetStrategyNotifyObject:input_type -> api.server.prom.strategy.GetStrategyNotifyObjectRequest
	20, // 33: api.server.prom.strategy.Strategy.BindStrategyNotifyObject:input_type -> api.server.prom.strategy.BindStrategyNotifyObjectRequest
	22, // 34: api.server.prom.strategy.Strategy.TestNotifyTemplate:input_type -> api.server.prom.strategy.TestTemplateRequest
	1,  // 35: api.server.prom.strategy.Strategy.CreateStrategy:output_type -> api.server.prom.strategy.CreateStrategyReply
	3,  // 36: api.server.prom.strategy.Strategy.UpdateStrategy:output_type -> api.server.prom.strategy.UpdateStrategyReply
	5,  // 37: api.server.prom.strategy.Strategy.BatchUpdateStrategyStatus:output_type -> api.server.prom.strategy.BatchUpdateStrategyStatusReply
	7,  // 38: api.server.prom.strategy.Strategy.DeleteStrategy:output_type -> api.server.prom.strategy.DeleteStrategyReply
	9,  // 39: api.server.prom.strategy.Strategy.BatchDeleteStrategy:output_type -> api.server.prom.strategy.BatchDeleteStrategyReply
	11, // 40: api.server.prom.strategy.Strategy.GetStrategy:output_type -> api.server.prom.strategy.GetStrategyReply
	13, // 41: api.server.prom.strategy.Strategy.ListStrategy:output_type -> api.server.prom.strategy.ListStrategyReply
	15, // 42: api.server.prom.strategy.Strategy.SelectStrategy:output_type -> api.server.prom.strategy.SelectStrategyReply
	17, // 43: api.server.prom.strategy.Strategy.ExportStrategy:output_type -> api.server.prom.strategy.ExportStrategyReply
	19, // 44: api.server.prom.strategy.Strategy.GetStrategyNotifyObject:output_type -> api.server.prom.strategy.GetStrategyNotifyObjectReply
	21, // 45: api.server.prom.strategy.Strategy.BindStrategyNotifyObject:output_type -> api.server.prom.strategy.BindStrategyNotifyObjectReply
	23, // 46: api.server.prom.strategy.Strategy.TestNotifyTemplate:output_type -> api.server.prom.strategy.TestTemplateReply
	35, // [35:47] is the sub-list for method output_type
	23, // [23:35] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_server_prom_strategy_strategy_proto_init() }
func file_server_prom_strategy_strategy_proto_init() {
	if File_server_prom_strategy_strategy_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_server_prom_strategy_strategy_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateStrategyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_prom_strategy_strategy_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateStrategyReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_prom_strategy_strategy_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateStrategyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_prom_strategy_strategy_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateStrategyReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_prom_strategy_strategy_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchUpdateStrategyStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_prom_strategy_strategy_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchUpdateStrategyStatusReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_prom_strategy_strategy_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteStrategyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_prom_strategy_strategy_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteStrategyReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_prom_strategy_strategy_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchDeleteStrategyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_prom_strategy_strategy_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchDeleteStrategyReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_prom_strategy_strategy_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStrategyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_prom_strategy_strategy_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStrategyReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_prom_strategy_strategy_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListStrategyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_prom_strategy_strategy_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListStrategyReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_prom_strategy_strategy_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectStrategyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_prom_strategy_strategy_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectStrategyReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_prom_strategy_strategy_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportStrategyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_prom_strategy_strategy_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportStrategyReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_prom_strategy_strategy_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStrategyNotifyObjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_prom_strategy_strategy_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStrategyNotifyObjectReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_prom_strategy_strategy_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BindStrategyNotifyObjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_prom_strategy_strategy_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BindStrategyNotifyObjectReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_prom_strategy_strategy_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestTemplateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_prom_strategy_strategy_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestTemplateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_server_prom_strategy_strategy_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_server_prom_strategy_strategy_proto_goTypes,
		DependencyIndexes: file_server_prom_strategy_strategy_proto_depIdxs,
		MessageInfos:      file_server_prom_strategy_strategy_proto_msgTypes,
	}.Build()
	File_server_prom_strategy_strategy_proto = out.File
	file_server_prom_strategy_strategy_proto_rawDesc = nil
	file_server_prom_strategy_strategy_proto_goTypes = nil
	file_server_prom_strategy_strategy_proto_depIdxs = nil
}
