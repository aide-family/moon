// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.3
// - protoc             v3.19.4
// source: server/prom/strategy/strategy.proto

package strategy

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationStrategyBatchDeleteStrategy = "/api.server.prom.strategy.Strategy/BatchDeleteStrategy"
const OperationStrategyBatchUpdateStrategyStatus = "/api.server.prom.strategy.Strategy/BatchUpdateStrategyStatus"
const OperationStrategyBindStrategyNotifyObject = "/api.server.prom.strategy.Strategy/BindStrategyNotifyObject"
const OperationStrategyCreateStrategy = "/api.server.prom.strategy.Strategy/CreateStrategy"
const OperationStrategyDeleteStrategy = "/api.server.prom.strategy.Strategy/DeleteStrategy"
const OperationStrategyExportStrategy = "/api.server.prom.strategy.Strategy/ExportStrategy"
const OperationStrategyGetStrategy = "/api.server.prom.strategy.Strategy/GetStrategy"
const OperationStrategyGetStrategyNotifyObject = "/api.server.prom.strategy.Strategy/GetStrategyNotifyObject"
const OperationStrategyListStrategy = "/api.server.prom.strategy.Strategy/ListStrategy"
const OperationStrategySelectStrategy = "/api.server.prom.strategy.Strategy/SelectStrategy"
const OperationStrategyTestNotifyTemplate = "/api.server.prom.strategy.Strategy/TestNotifyTemplate"
const OperationStrategyUpdateStrategy = "/api.server.prom.strategy.Strategy/UpdateStrategy"

type StrategyHTTPServer interface {
	BatchDeleteStrategy(context.Context, *BatchDeleteStrategyRequest) (*BatchDeleteStrategyReply, error)
	BatchUpdateStrategyStatus(context.Context, *BatchUpdateStrategyStatusRequest) (*BatchUpdateStrategyStatusReply, error)
	BindStrategyNotifyObject(context.Context, *BindStrategyNotifyObjectRequest) (*BindStrategyNotifyObjectReply, error)
	CreateStrategy(context.Context, *CreateStrategyRequest) (*CreateStrategyReply, error)
	DeleteStrategy(context.Context, *DeleteStrategyRequest) (*DeleteStrategyReply, error)
	ExportStrategy(context.Context, *ExportStrategyRequest) (*ExportStrategyReply, error)
	GetStrategy(context.Context, *GetStrategyRequest) (*GetStrategyReply, error)
	GetStrategyNotifyObject(context.Context, *GetStrategyNotifyObjectRequest) (*GetStrategyNotifyObjectReply, error)
	ListStrategy(context.Context, *ListStrategyRequest) (*ListStrategyReply, error)
	SelectStrategy(context.Context, *SelectStrategyRequest) (*SelectStrategyReply, error)
	TestNotifyTemplate(context.Context, *TestTemplateRequest) (*TestTemplateReply, error)
	UpdateStrategy(context.Context, *UpdateStrategyRequest) (*UpdateStrategyReply, error)
}

func RegisterStrategyHTTPServer(s *http.Server, srv StrategyHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/strategy/create", _Strategy_CreateStrategy0_HTTP_Handler(srv))
	r.POST("/api/v1/strategy/update", _Strategy_UpdateStrategy0_HTTP_Handler(srv))
	r.POST("/api/v1/strategy/status/batch/update", _Strategy_BatchUpdateStrategyStatus0_HTTP_Handler(srv))
	r.POST("/api/v1/strategy/delete", _Strategy_DeleteStrategy0_HTTP_Handler(srv))
	r.POST("/api/v1/strategy/batch/delete", _Strategy_BatchDeleteStrategy0_HTTP_Handler(srv))
	r.POST("/api/v1/strategy/detail", _Strategy_GetStrategy0_HTTP_Handler(srv))
	r.POST("/api/v1/strategy/list", _Strategy_ListStrategy0_HTTP_Handler(srv))
	r.POST("/api/v1/strategy/select", _Strategy_SelectStrategy0_HTTP_Handler(srv))
	r.POST("/api/v1/strategy/export", _Strategy_ExportStrategy0_HTTP_Handler(srv))
	r.POST("/api/v1/strategy/notify/object", _Strategy_GetStrategyNotifyObject0_HTTP_Handler(srv))
	r.POST("/api/v1/strategy/notify/object/bind", _Strategy_BindStrategyNotifyObject0_HTTP_Handler(srv))
	r.POST("/api/v1/strategy/notify/test", _Strategy_TestNotifyTemplate0_HTTP_Handler(srv))
}

func _Strategy_CreateStrategy0_HTTP_Handler(srv StrategyHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateStrategyRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStrategyCreateStrategy)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateStrategy(ctx, req.(*CreateStrategyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateStrategyReply)
		return ctx.Result(200, reply)
	}
}

func _Strategy_UpdateStrategy0_HTTP_Handler(srv StrategyHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateStrategyRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStrategyUpdateStrategy)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateStrategy(ctx, req.(*UpdateStrategyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateStrategyReply)
		return ctx.Result(200, reply)
	}
}

func _Strategy_BatchUpdateStrategyStatus0_HTTP_Handler(srv StrategyHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BatchUpdateStrategyStatusRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStrategyBatchUpdateStrategyStatus)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BatchUpdateStrategyStatus(ctx, req.(*BatchUpdateStrategyStatusRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BatchUpdateStrategyStatusReply)
		return ctx.Result(200, reply)
	}
}

func _Strategy_DeleteStrategy0_HTTP_Handler(srv StrategyHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteStrategyRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStrategyDeleteStrategy)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteStrategy(ctx, req.(*DeleteStrategyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteStrategyReply)
		return ctx.Result(200, reply)
	}
}

func _Strategy_BatchDeleteStrategy0_HTTP_Handler(srv StrategyHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BatchDeleteStrategyRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStrategyBatchDeleteStrategy)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BatchDeleteStrategy(ctx, req.(*BatchDeleteStrategyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BatchDeleteStrategyReply)
		return ctx.Result(200, reply)
	}
}

func _Strategy_GetStrategy0_HTTP_Handler(srv StrategyHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetStrategyRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStrategyGetStrategy)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetStrategy(ctx, req.(*GetStrategyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetStrategyReply)
		return ctx.Result(200, reply)
	}
}

func _Strategy_ListStrategy0_HTTP_Handler(srv StrategyHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListStrategyRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStrategyListStrategy)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListStrategy(ctx, req.(*ListStrategyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListStrategyReply)
		return ctx.Result(200, reply)
	}
}

func _Strategy_SelectStrategy0_HTTP_Handler(srv StrategyHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SelectStrategyRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStrategySelectStrategy)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SelectStrategy(ctx, req.(*SelectStrategyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SelectStrategyReply)
		return ctx.Result(200, reply)
	}
}

func _Strategy_ExportStrategy0_HTTP_Handler(srv StrategyHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ExportStrategyRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStrategyExportStrategy)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ExportStrategy(ctx, req.(*ExportStrategyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ExportStrategyReply)
		return ctx.Result(200, reply)
	}
}

func _Strategy_GetStrategyNotifyObject0_HTTP_Handler(srv StrategyHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetStrategyNotifyObjectRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStrategyGetStrategyNotifyObject)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetStrategyNotifyObject(ctx, req.(*GetStrategyNotifyObjectRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetStrategyNotifyObjectReply)
		return ctx.Result(200, reply)
	}
}

func _Strategy_BindStrategyNotifyObject0_HTTP_Handler(srv StrategyHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BindStrategyNotifyObjectRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStrategyBindStrategyNotifyObject)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BindStrategyNotifyObject(ctx, req.(*BindStrategyNotifyObjectRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BindStrategyNotifyObjectReply)
		return ctx.Result(200, reply)
	}
}

func _Strategy_TestNotifyTemplate0_HTTP_Handler(srv StrategyHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in TestTemplateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStrategyTestNotifyTemplate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.TestNotifyTemplate(ctx, req.(*TestTemplateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*TestTemplateReply)
		return ctx.Result(200, reply)
	}
}

type StrategyHTTPClient interface {
	BatchDeleteStrategy(ctx context.Context, req *BatchDeleteStrategyRequest, opts ...http.CallOption) (rsp *BatchDeleteStrategyReply, err error)
	BatchUpdateStrategyStatus(ctx context.Context, req *BatchUpdateStrategyStatusRequest, opts ...http.CallOption) (rsp *BatchUpdateStrategyStatusReply, err error)
	BindStrategyNotifyObject(ctx context.Context, req *BindStrategyNotifyObjectRequest, opts ...http.CallOption) (rsp *BindStrategyNotifyObjectReply, err error)
	CreateStrategy(ctx context.Context, req *CreateStrategyRequest, opts ...http.CallOption) (rsp *CreateStrategyReply, err error)
	DeleteStrategy(ctx context.Context, req *DeleteStrategyRequest, opts ...http.CallOption) (rsp *DeleteStrategyReply, err error)
	ExportStrategy(ctx context.Context, req *ExportStrategyRequest, opts ...http.CallOption) (rsp *ExportStrategyReply, err error)
	GetStrategy(ctx context.Context, req *GetStrategyRequest, opts ...http.CallOption) (rsp *GetStrategyReply, err error)
	GetStrategyNotifyObject(ctx context.Context, req *GetStrategyNotifyObjectRequest, opts ...http.CallOption) (rsp *GetStrategyNotifyObjectReply, err error)
	ListStrategy(ctx context.Context, req *ListStrategyRequest, opts ...http.CallOption) (rsp *ListStrategyReply, err error)
	SelectStrategy(ctx context.Context, req *SelectStrategyRequest, opts ...http.CallOption) (rsp *SelectStrategyReply, err error)
	TestNotifyTemplate(ctx context.Context, req *TestTemplateRequest, opts ...http.CallOption) (rsp *TestTemplateReply, err error)
	UpdateStrategy(ctx context.Context, req *UpdateStrategyRequest, opts ...http.CallOption) (rsp *UpdateStrategyReply, err error)
}

type StrategyHTTPClientImpl struct {
	cc *http.Client
}

func NewStrategyHTTPClient(client *http.Client) StrategyHTTPClient {
	return &StrategyHTTPClientImpl{client}
}

func (c *StrategyHTTPClientImpl) BatchDeleteStrategy(ctx context.Context, in *BatchDeleteStrategyRequest, opts ...http.CallOption) (*BatchDeleteStrategyReply, error) {
	var out BatchDeleteStrategyReply
	pattern := "/api/v1/strategy/batch/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationStrategyBatchDeleteStrategy))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *StrategyHTTPClientImpl) BatchUpdateStrategyStatus(ctx context.Context, in *BatchUpdateStrategyStatusRequest, opts ...http.CallOption) (*BatchUpdateStrategyStatusReply, error) {
	var out BatchUpdateStrategyStatusReply
	pattern := "/api/v1/strategy/status/batch/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationStrategyBatchUpdateStrategyStatus))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *StrategyHTTPClientImpl) BindStrategyNotifyObject(ctx context.Context, in *BindStrategyNotifyObjectRequest, opts ...http.CallOption) (*BindStrategyNotifyObjectReply, error) {
	var out BindStrategyNotifyObjectReply
	pattern := "/api/v1/strategy/notify/object/bind"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationStrategyBindStrategyNotifyObject))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *StrategyHTTPClientImpl) CreateStrategy(ctx context.Context, in *CreateStrategyRequest, opts ...http.CallOption) (*CreateStrategyReply, error) {
	var out CreateStrategyReply
	pattern := "/api/v1/strategy/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationStrategyCreateStrategy))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *StrategyHTTPClientImpl) DeleteStrategy(ctx context.Context, in *DeleteStrategyRequest, opts ...http.CallOption) (*DeleteStrategyReply, error) {
	var out DeleteStrategyReply
	pattern := "/api/v1/strategy/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationStrategyDeleteStrategy))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *StrategyHTTPClientImpl) ExportStrategy(ctx context.Context, in *ExportStrategyRequest, opts ...http.CallOption) (*ExportStrategyReply, error) {
	var out ExportStrategyReply
	pattern := "/api/v1/strategy/export"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationStrategyExportStrategy))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *StrategyHTTPClientImpl) GetStrategy(ctx context.Context, in *GetStrategyRequest, opts ...http.CallOption) (*GetStrategyReply, error) {
	var out GetStrategyReply
	pattern := "/api/v1/strategy/detail"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationStrategyGetStrategy))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *StrategyHTTPClientImpl) GetStrategyNotifyObject(ctx context.Context, in *GetStrategyNotifyObjectRequest, opts ...http.CallOption) (*GetStrategyNotifyObjectReply, error) {
	var out GetStrategyNotifyObjectReply
	pattern := "/api/v1/strategy/notify/object"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationStrategyGetStrategyNotifyObject))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *StrategyHTTPClientImpl) ListStrategy(ctx context.Context, in *ListStrategyRequest, opts ...http.CallOption) (*ListStrategyReply, error) {
	var out ListStrategyReply
	pattern := "/api/v1/strategy/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationStrategyListStrategy))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *StrategyHTTPClientImpl) SelectStrategy(ctx context.Context, in *SelectStrategyRequest, opts ...http.CallOption) (*SelectStrategyReply, error) {
	var out SelectStrategyReply
	pattern := "/api/v1/strategy/select"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationStrategySelectStrategy))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *StrategyHTTPClientImpl) TestNotifyTemplate(ctx context.Context, in *TestTemplateRequest, opts ...http.CallOption) (*TestTemplateReply, error) {
	var out TestTemplateReply
	pattern := "/api/v1/strategy/notify/test"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationStrategyTestNotifyTemplate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *StrategyHTTPClientImpl) UpdateStrategy(ctx context.Context, in *UpdateStrategyRequest, opts ...http.CallOption) (*UpdateStrategyReply, error) {
	var out UpdateStrategyReply
	pattern := "/api/v1/strategy/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationStrategyUpdateStrategy))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
