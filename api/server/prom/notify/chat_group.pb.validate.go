// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: server/prom/notify/chat_group.proto

package notify

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	api "prometheus-manager/api"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = api.NotifyApp(0)
)

// Validate checks the field values on CreateChatGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateChatGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateChatGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateChatGroupRequestMultiError, or nil if none found.
func (m *CreateChatGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateChatGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 2 || l > 32 {
		err := CreateChatGroupRequestValidationError{
			field:  "Name",
			reason: "value length must be between 2 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRemark()) > 255 {
		err := CreateChatGroupRequestValidationError{
			field:  "Remark",
			reason: "value length must be at most 255 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CreateChatGroupRequest_Hook_Pattern.MatchString(m.GetHook()) {
		err := CreateChatGroupRequestValidationError{
			field:  "Hook",
			reason: "value does not match regex pattern \"^https?://\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := api.NotifyApp_name[int32(m.GetApp())]; !ok {
		err := CreateChatGroupRequestValidationError{
			field:  "App",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetHookName()); l < 2 || l > 32 {
		err := CreateChatGroupRequestValidationError{
			field:  "HookName",
			reason: "value length must be between 2 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Template

	// no validation rules for Secret

	if len(errors) > 0 {
		return CreateChatGroupRequestMultiError(errors)
	}

	return nil
}

// CreateChatGroupRequestMultiError is an error wrapping multiple validation
// errors returned by CreateChatGroupRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateChatGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateChatGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateChatGroupRequestMultiError) AllErrors() []error { return m }

// CreateChatGroupRequestValidationError is the validation error returned by
// CreateChatGroupRequest.Validate if the designated constraints aren't met.
type CreateChatGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateChatGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateChatGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateChatGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateChatGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateChatGroupRequestValidationError) ErrorName() string {
	return "CreateChatGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateChatGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateChatGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateChatGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateChatGroupRequestValidationError{}

var _CreateChatGroupRequest_Hook_Pattern = regexp.MustCompile("^https?://")

// Validate checks the field values on CreateChatGroupReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateChatGroupReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateChatGroupReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateChatGroupReplyMultiError, or nil if none found.
func (m *CreateChatGroupReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateChatGroupReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateChatGroupReplyMultiError(errors)
	}

	return nil
}

// CreateChatGroupReplyMultiError is an error wrapping multiple validation
// errors returned by CreateChatGroupReply.ValidateAll() if the designated
// constraints aren't met.
type CreateChatGroupReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateChatGroupReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateChatGroupReplyMultiError) AllErrors() []error { return m }

// CreateChatGroupReplyValidationError is the validation error returned by
// CreateChatGroupReply.Validate if the designated constraints aren't met.
type CreateChatGroupReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateChatGroupReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateChatGroupReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateChatGroupReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateChatGroupReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateChatGroupReplyValidationError) ErrorName() string {
	return "CreateChatGroupReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateChatGroupReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateChatGroupReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateChatGroupReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateChatGroupReplyValidationError{}

// Validate checks the field values on UpdateChatGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateChatGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateChatGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateChatGroupRequestMultiError, or nil if none found.
func (m *UpdateChatGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateChatGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateChatGroupRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 2 || l > 32 {
		err := UpdateChatGroupRequestValidationError{
			field:  "Name",
			reason: "value length must be between 2 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRemark()) > 255 {
		err := UpdateChatGroupRequestValidationError{
			field:  "Remark",
			reason: "value length must be at most 255 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetHookName()); l < 2 || l > 32 {
		err := UpdateChatGroupRequestValidationError{
			field:  "HookName",
			reason: "value length must be between 2 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Template

	if len(errors) > 0 {
		return UpdateChatGroupRequestMultiError(errors)
	}

	return nil
}

// UpdateChatGroupRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateChatGroupRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateChatGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateChatGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateChatGroupRequestMultiError) AllErrors() []error { return m }

// UpdateChatGroupRequestValidationError is the validation error returned by
// UpdateChatGroupRequest.Validate if the designated constraints aren't met.
type UpdateChatGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateChatGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateChatGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateChatGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateChatGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateChatGroupRequestValidationError) ErrorName() string {
	return "UpdateChatGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateChatGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateChatGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateChatGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateChatGroupRequestValidationError{}

// Validate checks the field values on UpdateChatGroupReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateChatGroupReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateChatGroupReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateChatGroupReplyMultiError, or nil if none found.
func (m *UpdateChatGroupReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateChatGroupReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return UpdateChatGroupReplyMultiError(errors)
	}

	return nil
}

// UpdateChatGroupReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateChatGroupReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateChatGroupReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateChatGroupReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateChatGroupReplyMultiError) AllErrors() []error { return m }

// UpdateChatGroupReplyValidationError is the validation error returned by
// UpdateChatGroupReply.Validate if the designated constraints aren't met.
type UpdateChatGroupReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateChatGroupReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateChatGroupReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateChatGroupReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateChatGroupReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateChatGroupReplyValidationError) ErrorName() string {
	return "UpdateChatGroupReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateChatGroupReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateChatGroupReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateChatGroupReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateChatGroupReplyValidationError{}

// Validate checks the field values on DeleteChatGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteChatGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteChatGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteChatGroupRequestMultiError, or nil if none found.
func (m *DeleteChatGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteChatGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteChatGroupRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteChatGroupRequestMultiError(errors)
	}

	return nil
}

// DeleteChatGroupRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteChatGroupRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteChatGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteChatGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteChatGroupRequestMultiError) AllErrors() []error { return m }

// DeleteChatGroupRequestValidationError is the validation error returned by
// DeleteChatGroupRequest.Validate if the designated constraints aren't met.
type DeleteChatGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteChatGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteChatGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteChatGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteChatGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteChatGroupRequestValidationError) ErrorName() string {
	return "DeleteChatGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteChatGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteChatGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteChatGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteChatGroupRequestValidationError{}

// Validate checks the field values on DeleteChatGroupReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteChatGroupReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteChatGroupReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteChatGroupReplyMultiError, or nil if none found.
func (m *DeleteChatGroupReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteChatGroupReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteChatGroupReplyMultiError(errors)
	}

	return nil
}

// DeleteChatGroupReplyMultiError is an error wrapping multiple validation
// errors returned by DeleteChatGroupReply.ValidateAll() if the designated
// constraints aren't met.
type DeleteChatGroupReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteChatGroupReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteChatGroupReplyMultiError) AllErrors() []error { return m }

// DeleteChatGroupReplyValidationError is the validation error returned by
// DeleteChatGroupReply.Validate if the designated constraints aren't met.
type DeleteChatGroupReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteChatGroupReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteChatGroupReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteChatGroupReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteChatGroupReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteChatGroupReplyValidationError) ErrorName() string {
	return "DeleteChatGroupReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteChatGroupReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteChatGroupReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteChatGroupReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteChatGroupReplyValidationError{}

// Validate checks the field values on GetChatGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetChatGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetChatGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetChatGroupRequestMultiError, or nil if none found.
func (m *GetChatGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetChatGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetChatGroupRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetChatGroupRequestMultiError(errors)
	}

	return nil
}

// GetChatGroupRequestMultiError is an error wrapping multiple validation
// errors returned by GetChatGroupRequest.ValidateAll() if the designated
// constraints aren't met.
type GetChatGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetChatGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetChatGroupRequestMultiError) AllErrors() []error { return m }

// GetChatGroupRequestValidationError is the validation error returned by
// GetChatGroupRequest.Validate if the designated constraints aren't met.
type GetChatGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetChatGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetChatGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetChatGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetChatGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetChatGroupRequestValidationError) ErrorName() string {
	return "GetChatGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetChatGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetChatGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetChatGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetChatGroupRequestValidationError{}

// Validate checks the field values on GetChatGroupReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetChatGroupReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetChatGroupReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetChatGroupReplyMultiError, or nil if none found.
func (m *GetChatGroupReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetChatGroupReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetChatGroupReplyValidationError{
					field:  "Detail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetChatGroupReplyValidationError{
					field:  "Detail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetChatGroupReplyValidationError{
				field:  "Detail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetChatGroupReplyMultiError(errors)
	}

	return nil
}

// GetChatGroupReplyMultiError is an error wrapping multiple validation errors
// returned by GetChatGroupReply.ValidateAll() if the designated constraints
// aren't met.
type GetChatGroupReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetChatGroupReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetChatGroupReplyMultiError) AllErrors() []error { return m }

// GetChatGroupReplyValidationError is the validation error returned by
// GetChatGroupReply.Validate if the designated constraints aren't met.
type GetChatGroupReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetChatGroupReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetChatGroupReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetChatGroupReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetChatGroupReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetChatGroupReplyValidationError) ErrorName() string {
	return "GetChatGroupReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetChatGroupReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetChatGroupReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetChatGroupReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetChatGroupReplyValidationError{}

// Validate checks the field values on ListChatGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListChatGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListChatGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListChatGroupRequestMultiError, or nil if none found.
func (m *ListChatGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListChatGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() == nil {
		err := ListChatGroupRequestValidationError{
			field:  "Page",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListChatGroupRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListChatGroupRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListChatGroupRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetKeyword()) > 20 {
		err := ListChatGroupRequestValidationError{
			field:  "Keyword",
			reason: "value length must be at most 20 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := api.Status_name[int32(m.GetStatus())]; !ok {
		err := ListChatGroupRequestValidationError{
			field:  "Status",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := api.NotifyApp_name[int32(m.GetApp())]; !ok {
		err := ListChatGroupRequestValidationError{
			field:  "App",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListChatGroupRequestMultiError(errors)
	}

	return nil
}

// ListChatGroupRequestMultiError is an error wrapping multiple validation
// errors returned by ListChatGroupRequest.ValidateAll() if the designated
// constraints aren't met.
type ListChatGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListChatGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListChatGroupRequestMultiError) AllErrors() []error { return m }

// ListChatGroupRequestValidationError is the validation error returned by
// ListChatGroupRequest.Validate if the designated constraints aren't met.
type ListChatGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListChatGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListChatGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListChatGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListChatGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListChatGroupRequestValidationError) ErrorName() string {
	return "ListChatGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListChatGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListChatGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListChatGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListChatGroupRequestValidationError{}

// Validate checks the field values on ListChatGroupReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListChatGroupReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListChatGroupReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListChatGroupReplyMultiError, or nil if none found.
func (m *ListChatGroupReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListChatGroupReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListChatGroupReplyValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListChatGroupReplyValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListChatGroupReplyValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListChatGroupReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListChatGroupReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListChatGroupReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListChatGroupReplyMultiError(errors)
	}

	return nil
}

// ListChatGroupReplyMultiError is an error wrapping multiple validation errors
// returned by ListChatGroupReply.ValidateAll() if the designated constraints
// aren't met.
type ListChatGroupReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListChatGroupReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListChatGroupReplyMultiError) AllErrors() []error { return m }

// ListChatGroupReplyValidationError is the validation error returned by
// ListChatGroupReply.Validate if the designated constraints aren't met.
type ListChatGroupReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListChatGroupReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListChatGroupReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListChatGroupReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListChatGroupReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListChatGroupReplyValidationError) ErrorName() string {
	return "ListChatGroupReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListChatGroupReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListChatGroupReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListChatGroupReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListChatGroupReplyValidationError{}

// Validate checks the field values on SelectChatGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SelectChatGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SelectChatGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SelectChatGroupRequestMultiError, or nil if none found.
func (m *SelectChatGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SelectChatGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() == nil {
		err := SelectChatGroupRequestValidationError{
			field:  "Page",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SelectChatGroupRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SelectChatGroupRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SelectChatGroupRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetKeyword()) > 20 {
		err := SelectChatGroupRequestValidationError{
			field:  "Keyword",
			reason: "value length must be at most 20 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := api.Status_name[int32(m.GetStatus())]; !ok {
		err := SelectChatGroupRequestValidationError{
			field:  "Status",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SelectChatGroupRequestMultiError(errors)
	}

	return nil
}

// SelectChatGroupRequestMultiError is an error wrapping multiple validation
// errors returned by SelectChatGroupRequest.ValidateAll() if the designated
// constraints aren't met.
type SelectChatGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SelectChatGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SelectChatGroupRequestMultiError) AllErrors() []error { return m }

// SelectChatGroupRequestValidationError is the validation error returned by
// SelectChatGroupRequest.Validate if the designated constraints aren't met.
type SelectChatGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SelectChatGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SelectChatGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SelectChatGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SelectChatGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SelectChatGroupRequestValidationError) ErrorName() string {
	return "SelectChatGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SelectChatGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSelectChatGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SelectChatGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SelectChatGroupRequestValidationError{}

// Validate checks the field values on SelectChatGroupReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SelectChatGroupReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SelectChatGroupReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SelectChatGroupReplyMultiError, or nil if none found.
func (m *SelectChatGroupReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SelectChatGroupReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SelectChatGroupReplyValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SelectChatGroupReplyValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SelectChatGroupReplyValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SelectChatGroupReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SelectChatGroupReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SelectChatGroupReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SelectChatGroupReplyMultiError(errors)
	}

	return nil
}

// SelectChatGroupReplyMultiError is an error wrapping multiple validation
// errors returned by SelectChatGroupReply.ValidateAll() if the designated
// constraints aren't met.
type SelectChatGroupReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SelectChatGroupReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SelectChatGroupReplyMultiError) AllErrors() []error { return m }

// SelectChatGroupReplyValidationError is the validation error returned by
// SelectChatGroupReply.Validate if the designated constraints aren't met.
type SelectChatGroupReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SelectChatGroupReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SelectChatGroupReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SelectChatGroupReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SelectChatGroupReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SelectChatGroupReplyValidationError) ErrorName() string {
	return "SelectChatGroupReplyValidationError"
}

// Error satisfies the builtin error interface
func (e SelectChatGroupReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSelectChatGroupReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SelectChatGroupReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SelectChatGroupReplyValidationError{}

// Validate checks the field values on TestHookTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TestHookTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TestHookTemplateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TestHookTemplateRequestMultiError, or nil if none found.
func (m *TestHookTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TestHookTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetHook()) > 255 {
		err := TestHookTemplateRequestValidationError{
			field:  "Hook",
			reason: "value length must be at most 255 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := api.NotifyApp_name[int32(m.GetApp())]; !ok {
		err := TestHookTemplateRequestValidationError{
			field:  "App",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Template

	// no validation rules for Secret

	// no validation rules for Id

	if len(errors) > 0 {
		return TestHookTemplateRequestMultiError(errors)
	}

	return nil
}

// TestHookTemplateRequestMultiError is an error wrapping multiple validation
// errors returned by TestHookTemplateRequest.ValidateAll() if the designated
// constraints aren't met.
type TestHookTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TestHookTemplateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TestHookTemplateRequestMultiError) AllErrors() []error { return m }

// TestHookTemplateRequestValidationError is the validation error returned by
// TestHookTemplateRequest.Validate if the designated constraints aren't met.
type TestHookTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TestHookTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TestHookTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TestHookTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TestHookTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TestHookTemplateRequestValidationError) ErrorName() string {
	return "TestHookTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TestHookTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTestHookTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TestHookTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TestHookTemplateRequestValidationError{}

// Validate checks the field values on TestHookTemplateReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TestHookTemplateReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TestHookTemplateReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TestHookTemplateReplyMultiError, or nil if none found.
func (m *TestHookTemplateReply) ValidateAll() error {
	return m.validate(true)
}

func (m *TestHookTemplateReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Msg

	if len(errors) > 0 {
		return TestHookTemplateReplyMultiError(errors)
	}

	return nil
}

// TestHookTemplateReplyMultiError is an error wrapping multiple validation
// errors returned by TestHookTemplateReply.ValidateAll() if the designated
// constraints aren't met.
type TestHookTemplateReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TestHookTemplateReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TestHookTemplateReplyMultiError) AllErrors() []error { return m }

// TestHookTemplateReplyValidationError is the validation error returned by
// TestHookTemplateReply.Validate if the designated constraints aren't met.
type TestHookTemplateReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TestHookTemplateReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TestHookTemplateReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TestHookTemplateReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TestHookTemplateReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TestHookTemplateReplyValidationError) ErrorName() string {
	return "TestHookTemplateReplyValidationError"
}

// Error satisfies the builtin error interface
func (e TestHookTemplateReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTestHookTemplateReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TestHookTemplateReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TestHookTemplateReplyValidationError{}
