// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: server/prom/notify/notify.proto

package notify

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	api "prometheus-manager/api"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = api.Status(0)
)

// Validate checks the field values on CreateNotifyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateNotifyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateNotifyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateNotifyRequestMultiError, or nil if none found.
func (m *CreateNotifyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateNotifyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 2 || l > 20 {
		err := CreateNotifyRequestValidationError{
			field:  "Name",
			reason: "value length must be between 2 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRemark()) > 255 {
		err := CreateNotifyRequestValidationError{
			field:  "Remark",
			reason: "value length must be at most 255 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetMembers()) > 100 {
		err := CreateNotifyRequestValidationError{
			field:  "Members",
			reason: "value must contain no more than 100 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetMembers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateNotifyRequestValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateNotifyRequestValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateNotifyRequestValidationError{
					field:  fmt.Sprintf("Members[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(m.GetChatGroups()) > 100 {
		err := CreateNotifyRequestValidationError{
			field:  "ChatGroups",
			reason: "value must contain no more than 100 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	_CreateNotifyRequest_ChatGroups_Unique := make(map[uint32]struct{}, len(m.GetChatGroups()))

	for idx, item := range m.GetChatGroups() {
		_, _ = idx, item

		if _, exists := _CreateNotifyRequest_ChatGroups_Unique[item]; exists {
			err := CreateNotifyRequestValidationError{
				field:  fmt.Sprintf("ChatGroups[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_CreateNotifyRequest_ChatGroups_Unique[item] = struct{}{}
		}

		// no validation rules for ChatGroups[idx]
	}

	if len(errors) > 0 {
		return CreateNotifyRequestMultiError(errors)
	}

	return nil
}

// CreateNotifyRequestMultiError is an error wrapping multiple validation
// errors returned by CreateNotifyRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateNotifyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateNotifyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateNotifyRequestMultiError) AllErrors() []error { return m }

// CreateNotifyRequestValidationError is the validation error returned by
// CreateNotifyRequest.Validate if the designated constraints aren't met.
type CreateNotifyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNotifyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNotifyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNotifyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNotifyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNotifyRequestValidationError) ErrorName() string {
	return "CreateNotifyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNotifyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNotifyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNotifyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNotifyRequestValidationError{}

// Validate checks the field values on CreateNotifyReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateNotifyReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateNotifyReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateNotifyReplyMultiError, or nil if none found.
func (m *CreateNotifyReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateNotifyReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateNotifyReplyMultiError(errors)
	}

	return nil
}

// CreateNotifyReplyMultiError is an error wrapping multiple validation errors
// returned by CreateNotifyReply.ValidateAll() if the designated constraints
// aren't met.
type CreateNotifyReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateNotifyReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateNotifyReplyMultiError) AllErrors() []error { return m }

// CreateNotifyReplyValidationError is the validation error returned by
// CreateNotifyReply.Validate if the designated constraints aren't met.
type CreateNotifyReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNotifyReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNotifyReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNotifyReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNotifyReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNotifyReplyValidationError) ErrorName() string {
	return "CreateNotifyReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNotifyReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNotifyReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNotifyReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNotifyReplyValidationError{}

// Validate checks the field values on UpdateNotifyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateNotifyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateNotifyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateNotifyRequestMultiError, or nil if none found.
func (m *UpdateNotifyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateNotifyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateNotifyRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 2 || l > 20 {
		err := UpdateNotifyRequestValidationError{
			field:  "Name",
			reason: "value length must be between 2 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRemark()) > 255 {
		err := UpdateNotifyRequestValidationError{
			field:  "Remark",
			reason: "value length must be at most 255 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetMembers()) > 100 {
		err := UpdateNotifyRequestValidationError{
			field:  "Members",
			reason: "value must contain no more than 100 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetMembers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateNotifyRequestValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateNotifyRequestValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateNotifyRequestValidationError{
					field:  fmt.Sprintf("Members[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(m.GetChatGroups()) > 100 {
		err := UpdateNotifyRequestValidationError{
			field:  "ChatGroups",
			reason: "value must contain no more than 100 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	_UpdateNotifyRequest_ChatGroups_Unique := make(map[uint32]struct{}, len(m.GetChatGroups()))

	for idx, item := range m.GetChatGroups() {
		_, _ = idx, item

		if _, exists := _UpdateNotifyRequest_ChatGroups_Unique[item]; exists {
			err := UpdateNotifyRequestValidationError{
				field:  fmt.Sprintf("ChatGroups[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_UpdateNotifyRequest_ChatGroups_Unique[item] = struct{}{}
		}

		// no validation rules for ChatGroups[idx]
	}

	if _, ok := api.Status_name[int32(m.GetStatus())]; !ok {
		err := UpdateNotifyRequestValidationError{
			field:  "Status",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateNotifyRequestMultiError(errors)
	}

	return nil
}

// UpdateNotifyRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateNotifyRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateNotifyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateNotifyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateNotifyRequestMultiError) AllErrors() []error { return m }

// UpdateNotifyRequestValidationError is the validation error returned by
// UpdateNotifyRequest.Validate if the designated constraints aren't met.
type UpdateNotifyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNotifyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNotifyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNotifyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNotifyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNotifyRequestValidationError) ErrorName() string {
	return "UpdateNotifyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNotifyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNotifyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNotifyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNotifyRequestValidationError{}

// Validate checks the field values on UpdateNotifyReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateNotifyReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateNotifyReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateNotifyReplyMultiError, or nil if none found.
func (m *UpdateNotifyReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateNotifyReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return UpdateNotifyReplyMultiError(errors)
	}

	return nil
}

// UpdateNotifyReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateNotifyReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateNotifyReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateNotifyReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateNotifyReplyMultiError) AllErrors() []error { return m }

// UpdateNotifyReplyValidationError is the validation error returned by
// UpdateNotifyReply.Validate if the designated constraints aren't met.
type UpdateNotifyReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNotifyReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNotifyReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNotifyReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNotifyReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNotifyReplyValidationError) ErrorName() string {
	return "UpdateNotifyReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNotifyReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNotifyReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNotifyReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNotifyReplyValidationError{}

// Validate checks the field values on DeleteNotifyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteNotifyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteNotifyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteNotifyRequestMultiError, or nil if none found.
func (m *DeleteNotifyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteNotifyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteNotifyRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteNotifyRequestMultiError(errors)
	}

	return nil
}

// DeleteNotifyRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteNotifyRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteNotifyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteNotifyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteNotifyRequestMultiError) AllErrors() []error { return m }

// DeleteNotifyRequestValidationError is the validation error returned by
// DeleteNotifyRequest.Validate if the designated constraints aren't met.
type DeleteNotifyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteNotifyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteNotifyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteNotifyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteNotifyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteNotifyRequestValidationError) ErrorName() string {
	return "DeleteNotifyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteNotifyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteNotifyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteNotifyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteNotifyRequestValidationError{}

// Validate checks the field values on DeleteNotifyReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteNotifyReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteNotifyReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteNotifyReplyMultiError, or nil if none found.
func (m *DeleteNotifyReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteNotifyReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteNotifyReplyMultiError(errors)
	}

	return nil
}

// DeleteNotifyReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteNotifyReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteNotifyReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteNotifyReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteNotifyReplyMultiError) AllErrors() []error { return m }

// DeleteNotifyReplyValidationError is the validation error returned by
// DeleteNotifyReply.Validate if the designated constraints aren't met.
type DeleteNotifyReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteNotifyReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteNotifyReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteNotifyReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteNotifyReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteNotifyReplyValidationError) ErrorName() string {
	return "DeleteNotifyReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteNotifyReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteNotifyReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteNotifyReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteNotifyReplyValidationError{}

// Validate checks the field values on GetNotifyRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetNotifyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNotifyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNotifyRequestMultiError, or nil if none found.
func (m *GetNotifyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNotifyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetNotifyRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetNotifyRequestMultiError(errors)
	}

	return nil
}

// GetNotifyRequestMultiError is an error wrapping multiple validation errors
// returned by GetNotifyRequest.ValidateAll() if the designated constraints
// aren't met.
type GetNotifyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNotifyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNotifyRequestMultiError) AllErrors() []error { return m }

// GetNotifyRequestValidationError is the validation error returned by
// GetNotifyRequest.Validate if the designated constraints aren't met.
type GetNotifyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNotifyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNotifyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNotifyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNotifyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNotifyRequestValidationError) ErrorName() string { return "GetNotifyRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetNotifyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNotifyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNotifyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNotifyRequestValidationError{}

// Validate checks the field values on GetNotifyReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetNotifyReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNotifyReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetNotifyReplyMultiError,
// or nil if none found.
func (m *GetNotifyReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNotifyReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetNotifyReplyValidationError{
					field:  "Detail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetNotifyReplyValidationError{
					field:  "Detail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetNotifyReplyValidationError{
				field:  "Detail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetNotifyReplyMultiError(errors)
	}

	return nil
}

// GetNotifyReplyMultiError is an error wrapping multiple validation errors
// returned by GetNotifyReply.ValidateAll() if the designated constraints
// aren't met.
type GetNotifyReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNotifyReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNotifyReplyMultiError) AllErrors() []error { return m }

// GetNotifyReplyValidationError is the validation error returned by
// GetNotifyReply.Validate if the designated constraints aren't met.
type GetNotifyReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNotifyReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNotifyReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNotifyReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNotifyReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNotifyReplyValidationError) ErrorName() string { return "GetNotifyReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetNotifyReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNotifyReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNotifyReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNotifyReplyValidationError{}

// Validate checks the field values on ListNotifyRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListNotifyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListNotifyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListNotifyRequestMultiError, or nil if none found.
func (m *ListNotifyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListNotifyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() == nil {
		err := ListNotifyRequestValidationError{
			field:  "Page",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListNotifyRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListNotifyRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListNotifyRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetKeyword()) > 20 {
		err := ListNotifyRequestValidationError{
			field:  "Keyword",
			reason: "value length must be at most 20 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := api.Status_name[int32(m.GetStatus())]; !ok {
		err := ListNotifyRequestValidationError{
			field:  "Status",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListNotifyRequestMultiError(errors)
	}

	return nil
}

// ListNotifyRequestMultiError is an error wrapping multiple validation errors
// returned by ListNotifyRequest.ValidateAll() if the designated constraints
// aren't met.
type ListNotifyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListNotifyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListNotifyRequestMultiError) AllErrors() []error { return m }

// ListNotifyRequestValidationError is the validation error returned by
// ListNotifyRequest.Validate if the designated constraints aren't met.
type ListNotifyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNotifyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNotifyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNotifyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNotifyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNotifyRequestValidationError) ErrorName() string {
	return "ListNotifyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListNotifyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNotifyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNotifyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNotifyRequestValidationError{}

// Validate checks the field values on ListNotifyReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListNotifyReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListNotifyReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListNotifyReplyMultiError, or nil if none found.
func (m *ListNotifyReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListNotifyReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListNotifyReplyValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListNotifyReplyValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListNotifyReplyValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListNotifyReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListNotifyReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListNotifyReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListNotifyReplyMultiError(errors)
	}

	return nil
}

// ListNotifyReplyMultiError is an error wrapping multiple validation errors
// returned by ListNotifyReply.ValidateAll() if the designated constraints
// aren't met.
type ListNotifyReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListNotifyReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListNotifyReplyMultiError) AllErrors() []error { return m }

// ListNotifyReplyValidationError is the validation error returned by
// ListNotifyReply.Validate if the designated constraints aren't met.
type ListNotifyReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNotifyReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNotifyReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNotifyReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNotifyReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNotifyReplyValidationError) ErrorName() string { return "ListNotifyReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListNotifyReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNotifyReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNotifyReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNotifyReplyValidationError{}

// Validate checks the field values on SelectNotifyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SelectNotifyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SelectNotifyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SelectNotifyRequestMultiError, or nil if none found.
func (m *SelectNotifyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SelectNotifyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() == nil {
		err := SelectNotifyRequestValidationError{
			field:  "Page",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SelectNotifyRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SelectNotifyRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SelectNotifyRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetKeyword()) > 20 {
		err := SelectNotifyRequestValidationError{
			field:  "Keyword",
			reason: "value length must be at most 20 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := api.Status_name[int32(m.GetStatus())]; !ok {
		err := SelectNotifyRequestValidationError{
			field:  "Status",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SelectNotifyRequestMultiError(errors)
	}

	return nil
}

// SelectNotifyRequestMultiError is an error wrapping multiple validation
// errors returned by SelectNotifyRequest.ValidateAll() if the designated
// constraints aren't met.
type SelectNotifyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SelectNotifyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SelectNotifyRequestMultiError) AllErrors() []error { return m }

// SelectNotifyRequestValidationError is the validation error returned by
// SelectNotifyRequest.Validate if the designated constraints aren't met.
type SelectNotifyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SelectNotifyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SelectNotifyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SelectNotifyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SelectNotifyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SelectNotifyRequestValidationError) ErrorName() string {
	return "SelectNotifyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SelectNotifyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSelectNotifyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SelectNotifyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SelectNotifyRequestValidationError{}

// Validate checks the field values on SelectNotifyReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SelectNotifyReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SelectNotifyReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SelectNotifyReplyMultiError, or nil if none found.
func (m *SelectNotifyReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SelectNotifyReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SelectNotifyReplyValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SelectNotifyReplyValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SelectNotifyReplyValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SelectNotifyReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SelectNotifyReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SelectNotifyReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SelectNotifyReplyMultiError(errors)
	}

	return nil
}

// SelectNotifyReplyMultiError is an error wrapping multiple validation errors
// returned by SelectNotifyReply.ValidateAll() if the designated constraints
// aren't met.
type SelectNotifyReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SelectNotifyReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SelectNotifyReplyMultiError) AllErrors() []error { return m }

// SelectNotifyReplyValidationError is the validation error returned by
// SelectNotifyReply.Validate if the designated constraints aren't met.
type SelectNotifyReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SelectNotifyReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SelectNotifyReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SelectNotifyReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SelectNotifyReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SelectNotifyReplyValidationError) ErrorName() string {
	return "SelectNotifyReplyValidationError"
}

// Error satisfies the builtin error interface
func (e SelectNotifyReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSelectNotifyReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SelectNotifyReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SelectNotifyReplyValidationError{}
