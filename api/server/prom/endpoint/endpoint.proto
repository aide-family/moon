syntax = "proto3";

package api.server.prom.endpoint;

import "google/api/annotations.proto";
import "validate/validate.proto";
import "model.proto";
import "base.proto";

option go_package = "prometheus-manager/api/server/prom/endpoint;endpoint";
option java_multiple_files = true;
option java_package = "api.server.prom.endpoint";

// 监控端点管理模块相关接口
service Endpoint {
  // 添加监控端点
  rpc AppendEndpoint (AppendEndpointRequest) returns (AppendEndpointReply) {
    option (google.api.http) = {
      post: "/api/v1/endpoint/append"
      body: "*"
    };
  }

  // 删除监控端点
  rpc DeleteEndpoint (DeleteEndpointRequest) returns (DeleteEndpointReply) {
    option (google.api.http) = {
      post: "/api/v1/endpoint/delete"
      body: "*"
    };
  }

  // 编辑端点信息
  rpc EditEndpoint (EditEndpointRequest) returns (EditEndpointReply) {
    option (google.api.http) = {
      post: "/api/v1/endpoint/edit"
      body: "*"
    };
  }

  // 批量修改端点状态
  rpc BatchEditEndpointStatus (BatchEditEndpointStatusRequest) returns (BatchEditEndpointStatusReply) {
    option (google.api.http) = {
      post: "/api/v1/endpoint/batch/status"
      body: "*"
    };
  }

  // 获取监控端点详情
  rpc GetEndpoint (GetEndpointRequest) returns (GetEndpointReply) {
    option (google.api.http) = {
      post: "/api/v1/endpoint/detail"
      body: "*"
    };
  }

  // 获取监控端点列表
  rpc ListEndpoint (ListEndpointRequest) returns (ListEndpointReply) {
    option (google.api.http) = {
      post: "/api/v1/endpoint/list"
      body: "*"
    };
  }

  // 获取监控端点下拉列表
  rpc SelectEndpoint (SelectEndpointRequest) returns (SelectEndpointReply) {
    option (google.api.http) = {
      post: "/api/v1/endpoint/select"
      body: "*"
    };
  }
}

// 添加监控端点请求参数
message AppendEndpointRequest {
  // 采集器名称
  string name = 2 [(validate.rules).string = {
    min_len: 2
    max_len: 32
  }];
  // 端点
  string endpoint = 3;
  // 备注
  string remark = 5 [(validate.rules).string.max_len = 255];
}
// 添加监控端点响应参数
message AppendEndpointReply {
  uint32 id = 1;
}

// 删除监控端点请求参数
message DeleteEndpointRequest {
  uint32 id = 1;
}
// 删除监控端点响应参数
message DeleteEndpointReply {
  uint32 id = 1;
}

// 编辑端点信息请求参数
message EditEndpointRequest {
  uint32 id = 1 [(validate.rules).uint32.gt = 0];
  string name = 2 [(validate.rules).string = {
    min_len: 2
    max_len: 32
  }];
  string endpoint = 3;
  string remark = 5 [(validate.rules).string.max_len = 255];
}
// 编辑端点信息响应参数
message EditEndpointReply {
  uint32 id = 1;
}

// 批量修改端点状态请求参数
message BatchEditEndpointStatusRequest {
  repeated uint32 ids = 1 [(validate.rules).repeated.min_items = 1];
  Status status = 2 [(validate.rules).enum = {
    not_in: [0],
    defined_only: true
  }];
}
// 批量修改端点状态响应参数
message BatchEditEndpointStatusReply {
  repeated uint32 ids = 1;
}

// 获取监控端点详情请求参数
message GetEndpointRequest {
  uint32 id = 1 [(validate.rules).uint32.gt = 0];
}
// 获取监控端点详情响应参数
message GetEndpointReply {
  // 监控端点信息
  PrometheusServerItem detail = 1;
}

// 获取监控端点列表请求参数
message ListEndpointRequest {
  PageRequest page = 1 [(validate.rules).message.required = true];
  string keyword = 2 [(validate.rules).string.max_len = 32];
  Status status = 3 [(validate.rules).enum = {
    defined_only: true
  }];
}
message ListEndpointReply {
  // 响应信息
  PageReply page = 1;
  // 监控端点列表
  repeated PrometheusServerItem list = 2;
}

// 获取监控端点下拉列表请求参数
message SelectEndpointRequest {
  PageRequest page = 1 [(validate.rules).message.required = true];
  string keyword = 2 [(validate.rules).string.max_len = 32];
  Status status = 3 [(validate.rules).enum = {
    defined_only: true
  }];
}
message SelectEndpointReply {
  // 响应信息
  PageReply page = 1;
  // 监控端点下拉列表
  repeated PrometheusServerSelectItem list = 2;
}
