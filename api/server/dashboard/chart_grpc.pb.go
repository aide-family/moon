// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: server/dashboard/chart.proto

package dashboard

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Chart_CreateChart_FullMethodName = "/api.server.dashboard.Chart/CreateChart"
	Chart_UpdateChart_FullMethodName = "/api.server.dashboard.Chart/UpdateChart"
	Chart_DeleteChart_FullMethodName = "/api.server.dashboard.Chart/DeleteChart"
	Chart_GetChart_FullMethodName    = "/api.server.dashboard.Chart/GetChart"
	Chart_ListChart_FullMethodName   = "/api.server.dashboard.Chart/ListChart"
)

// ChartClient is the client API for Chart service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChartClient interface {
	// 创建新图表
	CreateChart(ctx context.Context, in *CreateChartRequest, opts ...grpc.CallOption) (*CreateChartReply, error)
	// 更新图表
	UpdateChart(ctx context.Context, in *UpdateChartRequest, opts ...grpc.CallOption) (*UpdateChartReply, error)
	// 删除图表
	DeleteChart(ctx context.Context, in *DeleteChartRequest, opts ...grpc.CallOption) (*DeleteChartReply, error)
	// 图表详情
	GetChart(ctx context.Context, in *GetChartRequest, opts ...grpc.CallOption) (*GetChartReply, error)
	// 图表列表
	ListChart(ctx context.Context, in *ListChartRequest, opts ...grpc.CallOption) (*ListChartReply, error)
}

type chartClient struct {
	cc grpc.ClientConnInterface
}

func NewChartClient(cc grpc.ClientConnInterface) ChartClient {
	return &chartClient{cc}
}

func (c *chartClient) CreateChart(ctx context.Context, in *CreateChartRequest, opts ...grpc.CallOption) (*CreateChartReply, error) {
	out := new(CreateChartReply)
	err := c.cc.Invoke(ctx, Chart_CreateChart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chartClient) UpdateChart(ctx context.Context, in *UpdateChartRequest, opts ...grpc.CallOption) (*UpdateChartReply, error) {
	out := new(UpdateChartReply)
	err := c.cc.Invoke(ctx, Chart_UpdateChart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chartClient) DeleteChart(ctx context.Context, in *DeleteChartRequest, opts ...grpc.CallOption) (*DeleteChartReply, error) {
	out := new(DeleteChartReply)
	err := c.cc.Invoke(ctx, Chart_DeleteChart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chartClient) GetChart(ctx context.Context, in *GetChartRequest, opts ...grpc.CallOption) (*GetChartReply, error) {
	out := new(GetChartReply)
	err := c.cc.Invoke(ctx, Chart_GetChart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chartClient) ListChart(ctx context.Context, in *ListChartRequest, opts ...grpc.CallOption) (*ListChartReply, error) {
	out := new(ListChartReply)
	err := c.cc.Invoke(ctx, Chart_ListChart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChartServer is the server API for Chart service.
// All implementations must embed UnimplementedChartServer
// for forward compatibility
type ChartServer interface {
	// 创建新图表
	CreateChart(context.Context, *CreateChartRequest) (*CreateChartReply, error)
	// 更新图表
	UpdateChart(context.Context, *UpdateChartRequest) (*UpdateChartReply, error)
	// 删除图表
	DeleteChart(context.Context, *DeleteChartRequest) (*DeleteChartReply, error)
	// 图表详情
	GetChart(context.Context, *GetChartRequest) (*GetChartReply, error)
	// 图表列表
	ListChart(context.Context, *ListChartRequest) (*ListChartReply, error)
	mustEmbedUnimplementedChartServer()
}

// UnimplementedChartServer must be embedded to have forward compatible implementations.
type UnimplementedChartServer struct {
}

func (UnimplementedChartServer) CreateChart(context.Context, *CreateChartRequest) (*CreateChartReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChart not implemented")
}
func (UnimplementedChartServer) UpdateChart(context.Context, *UpdateChartRequest) (*UpdateChartReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChart not implemented")
}
func (UnimplementedChartServer) DeleteChart(context.Context, *DeleteChartRequest) (*DeleteChartReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChart not implemented")
}
func (UnimplementedChartServer) GetChart(context.Context, *GetChartRequest) (*GetChartReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChart not implemented")
}
func (UnimplementedChartServer) ListChart(context.Context, *ListChartRequest) (*ListChartReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChart not implemented")
}
func (UnimplementedChartServer) mustEmbedUnimplementedChartServer() {}

// UnsafeChartServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChartServer will
// result in compilation errors.
type UnsafeChartServer interface {
	mustEmbedUnimplementedChartServer()
}

func RegisterChartServer(s grpc.ServiceRegistrar, srv ChartServer) {
	s.RegisterService(&Chart_ServiceDesc, srv)
}

func _Chart_CreateChart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChartServer).CreateChart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chart_CreateChart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChartServer).CreateChart(ctx, req.(*CreateChartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chart_UpdateChart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChartServer).UpdateChart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chart_UpdateChart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChartServer).UpdateChart(ctx, req.(*UpdateChartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chart_DeleteChart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChartServer).DeleteChart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chart_DeleteChart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChartServer).DeleteChart(ctx, req.(*DeleteChartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chart_GetChart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChartServer).GetChart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chart_GetChart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChartServer).GetChart(ctx, req.(*GetChartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chart_ListChart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChartServer).ListChart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chart_ListChart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChartServer).ListChart(ctx, req.(*ListChartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Chart_ServiceDesc is the grpc.ServiceDesc for Chart service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Chart_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.server.dashboard.Chart",
	HandlerType: (*ChartServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateChart",
			Handler:    _Chart_CreateChart_Handler,
		},
		{
			MethodName: "UpdateChart",
			Handler:    _Chart_UpdateChart_Handler,
		},
		{
			MethodName: "DeleteChart",
			Handler:    _Chart_DeleteChart_Handler,
		},
		{
			MethodName: "GetChart",
			Handler:    _Chart_GetChart_Handler,
		},
		{
			MethodName: "ListChart",
			Handler:    _Chart_ListChart_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server/dashboard/chart.proto",
}
