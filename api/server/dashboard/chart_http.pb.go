// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.3
// - protoc             v3.19.4
// source: server/dashboard/chart.proto

package dashboard

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationChartCreateChart = "/api.server.dashboard.Chart/CreateChart"
const OperationChartDeleteChart = "/api.server.dashboard.Chart/DeleteChart"
const OperationChartGetChart = "/api.server.dashboard.Chart/GetChart"
const OperationChartListChart = "/api.server.dashboard.Chart/ListChart"
const OperationChartUpdateChart = "/api.server.dashboard.Chart/UpdateChart"

type ChartHTTPServer interface {
	CreateChart(context.Context, *CreateChartRequest) (*CreateChartReply, error)
	DeleteChart(context.Context, *DeleteChartRequest) (*DeleteChartReply, error)
	GetChart(context.Context, *GetChartRequest) (*GetChartReply, error)
	ListChart(context.Context, *ListChartRequest) (*ListChartReply, error)
	UpdateChart(context.Context, *UpdateChartRequest) (*UpdateChartReply, error)
}

func RegisterChartHTTPServer(s *http.Server, srv ChartHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/dashboard/chart/create", _Chart_CreateChart0_HTTP_Handler(srv))
	r.POST("/api/v1/dashboard/chart/update", _Chart_UpdateChart0_HTTP_Handler(srv))
	r.POST("/api/v1/dashboard/chart/delete", _Chart_DeleteChart0_HTTP_Handler(srv))
	r.POST("/api/v1/dashboard/chart/detail", _Chart_GetChart0_HTTP_Handler(srv))
	r.POST("/api/v1/dashboard/chart/list", _Chart_ListChart0_HTTP_Handler(srv))
}

func _Chart_CreateChart0_HTTP_Handler(srv ChartHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateChartRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationChartCreateChart)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateChart(ctx, req.(*CreateChartRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateChartReply)
		return ctx.Result(200, reply)
	}
}

func _Chart_UpdateChart0_HTTP_Handler(srv ChartHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateChartRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationChartUpdateChart)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateChart(ctx, req.(*UpdateChartRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateChartReply)
		return ctx.Result(200, reply)
	}
}

func _Chart_DeleteChart0_HTTP_Handler(srv ChartHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteChartRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationChartDeleteChart)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteChart(ctx, req.(*DeleteChartRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteChartReply)
		return ctx.Result(200, reply)
	}
}

func _Chart_GetChart0_HTTP_Handler(srv ChartHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetChartRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationChartGetChart)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetChart(ctx, req.(*GetChartRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetChartReply)
		return ctx.Result(200, reply)
	}
}

func _Chart_ListChart0_HTTP_Handler(srv ChartHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListChartRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationChartListChart)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListChart(ctx, req.(*ListChartRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListChartReply)
		return ctx.Result(200, reply)
	}
}

type ChartHTTPClient interface {
	CreateChart(ctx context.Context, req *CreateChartRequest, opts ...http.CallOption) (rsp *CreateChartReply, err error)
	DeleteChart(ctx context.Context, req *DeleteChartRequest, opts ...http.CallOption) (rsp *DeleteChartReply, err error)
	GetChart(ctx context.Context, req *GetChartRequest, opts ...http.CallOption) (rsp *GetChartReply, err error)
	ListChart(ctx context.Context, req *ListChartRequest, opts ...http.CallOption) (rsp *ListChartReply, err error)
	UpdateChart(ctx context.Context, req *UpdateChartRequest, opts ...http.CallOption) (rsp *UpdateChartReply, err error)
}

type ChartHTTPClientImpl struct {
	cc *http.Client
}

func NewChartHTTPClient(client *http.Client) ChartHTTPClient {
	return &ChartHTTPClientImpl{client}
}

func (c *ChartHTTPClientImpl) CreateChart(ctx context.Context, in *CreateChartRequest, opts ...http.CallOption) (*CreateChartReply, error) {
	var out CreateChartReply
	pattern := "/api/v1/dashboard/chart/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationChartCreateChart))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ChartHTTPClientImpl) DeleteChart(ctx context.Context, in *DeleteChartRequest, opts ...http.CallOption) (*DeleteChartReply, error) {
	var out DeleteChartReply
	pattern := "/api/v1/dashboard/chart/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationChartDeleteChart))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ChartHTTPClientImpl) GetChart(ctx context.Context, in *GetChartRequest, opts ...http.CallOption) (*GetChartReply, error) {
	var out GetChartReply
	pattern := "/api/v1/dashboard/chart/detail"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationChartGetChart))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ChartHTTPClientImpl) ListChart(ctx context.Context, in *ListChartRequest, opts ...http.CallOption) (*ListChartReply, error) {
	var out ListChartReply
	pattern := "/api/v1/dashboard/chart/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationChartListChart))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ChartHTTPClientImpl) UpdateChart(ctx context.Context, in *UpdateChartRequest, opts ...http.CallOption) (*UpdateChartReply, error) {
	var out UpdateChartReply
	pattern := "/api/v1/dashboard/chart/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationChartUpdateChart))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
