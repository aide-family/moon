// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: server/alarm/page/page.proto

package page

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AlarmPage_CreateAlarmPage_FullMethodName            = "/api.server.alarm.page.AlarmPage/CreateAlarmPage"
	AlarmPage_UpdateAlarmPage_FullMethodName            = "/api.server.alarm.page.AlarmPage/UpdateAlarmPage"
	AlarmPage_BatchUpdateAlarmPageStatus_FullMethodName = "/api.server.alarm.page.AlarmPage/BatchUpdateAlarmPageStatus"
	AlarmPage_DeleteAlarmPage_FullMethodName            = "/api.server.alarm.page.AlarmPage/DeleteAlarmPage"
	AlarmPage_BatchDeleteAlarmPage_FullMethodName       = "/api.server.alarm.page.AlarmPage/BatchDeleteAlarmPage"
	AlarmPage_GetAlarmPage_FullMethodName               = "/api.server.alarm.page.AlarmPage/GetAlarmPage"
	AlarmPage_ListAlarmPage_FullMethodName              = "/api.server.alarm.page.AlarmPage/ListAlarmPage"
	AlarmPage_SelectAlarmPage_FullMethodName            = "/api.server.alarm.page.AlarmPage/SelectAlarmPage"
	AlarmPage_CountAlarmPage_FullMethodName             = "/api.server.alarm.page.AlarmPage/CountAlarmPage"
	AlarmPage_ListMyAlarmPage_FullMethodName            = "/api.server.alarm.page.AlarmPage/ListMyAlarmPage"
	AlarmPage_MyAlarmPagesConfig_FullMethodName         = "/api.server.alarm.page.AlarmPage/MyAlarmPagesConfig"
)

// AlarmPageClient is the client API for AlarmPage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AlarmPageClient interface {
	// 创建告警页面
	CreateAlarmPage(ctx context.Context, in *CreateAlarmPageRequest, opts ...grpc.CallOption) (*CreateAlarmPageReply, error)
	// 更新告警页面
	UpdateAlarmPage(ctx context.Context, in *UpdateAlarmPageRequest, opts ...grpc.CallOption) (*UpdateAlarmPageReply, error)
	// 批量更新告警页面状态
	BatchUpdateAlarmPageStatus(ctx context.Context, in *BatchUpdateAlarmPageStatusRequest, opts ...grpc.CallOption) (*BatchUpdateAlarmPageStatusReply, error)
	// 删除告警页面
	DeleteAlarmPage(ctx context.Context, in *DeleteAlarmPageRequest, opts ...grpc.CallOption) (*DeleteAlarmPageReply, error)
	// 批量删除告警页面
	BatchDeleteAlarmPage(ctx context.Context, in *BatchDeleteAlarmPageRequest, opts ...grpc.CallOption) (*BatchDeleteAlarmPageReply, error)
	// 获取告警页面
	GetAlarmPage(ctx context.Context, in *GetAlarmPageRequest, opts ...grpc.CallOption) (*GetAlarmPageReply, error)
	// 获取告警页面列表
	ListAlarmPage(ctx context.Context, in *ListAlarmPageRequest, opts ...grpc.CallOption) (*ListAlarmPageReply, error)
	// 获取告警页面下拉列表
	SelectAlarmPage(ctx context.Context, in *SelectAlarmPageRequest, opts ...grpc.CallOption) (*SelectAlarmPageReply, error)
	// 统计各告警页面告警的数量
	CountAlarmPage(ctx context.Context, in *CountAlarmPageRequest, opts ...grpc.CallOption) (*CountAlarmPageReply, error)
	// 我的告警页面列表
	ListMyAlarmPage(ctx context.Context, in *ListMyAlarmPageRequest, opts ...grpc.CallOption) (*ListMyAlarmPageReply, error)
	// 配置我的告警页面列表
	MyAlarmPagesConfig(ctx context.Context, in *MyAlarmPagesConfigRequest, opts ...grpc.CallOption) (*MyAlarmPagesConfigReply, error)
}

type alarmPageClient struct {
	cc grpc.ClientConnInterface
}

func NewAlarmPageClient(cc grpc.ClientConnInterface) AlarmPageClient {
	return &alarmPageClient{cc}
}

func (c *alarmPageClient) CreateAlarmPage(ctx context.Context, in *CreateAlarmPageRequest, opts ...grpc.CallOption) (*CreateAlarmPageReply, error) {
	out := new(CreateAlarmPageReply)
	err := c.cc.Invoke(ctx, AlarmPage_CreateAlarmPage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alarmPageClient) UpdateAlarmPage(ctx context.Context, in *UpdateAlarmPageRequest, opts ...grpc.CallOption) (*UpdateAlarmPageReply, error) {
	out := new(UpdateAlarmPageReply)
	err := c.cc.Invoke(ctx, AlarmPage_UpdateAlarmPage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alarmPageClient) BatchUpdateAlarmPageStatus(ctx context.Context, in *BatchUpdateAlarmPageStatusRequest, opts ...grpc.CallOption) (*BatchUpdateAlarmPageStatusReply, error) {
	out := new(BatchUpdateAlarmPageStatusReply)
	err := c.cc.Invoke(ctx, AlarmPage_BatchUpdateAlarmPageStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alarmPageClient) DeleteAlarmPage(ctx context.Context, in *DeleteAlarmPageRequest, opts ...grpc.CallOption) (*DeleteAlarmPageReply, error) {
	out := new(DeleteAlarmPageReply)
	err := c.cc.Invoke(ctx, AlarmPage_DeleteAlarmPage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alarmPageClient) BatchDeleteAlarmPage(ctx context.Context, in *BatchDeleteAlarmPageRequest, opts ...grpc.CallOption) (*BatchDeleteAlarmPageReply, error) {
	out := new(BatchDeleteAlarmPageReply)
	err := c.cc.Invoke(ctx, AlarmPage_BatchDeleteAlarmPage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alarmPageClient) GetAlarmPage(ctx context.Context, in *GetAlarmPageRequest, opts ...grpc.CallOption) (*GetAlarmPageReply, error) {
	out := new(GetAlarmPageReply)
	err := c.cc.Invoke(ctx, AlarmPage_GetAlarmPage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alarmPageClient) ListAlarmPage(ctx context.Context, in *ListAlarmPageRequest, opts ...grpc.CallOption) (*ListAlarmPageReply, error) {
	out := new(ListAlarmPageReply)
	err := c.cc.Invoke(ctx, AlarmPage_ListAlarmPage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alarmPageClient) SelectAlarmPage(ctx context.Context, in *SelectAlarmPageRequest, opts ...grpc.CallOption) (*SelectAlarmPageReply, error) {
	out := new(SelectAlarmPageReply)
	err := c.cc.Invoke(ctx, AlarmPage_SelectAlarmPage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alarmPageClient) CountAlarmPage(ctx context.Context, in *CountAlarmPageRequest, opts ...grpc.CallOption) (*CountAlarmPageReply, error) {
	out := new(CountAlarmPageReply)
	err := c.cc.Invoke(ctx, AlarmPage_CountAlarmPage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alarmPageClient) ListMyAlarmPage(ctx context.Context, in *ListMyAlarmPageRequest, opts ...grpc.CallOption) (*ListMyAlarmPageReply, error) {
	out := new(ListMyAlarmPageReply)
	err := c.cc.Invoke(ctx, AlarmPage_ListMyAlarmPage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alarmPageClient) MyAlarmPagesConfig(ctx context.Context, in *MyAlarmPagesConfigRequest, opts ...grpc.CallOption) (*MyAlarmPagesConfigReply, error) {
	out := new(MyAlarmPagesConfigReply)
	err := c.cc.Invoke(ctx, AlarmPage_MyAlarmPagesConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AlarmPageServer is the server API for AlarmPage service.
// All implementations must embed UnimplementedAlarmPageServer
// for forward compatibility
type AlarmPageServer interface {
	// 创建告警页面
	CreateAlarmPage(context.Context, *CreateAlarmPageRequest) (*CreateAlarmPageReply, error)
	// 更新告警页面
	UpdateAlarmPage(context.Context, *UpdateAlarmPageRequest) (*UpdateAlarmPageReply, error)
	// 批量更新告警页面状态
	BatchUpdateAlarmPageStatus(context.Context, *BatchUpdateAlarmPageStatusRequest) (*BatchUpdateAlarmPageStatusReply, error)
	// 删除告警页面
	DeleteAlarmPage(context.Context, *DeleteAlarmPageRequest) (*DeleteAlarmPageReply, error)
	// 批量删除告警页面
	BatchDeleteAlarmPage(context.Context, *BatchDeleteAlarmPageRequest) (*BatchDeleteAlarmPageReply, error)
	// 获取告警页面
	GetAlarmPage(context.Context, *GetAlarmPageRequest) (*GetAlarmPageReply, error)
	// 获取告警页面列表
	ListAlarmPage(context.Context, *ListAlarmPageRequest) (*ListAlarmPageReply, error)
	// 获取告警页面下拉列表
	SelectAlarmPage(context.Context, *SelectAlarmPageRequest) (*SelectAlarmPageReply, error)
	// 统计各告警页面告警的数量
	CountAlarmPage(context.Context, *CountAlarmPageRequest) (*CountAlarmPageReply, error)
	// 我的告警页面列表
	ListMyAlarmPage(context.Context, *ListMyAlarmPageRequest) (*ListMyAlarmPageReply, error)
	// 配置我的告警页面列表
	MyAlarmPagesConfig(context.Context, *MyAlarmPagesConfigRequest) (*MyAlarmPagesConfigReply, error)
	mustEmbedUnimplementedAlarmPageServer()
}

// UnimplementedAlarmPageServer must be embedded to have forward compatible implementations.
type UnimplementedAlarmPageServer struct {
}

func (UnimplementedAlarmPageServer) CreateAlarmPage(context.Context, *CreateAlarmPageRequest) (*CreateAlarmPageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAlarmPage not implemented")
}
func (UnimplementedAlarmPageServer) UpdateAlarmPage(context.Context, *UpdateAlarmPageRequest) (*UpdateAlarmPageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAlarmPage not implemented")
}
func (UnimplementedAlarmPageServer) BatchUpdateAlarmPageStatus(context.Context, *BatchUpdateAlarmPageStatusRequest) (*BatchUpdateAlarmPageStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchUpdateAlarmPageStatus not implemented")
}
func (UnimplementedAlarmPageServer) DeleteAlarmPage(context.Context, *DeleteAlarmPageRequest) (*DeleteAlarmPageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAlarmPage not implemented")
}
func (UnimplementedAlarmPageServer) BatchDeleteAlarmPage(context.Context, *BatchDeleteAlarmPageRequest) (*BatchDeleteAlarmPageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeleteAlarmPage not implemented")
}
func (UnimplementedAlarmPageServer) GetAlarmPage(context.Context, *GetAlarmPageRequest) (*GetAlarmPageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlarmPage not implemented")
}
func (UnimplementedAlarmPageServer) ListAlarmPage(context.Context, *ListAlarmPageRequest) (*ListAlarmPageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAlarmPage not implemented")
}
func (UnimplementedAlarmPageServer) SelectAlarmPage(context.Context, *SelectAlarmPageRequest) (*SelectAlarmPageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectAlarmPage not implemented")
}
func (UnimplementedAlarmPageServer) CountAlarmPage(context.Context, *CountAlarmPageRequest) (*CountAlarmPageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountAlarmPage not implemented")
}
func (UnimplementedAlarmPageServer) ListMyAlarmPage(context.Context, *ListMyAlarmPageRequest) (*ListMyAlarmPageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMyAlarmPage not implemented")
}
func (UnimplementedAlarmPageServer) MyAlarmPagesConfig(context.Context, *MyAlarmPagesConfigRequest) (*MyAlarmPagesConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MyAlarmPagesConfig not implemented")
}
func (UnimplementedAlarmPageServer) mustEmbedUnimplementedAlarmPageServer() {}

// UnsafeAlarmPageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AlarmPageServer will
// result in compilation errors.
type UnsafeAlarmPageServer interface {
	mustEmbedUnimplementedAlarmPageServer()
}

func RegisterAlarmPageServer(s grpc.ServiceRegistrar, srv AlarmPageServer) {
	s.RegisterService(&AlarmPage_ServiceDesc, srv)
}

func _AlarmPage_CreateAlarmPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAlarmPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlarmPageServer).CreateAlarmPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlarmPage_CreateAlarmPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlarmPageServer).CreateAlarmPage(ctx, req.(*CreateAlarmPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlarmPage_UpdateAlarmPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAlarmPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlarmPageServer).UpdateAlarmPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlarmPage_UpdateAlarmPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlarmPageServer).UpdateAlarmPage(ctx, req.(*UpdateAlarmPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlarmPage_BatchUpdateAlarmPageStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchUpdateAlarmPageStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlarmPageServer).BatchUpdateAlarmPageStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlarmPage_BatchUpdateAlarmPageStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlarmPageServer).BatchUpdateAlarmPageStatus(ctx, req.(*BatchUpdateAlarmPageStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlarmPage_DeleteAlarmPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAlarmPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlarmPageServer).DeleteAlarmPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlarmPage_DeleteAlarmPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlarmPageServer).DeleteAlarmPage(ctx, req.(*DeleteAlarmPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlarmPage_BatchDeleteAlarmPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchDeleteAlarmPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlarmPageServer).BatchDeleteAlarmPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlarmPage_BatchDeleteAlarmPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlarmPageServer).BatchDeleteAlarmPage(ctx, req.(*BatchDeleteAlarmPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlarmPage_GetAlarmPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAlarmPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlarmPageServer).GetAlarmPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlarmPage_GetAlarmPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlarmPageServer).GetAlarmPage(ctx, req.(*GetAlarmPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlarmPage_ListAlarmPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAlarmPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlarmPageServer).ListAlarmPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlarmPage_ListAlarmPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlarmPageServer).ListAlarmPage(ctx, req.(*ListAlarmPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlarmPage_SelectAlarmPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectAlarmPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlarmPageServer).SelectAlarmPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlarmPage_SelectAlarmPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlarmPageServer).SelectAlarmPage(ctx, req.(*SelectAlarmPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlarmPage_CountAlarmPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountAlarmPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlarmPageServer).CountAlarmPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlarmPage_CountAlarmPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlarmPageServer).CountAlarmPage(ctx, req.(*CountAlarmPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlarmPage_ListMyAlarmPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMyAlarmPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlarmPageServer).ListMyAlarmPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlarmPage_ListMyAlarmPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlarmPageServer).ListMyAlarmPage(ctx, req.(*ListMyAlarmPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlarmPage_MyAlarmPagesConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyAlarmPagesConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlarmPageServer).MyAlarmPagesConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlarmPage_MyAlarmPagesConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlarmPageServer).MyAlarmPagesConfig(ctx, req.(*MyAlarmPagesConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AlarmPage_ServiceDesc is the grpc.ServiceDesc for AlarmPage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AlarmPage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.server.alarm.page.AlarmPage",
	HandlerType: (*AlarmPageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAlarmPage",
			Handler:    _AlarmPage_CreateAlarmPage_Handler,
		},
		{
			MethodName: "UpdateAlarmPage",
			Handler:    _AlarmPage_UpdateAlarmPage_Handler,
		},
		{
			MethodName: "BatchUpdateAlarmPageStatus",
			Handler:    _AlarmPage_BatchUpdateAlarmPageStatus_Handler,
		},
		{
			MethodName: "DeleteAlarmPage",
			Handler:    _AlarmPage_DeleteAlarmPage_Handler,
		},
		{
			MethodName: "BatchDeleteAlarmPage",
			Handler:    _AlarmPage_BatchDeleteAlarmPage_Handler,
		},
		{
			MethodName: "GetAlarmPage",
			Handler:    _AlarmPage_GetAlarmPage_Handler,
		},
		{
			MethodName: "ListAlarmPage",
			Handler:    _AlarmPage_ListAlarmPage_Handler,
		},
		{
			MethodName: "SelectAlarmPage",
			Handler:    _AlarmPage_SelectAlarmPage_Handler,
		},
		{
			MethodName: "CountAlarmPage",
			Handler:    _AlarmPage_CountAlarmPage_Handler,
		},
		{
			MethodName: "ListMyAlarmPage",
			Handler:    _AlarmPage_ListMyAlarmPage_Handler,
		},
		{
			MethodName: "MyAlarmPagesConfig",
			Handler:    _AlarmPage_MyAlarmPagesConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server/alarm/page/page.proto",
}
