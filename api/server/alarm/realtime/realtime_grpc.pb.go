// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: server/alarm/realtime/realtime.proto

package realtime

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RealtimeClient is the client API for Realtime service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RealtimeClient interface {
	// 获取实时告警数据详情
	GetRealtime(ctx context.Context, in *GetRealtimeRequest, opts ...grpc.CallOption) (*GetRealtimeReply, error)
	// 获取实时告警数据列表
	ListRealtime(ctx context.Context, in *ListRealtimeRequest, opts ...grpc.CallOption) (*ListRealtimeReply, error)
	// 告警认领/介入
	Intervene(ctx context.Context, in *InterveneRequest, opts ...grpc.CallOption) (*InterveneReply, error)
	// 告警升级, 用于提高优先级, 增加敏感度(抑制后不允许升级)
	Upgrade(ctx context.Context, in *UpgradeRequest, opts ...grpc.CallOption) (*UpgradeReply, error)
	// 告警抑制(升级后不允许抑制)
	Suppress(ctx context.Context, in *SuppressRequest, opts ...grpc.CallOption) (*SuppressReply, error)
}

type realtimeClient struct {
	cc grpc.ClientConnInterface
}

func NewRealtimeClient(cc grpc.ClientConnInterface) RealtimeClient {
	return &realtimeClient{cc}
}

func (c *realtimeClient) GetRealtime(ctx context.Context, in *GetRealtimeRequest, opts ...grpc.CallOption) (*GetRealtimeReply, error) {
	out := new(GetRealtimeReply)
	err := c.cc.Invoke(ctx, "/api.server.alarm.realtime.Realtime/GetRealtime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *realtimeClient) ListRealtime(ctx context.Context, in *ListRealtimeRequest, opts ...grpc.CallOption) (*ListRealtimeReply, error) {
	out := new(ListRealtimeReply)
	err := c.cc.Invoke(ctx, "/api.server.alarm.realtime.Realtime/ListRealtime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *realtimeClient) Intervene(ctx context.Context, in *InterveneRequest, opts ...grpc.CallOption) (*InterveneReply, error) {
	out := new(InterveneReply)
	err := c.cc.Invoke(ctx, "/api.server.alarm.realtime.Realtime/Intervene", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *realtimeClient) Upgrade(ctx context.Context, in *UpgradeRequest, opts ...grpc.CallOption) (*UpgradeReply, error) {
	out := new(UpgradeReply)
	err := c.cc.Invoke(ctx, "/api.server.alarm.realtime.Realtime/Upgrade", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *realtimeClient) Suppress(ctx context.Context, in *SuppressRequest, opts ...grpc.CallOption) (*SuppressReply, error) {
	out := new(SuppressReply)
	err := c.cc.Invoke(ctx, "/api.server.alarm.realtime.Realtime/Suppress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RealtimeServer is the server API for Realtime service.
// All implementations must embed UnimplementedRealtimeServer
// for forward compatibility
type RealtimeServer interface {
	// 获取实时告警数据详情
	GetRealtime(context.Context, *GetRealtimeRequest) (*GetRealtimeReply, error)
	// 获取实时告警数据列表
	ListRealtime(context.Context, *ListRealtimeRequest) (*ListRealtimeReply, error)
	// 告警认领/介入
	Intervene(context.Context, *InterveneRequest) (*InterveneReply, error)
	// 告警升级, 用于提高优先级, 增加敏感度(抑制后不允许升级)
	Upgrade(context.Context, *UpgradeRequest) (*UpgradeReply, error)
	// 告警抑制(升级后不允许抑制)
	Suppress(context.Context, *SuppressRequest) (*SuppressReply, error)
	mustEmbedUnimplementedRealtimeServer()
}

// UnimplementedRealtimeServer must be embedded to have forward compatible implementations.
type UnimplementedRealtimeServer struct {
}

func (UnimplementedRealtimeServer) GetRealtime(context.Context, *GetRealtimeRequest) (*GetRealtimeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRealtime not implemented")
}
func (UnimplementedRealtimeServer) ListRealtime(context.Context, *ListRealtimeRequest) (*ListRealtimeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRealtime not implemented")
}
func (UnimplementedRealtimeServer) Intervene(context.Context, *InterveneRequest) (*InterveneReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Intervene not implemented")
}
func (UnimplementedRealtimeServer) Upgrade(context.Context, *UpgradeRequest) (*UpgradeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upgrade not implemented")
}
func (UnimplementedRealtimeServer) Suppress(context.Context, *SuppressRequest) (*SuppressReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Suppress not implemented")
}
func (UnimplementedRealtimeServer) mustEmbedUnimplementedRealtimeServer() {}

// UnsafeRealtimeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RealtimeServer will
// result in compilation errors.
type UnsafeRealtimeServer interface {
	mustEmbedUnimplementedRealtimeServer()
}

func RegisterRealtimeServer(s grpc.ServiceRegistrar, srv RealtimeServer) {
	s.RegisterService(&Realtime_ServiceDesc, srv)
}

func _Realtime_GetRealtime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRealtimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RealtimeServer).GetRealtime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.server.alarm.realtime.Realtime/GetRealtime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RealtimeServer).GetRealtime(ctx, req.(*GetRealtimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Realtime_ListRealtime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRealtimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RealtimeServer).ListRealtime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.server.alarm.realtime.Realtime/ListRealtime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RealtimeServer).ListRealtime(ctx, req.(*ListRealtimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Realtime_Intervene_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InterveneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RealtimeServer).Intervene(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.server.alarm.realtime.Realtime/Intervene",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RealtimeServer).Intervene(ctx, req.(*InterveneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Realtime_Upgrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RealtimeServer).Upgrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.server.alarm.realtime.Realtime/Upgrade",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RealtimeServer).Upgrade(ctx, req.(*UpgradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Realtime_Suppress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuppressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RealtimeServer).Suppress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.server.alarm.realtime.Realtime/Suppress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RealtimeServer).Suppress(ctx, req.(*SuppressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Realtime_ServiceDesc is the grpc.ServiceDesc for Realtime service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Realtime_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.server.alarm.realtime.Realtime",
	HandlerType: (*RealtimeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRealtime",
			Handler:    _Realtime_GetRealtime_Handler,
		},
		{
			MethodName: "ListRealtime",
			Handler:    _Realtime_ListRealtime_Handler,
		},
		{
			MethodName: "Intervene",
			Handler:    _Realtime_Intervene_Handler,
		},
		{
			MethodName: "Upgrade",
			Handler:    _Realtime_Upgrade_Handler,
		},
		{
			MethodName: "Suppress",
			Handler:    _Realtime_Suppress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server/alarm/realtime/realtime.proto",
}
