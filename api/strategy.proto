syntax = "proto3";

package api;

import "google/protobuf/duration.proto";
import "buf/validate/validate.proto";
import "datasource.proto";
import "enum.proto";

option go_package = "github.com/aide-family/moon/api;api";
option java_multiple_files = true;
option java_package = "api";

// metric数据策略定义
message MetricStrategyItem {
  // 策略名称
  string alert = 1 [(buf.validate.field).cel = {
    id: "Strategy_alert"
    expression: 'this.size() > 0'
    message: "策略名称不允许为空"
  }];
  // 策略语句
  string expr = 2 [(buf.validate.field).cel = {
    id: "Strategy_expr"
    expression: 'this.size() > 0'
    message: "策略语句不允许为空"
  }];
  // 策略持续时间
  google.protobuf.Duration for = 3;
  // 持续次数
  uint32 count = 4;
  // 持续的类型
  SustainType sustainType = 5 [(buf.validate.field).enum.defined_only = true];
  // 多数据源持续类型
  MultiDatasourceSustainType multiDatasourceSustainType = 6 [(buf.validate.field).enum.defined_only = true];
  // 策略标签
  map<string, string> labels = 7 [(buf.validate.field).cel = {
    id: "Strategy_labels"
    expression: 'this.size() > 0'
    message: "策略标签不允许为空"
  }];
  // 策略注解
  map<string, string> annotations = 8 [(buf.validate.field).cel = {
    id: "Strategy_annotations"
    expression: 'this.size() > 0'
    message: "策略注解不允许为空"
  }];
  // 执行频率
  google.protobuf.Duration interval = 9;
  // 数据源
  repeated Datasource datasource = 10 [(buf.validate.field).cel = {
    id: "Strategy_datasource"
    expression: 'this.size() > 0'
    message: "数据源不允许为空"
  }];
  // 策略ID, 用于标识唯一性
  uint32 id = 11 [(buf.validate.field).cel = {
    id: "Strategy_id"
    expression: 'this > 0'
    message: "策略ID必须大于0"
  }];
  // 策略状态
  Status status = 12 [(buf.validate.field).enum.defined_only = true];
  // 采样率
  uint32 step = 13;
  // 判断条件
  Condition condition = 14;
  // 阈值
  double threshold = 15;
  // 策略等级ID
  uint32 levelID = 16 [(buf.validate.field).cel = {
    id: "Strategy_level"
    expression: 'this > 0'
    message: "策略等级必须大于0"
  }];
  // 团队ID
  uint32 teamID = 17 [(buf.validate.field).cel = {
    id: "Strategy_team"
    expression: 'this > 0'
    message: "团队ID必须大于0"
  }];
  // 接收对象列表（告警组ID列表）
  repeated uint32 receiverGroupIDs = 18;
  repeated LabelNotices labelNotices = 19;
  StrategyType strategyType = 20;
}

// 域名证书或者端口监控策略定义
message DomainStrategyItem {
  // 策略ID
  uint32 strategyID = 1 [(buf.validate.field).cel = {
    id: "DomainStrategyItem_strategyID"
    expression: 'this > 0'
    message: "策略ID必须大于0"
  }];
  // 策略等级ID
  uint32 levelID = 2 [(buf.validate.field).cel = {
    id: "DomainStrategyItem_levelID"
    expression: 'this > 0'
    message: "策略等级ID必须大于0"
  }];
  // 团队ID
  uint32 teamID = 3 [(buf.validate.field).cel = {
    id: "DomainStrategyItem_teamID"
    expression: 'this > 0'
    message: "团队ID必须大于0"
  }];
  // 接收对象列表（告警组ID列表）
  repeated uint32 receiverGroupIDs = 4;
  // 策略状态
  Status status = 5 [(buf.validate.field).enum.defined_only = true];
  // 策略标签
  map<string, string> labels = 6 [(buf.validate.field).cel = {
    id: "DomainStrategyItem_labels"
    expression: 'this.size() > 0'
    message: "策略标签不允许为空"
  }];
  // 策略注解
  map<string, string> annotations = 7 [(buf.validate.field).cel = {
    id: "DomainStrategyItem_annotations"
    expression: 'this.size() > 0'
    message: "策略注解不允许为空"
  }];
  // 阈值
  int64 threshold = 8 [(buf.validate.field).cel = {
    id: "DomainStrategyItem_threshold"
    expression: 'this >= 0'
    message: "阈值必须大于等于0"
  }];
  // 域名
  string domain = 9 [(buf.validate.field).cel = {
    id: "DomainStrategyItem_domain"
    expression: 'this.size() > 0'
    message: "域名不允许为空"
  }];
  // 策略名称
  string alert = 20 [(buf.validate.field).cel = {
    id: "Strategy_alert"
    expression: 'this.size() > 0'
    message: "策略名称不允许为空"
  }];
  // 超时时间
  uint32 timeout = 21;
  // 执行频率
  google.protobuf.Duration interval = 22;
  // 端口
  uint32 port = 23 [(buf.validate.field).cel = {
    id: "DomainStrategyItem_port"
    expression: 'this > 0'
    message: "端口必须大于0"
  }];
  // 策略类型 vobj.StrategyType  端口监控 ｜ 域名监控
  StrategyType strategyType = 24;
}

// HTTP监控策略定义， 用于监控指定URL的响应时间、状态码
message HttpStrategyItem {
  // 策略类型 vobj.StrategyType  端口监控 ｜ 域名监控
  StrategyType strategyType = 1;
  // URL
  string url = 2 [(buf.validate.field).cel = {
    id: "HttpStrategyItem_url"
    expression: 'this.size() > 0'
    message: "URL不允许为空"
  }];
  // 策略ID
  uint32 strategyID = 3 [(buf.validate.field).cel = {
    id: "HttpStrategyItem_strategyID"
    expression: 'this > 0'
    message: "策略ID必须大于0"
  }];
  // 策略等级ID
  uint32 levelID = 4 [(buf.validate.field).cel = {
    id: "HttpStrategyItem_levelID"
    expression: 'this > 0'
    message: "策略等级ID必须大于0"
  }];
  // 团队ID
  uint32 teamID = 5 [(buf.validate.field).cel = {
    id: "HttpStrategyItem_teamID"
    expression: 'this > 0'
    message: "团队ID必须大于0"
  }];
  // 接收对象列表（告警组ID列表）
  repeated uint32 receiverGroupIDs = 6;
  // 策略状态
  Status status = 7 [(buf.validate.field).enum.defined_only = true];
  // 策略标签
  map<string, string> labels = 8 [(buf.validate.field).cel = {
    id: "HttpStrategyItem_labels"
    expression: 'this.size() > 0'
    message: "策略标签不允许为空"
  }];
  // 策略注解
  map<string, string> annotations = 9 [(buf.validate.field).cel = {
    id: "HttpStrategyItem_annotations"
    expression: 'this.size() > 0'
    message: "策略注解不允许为空"
  }];
  // 阈值
  int64 threshold = 10 [(buf.validate.field).cel = {
    id: "HttpStrategyItem_threshold"
    expression: 'this >= 0'
    message: "阈值必须大于等于0"
  }];
  // 超时时间
  uint32 timeout = 11;
  // 执行频率
  google.protobuf.Duration interval = 12;
  // 状态码
  uint32 statusCodes = 13;
  // 策略名称
  string alert = 14 [(buf.validate.field).cel = {
    id: "Strategy_alert"
    expression: 'this.size() > 0'
    message: "策略名称不允许为空"
  }];
  // 请求头
  map<string, string> headers = 15;
  // 请求体
  string body = 16;
  // 请求方式
  string method = 17;
}

// Ping监控策略定义， 用于监控指定IP的网络延迟、丢包率等
message PingStrategyItem {
  // 策略类型 vobj.StrategyType  端口监控 ｜ 域名监控
  StrategyType strategyType = 1;
  // 策略ID
  uint32 strategyID = 2 [(buf.validate.field).cel = {
    id: "PingStrategyItem_strategyID"
    expression: 'this > 0'
    message: "策略ID必须大于0"
  }];
  // 团队ID
  uint32 teamID = 3 [(buf.validate.field).cel = {
    id: "PingStrategyItem_teamID"
    expression: 'this > 0'
    message: "团队ID必须大于0"
  }];
  // 状态
  Status status = 4 [(buf.validate.field).enum.defined_only = true];
  // 策略名称
  string alert = 5 [(buf.validate.field).cel = {
    id: "Strategy_alert"
    expression: 'this.size() > 0'
    message: "策略名称不允许为空"
  }];
  // 执行频率
  google.protobuf.Duration interval = 6;
  // 策略等级ID
  uint32 levelID = 7 [(buf.validate.field).cel = {
    id: "PingStrategyItem_levelID"
    expression: 'this > 0'
    message: "策略等级ID必须大于0"
  }];
  // 超时时间
  uint32 timeout = 8;
  // 策略标签
  map<string, string> labels = 9 [(buf.validate.field).cel = {
    id: "PingStrategyItem_labels"
    expression: 'this.size() > 0'
    message: "策略标签不允许为空"
  }];
  // 策略注解
  map<string, string> annotations = 10 [(buf.validate.field).cel = {
    id: "PingStrategyItem_annotations"
    expression: 'this.size() > 0'
    message: "策略注解不允许为空"
  }];
  // 接收者
  repeated uint32 receiverGroupIDs = 11;
  // 域名或者IP
  string address = 12 [(buf.validate.field).cel = {
    id: "PingStrategyItem_address"
    expression: 'this.size() > 0'
    message: "域名或者IP不允许为空"
  }];
  // 总包数
  int64 totalCount = 13;
  // 成功包数
  int64 successCount = 14;
  // 丢包率
  double lossRate = 15;
  // 平均延迟
  int64 avgDelay = 16;
  // 最大延迟
  int64 maxDelay = 17;
  // 最小延迟
  int64 minDelay = 18;
  // 标准差
  int64 stdDev = 19;
}

message MQStrategyItem {
  // 策略类型 vobj.StrategyType  端口监控 ｜ 域名监控
  StrategyType strategyType = 1;
  // 策略ID
  uint32 strategyID = 2 [(buf.validate.field).cel = {
    id: "PingStrategyItem_strategyID"
    expression: 'this > 0'
    message: "策略ID必须大于0"
  }];
  // 团队ID
  uint32 teamID = 3 [(buf.validate.field).cel = {
    id: "PingStrategyItem_teamID"
    expression: 'this > 0'
    message: "团队ID必须大于0"
  }];
  // 状态
  Status status = 4 [(buf.validate.field).enum.defined_only = true];
  // 策略名称
  string alert = 5 [(buf.validate.field).cel = {
    id: "Strategy_alert"
    expression: 'this.size() > 0'
    message: "策略名称不允许为空"
  }];
  // 策略等级ID
  uint32 levelID = 7 [(buf.validate.field).cel = {
    id: "PingStrategyItem_levelID"
    expression: 'this > 0'
    message: "策略等级ID必须大于0"
  }];
  // 策略标签
  map<string, string> labels = 9 [(buf.validate.field).cel = {
    id: "PingStrategyItem_labels"
    expression: 'this.size() > 0'
    message: "策略标签不允许为空"
  }];
  // 策略注解
  map<string, string> annotations = 10 [(buf.validate.field).cel = {
    id: "PingStrategyItem_annotations"
    expression: 'this.size() > 0'
    message: "策略注解不允许为空"
  }];
  // 接收者
  repeated uint32 receiverGroupIDs = 11;
  // 值
  string value = 12;
  // 条件
  MQCondition condition = 13;
  // 数据类型
  MQDataType dataType = 14;
  // 策略语句
  string topic = 15 [(buf.validate.field).cel = {
    id: "Strategy_topic"
    expression: 'this.size() > 0'
    message: "主题不允许为空"
  }];
  // 数据源
  repeated MQDatasource datasource = 16 [(buf.validate.field).cel = {
    id: "Strategy_datasource"
    expression: 'this.size() > 0'
    message: "数据源不允许为空"
  }];
  // 数据 key 当前数据类型为json时，key不允许为空
  string dataKey = 17;

  // 当前数据类型为json时，key不允许为空
  option (buf.validate.message).cel = {
    message: '当前数据类型为 Object 时，数据 key 不允许为空'
    expression: 'this.dataType != 3 || this.dataKey.size() > 0'
  };
}

message LabelNotices {
  string key = 1;
  string value = 2;
  repeated uint32 receiverGroupIDs = 3;
}

// 类型元数据，每个对象都应该包含这个字段
// 表示这个对象的数据类型
message TypeMeta {
  // 类型
  string kind = 1;
}

// 对象元数据，每个对象都应该包含这个字段
// 相同类型数据的对象的唯一标识
message ObjectMeta {
  // 名称
  string name = 1;
}

// 过滤规则，过滤掉不需要的数据
message FilterRule {
  // 类型
  TypeMeta kind = 1;
  // 对象
  ObjectMeta object = 2;
  // 策略，规则的详细描述
  FilterRuleSpec spec = 3;
  // 状态,描述规则的状态
  Status status = 4;
}

message FilterRuleSpec {
  // 启用状态，默认启用
  bool enabled = 1;
  // 执行者
  string executor = 2;
  // 标签匹配，使用这个字段时，默认使用的匹配表达式是: IN
  map<string, string> matchLabels = 3;
  // 匹配表达式
  repeated LabelRequirement matchExpression = 4;
}

enum Operator {
  // 匹配操作
  Operator_UNKNOWN = 0;
  // 存在
  Operator_EXIST = 1;
  // 不存在
  Operator_NOT_EXIST = 2;
  // 包含
  Operator_IN = 3;
  // 不包含
  Operator_NOT_IN = 4;
}

message LabelRequirement {
  // key 是需要用于匹配的键，不能为空
  string key = 1;
  // 匹配操作是一组用于键值匹配的表达式，它包含以下操作：IN,NOT_IN,EXIST,NOT_EXIST
  Operator op = 2;
  // 需要匹配的值
  // 如何匹配表达式是 IN 或者 NOT_IN, values 必须不为空
  // 如何匹配表达式是 EXIST 或者 NOT_EXIST, values 必须为空，此时，匹配操作与values无关
  repeated string values = 3;
}

// 聚合规则，聚合相同指标的数据
message AggregateRule {
  // 类型
  TypeMeta kind = 1;
  // 对象
  ObjectMeta object = 2;
  // 策略
  AggregateRuleSpec spec = 3;
  // 状态
  Status status = 4;
}

message AggregateRuleSpec {
  // 启用状态，默认启用
  bool enabled = 1;
  // 执行者
  string executor = 2;
  // 聚合次数
  uint32 count = 3;
  // 聚合时间
  google.protobuf.Duration interval = 4;
  // 扩展配置
  map<string, string> extra = 5;
}


// 通知对象，每个通知对象包含多中告知对象的方式
message NotifyObject {
  // 类型
  TypeMeta kind = 1;
  // 对象
  ObjectMeta object = 2;
  // 策略
  NotifyObjectSpec spec = 3;
  // 状态
  Status status = 4;
}

message NotifyObjectSpec {
  // 启用状态，默认启用
  bool enabled = 1;
  // 发送配置
  repeated SendConfig config = 2;
}


// 通知配置，包含通知的方式和通知配置
message SendConfig {
  // 类型
  TypeMeta kind = 1;
  // 对象
  ObjectMeta object = 2;
  // 策略
  SendConfigSpec spec = 3;
  // 状态
  Status status = 4;
}

message SendConfigSpec {
  // 启用状态，默认启用
  bool enabled = 1;
  // 执行者
  string executor = 2;
  // 扩展配置
  map<string, string> config = 3;
}

// 通知规则，是通知对象和聚合规则的集合
// 通知规则包含一个聚合规则和一个通知对象
// 通知对象将在聚合完成后，收到需要发送的消息
message NotifyRule {
  // 类型
  TypeMeta kind = 1;
  // 对象
  ObjectMeta object = 2;
  // 策略
  NotifyRuleSpec spec = 3;
}

message NotifyRuleSpec {
  // 启用状态，默认启用
  bool enabled = 1;
  // 通知对象
  NotifyObject object = 2;
  //聚合规则
  AggregateRule aggregate = 3;
}

// 通知组，通知组包含多个通知规则和一个过滤规则
// 消息在发送之前，会现经过过滤规则进行过滤，如果过滤规则匹配，则用通知规则进行发送
message NotifyGroup {
  // 类型
  TypeMeta kind = 1;
  // 对象
  ObjectMeta object = 2;
  // 策略
  NotifyGroupSpec spec = 3;
}

message NotifyGroupSpec {
  // 启用状态，默认启用
  bool enabled = 1;
  // 通知规则
  repeated NotifyRule rule = 2;
  // 过滤规则,过滤规则可以为空，为空则表示不需要过滤
  FilterRule filter = 3;
}

message Message  {
  // 消息ID
  string id = 1;
  // 时间戳
  int64 timestamp = 2;
  // 消息内容
  map<string, string> content = 3;
  // 消息标签,在进行消息过滤时，使用这个字段进行过滤规则的匹配
  map<string, string> labels = 4;
  // 通知组，需要通知的对象组列表
  repeated NotifyGroup groups = 5;
}