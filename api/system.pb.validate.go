// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: system.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UserV1 with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserV1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserV1 with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UserV1MultiError, or nil if none found.
func (m *UserV1) ValidateAll() error {
	return m.validate(true)
}

func (m *UserV1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Username

	// no validation rules for Email

	// no validation rules for Phone

	// no validation rules for Status

	// no validation rules for Remark

	// no validation rules for Avatar

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	for idx, item := range m.GetRoles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserV1ValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserV1ValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserV1ValidationError{
					field:  fmt.Sprintf("Roles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Nickname

	// no validation rules for Gender

	if len(errors) > 0 {
		return UserV1MultiError(errors)
	}

	return nil
}

// UserV1MultiError is an error wrapping multiple validation errors returned by
// UserV1.ValidateAll() if the designated constraints aren't met.
type UserV1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserV1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserV1MultiError) AllErrors() []error { return m }

// UserV1ValidationError is the validation error returned by UserV1.Validate if
// the designated constraints aren't met.
type UserV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserV1ValidationError) ErrorName() string { return "UserV1ValidationError" }

// Error satisfies the builtin error interface
func (e UserV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserV1ValidationError{}

// Validate checks the field values on UserSelectV1 with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserSelectV1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserSelectV1 with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserSelectV1MultiError, or
// nil if none found.
func (m *UserSelectV1) ValidateAll() error {
	return m.validate(true)
}

func (m *UserSelectV1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	// no validation rules for Label

	// no validation rules for Status

	// no validation rules for Avatar

	// no validation rules for Nickname

	// no validation rules for Gender

	if len(errors) > 0 {
		return UserSelectV1MultiError(errors)
	}

	return nil
}

// UserSelectV1MultiError is an error wrapping multiple validation errors
// returned by UserSelectV1.ValidateAll() if the designated constraints aren't met.
type UserSelectV1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserSelectV1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserSelectV1MultiError) AllErrors() []error { return m }

// UserSelectV1ValidationError is the validation error returned by
// UserSelectV1.Validate if the designated constraints aren't met.
type UserSelectV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserSelectV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserSelectV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserSelectV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserSelectV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserSelectV1ValidationError) ErrorName() string { return "UserSelectV1ValidationError" }

// Error satisfies the builtin error interface
func (e UserSelectV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserSelectV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserSelectV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserSelectV1ValidationError{}

// Validate checks the field values on RoleV1 with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RoleV1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleV1 with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RoleV1MultiError, or nil if none found.
func (m *RoleV1) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleV1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Status

	// no validation rules for Remark

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RoleV1ValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RoleV1ValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RoleV1ValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetApis() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RoleV1ValidationError{
						field:  fmt.Sprintf("Apis[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RoleV1ValidationError{
						field:  fmt.Sprintf("Apis[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RoleV1ValidationError{
					field:  fmt.Sprintf("Apis[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RoleV1MultiError(errors)
	}

	return nil
}

// RoleV1MultiError is an error wrapping multiple validation errors returned by
// RoleV1.ValidateAll() if the designated constraints aren't met.
type RoleV1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleV1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleV1MultiError) AllErrors() []error { return m }

// RoleV1ValidationError is the validation error returned by RoleV1.Validate if
// the designated constraints aren't met.
type RoleV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleV1ValidationError) ErrorName() string { return "RoleV1ValidationError" }

// Error satisfies the builtin error interface
func (e RoleV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleV1ValidationError{}

// Validate checks the field values on RoleSelectV1 with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RoleSelectV1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleSelectV1 with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RoleSelectV1MultiError, or
// nil if none found.
func (m *RoleSelectV1) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleSelectV1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	// no validation rules for Label

	// no validation rules for Status

	// no validation rules for Remark

	if len(errors) > 0 {
		return RoleSelectV1MultiError(errors)
	}

	return nil
}

// RoleSelectV1MultiError is an error wrapping multiple validation errors
// returned by RoleSelectV1.ValidateAll() if the designated constraints aren't met.
type RoleSelectV1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleSelectV1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleSelectV1MultiError) AllErrors() []error { return m }

// RoleSelectV1ValidationError is the validation error returned by
// RoleSelectV1.Validate if the designated constraints aren't met.
type RoleSelectV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleSelectV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleSelectV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleSelectV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleSelectV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleSelectV1ValidationError) ErrorName() string { return "RoleSelectV1ValidationError" }

// Error satisfies the builtin error interface
func (e RoleSelectV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleSelectV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleSelectV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleSelectV1ValidationError{}

// Validate checks the field values on ApiV1 with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ApiV1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApiV1 with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ApiV1MultiError, or nil if none found.
func (m *ApiV1) ValidateAll() error {
	return m.validate(true)
}

func (m *ApiV1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Path

	// no validation rules for Method

	// no validation rules for Status

	// no validation rules for Remark

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	// no validation rules for Module

	// no validation rules for Domain

	if len(errors) > 0 {
		return ApiV1MultiError(errors)
	}

	return nil
}

// ApiV1MultiError is an error wrapping multiple validation errors returned by
// ApiV1.ValidateAll() if the designated constraints aren't met.
type ApiV1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApiV1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApiV1MultiError) AllErrors() []error { return m }

// ApiV1ValidationError is the validation error returned by ApiV1.Validate if
// the designated constraints aren't met.
type ApiV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApiV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApiV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApiV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApiV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApiV1ValidationError) ErrorName() string { return "ApiV1ValidationError" }

// Error satisfies the builtin error interface
func (e ApiV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApiV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApiV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApiV1ValidationError{}

// Validate checks the field values on ApiSelectV1 with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ApiSelectV1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApiSelectV1 with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ApiSelectV1MultiError, or
// nil if none found.
func (m *ApiSelectV1) ValidateAll() error {
	return m.validate(true)
}

func (m *ApiSelectV1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	// no validation rules for Label

	// no validation rules for Status

	// no validation rules for Remark

	// no validation rules for Module

	// no validation rules for Domain

	if len(errors) > 0 {
		return ApiSelectV1MultiError(errors)
	}

	return nil
}

// ApiSelectV1MultiError is an error wrapping multiple validation errors
// returned by ApiSelectV1.ValidateAll() if the designated constraints aren't met.
type ApiSelectV1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApiSelectV1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApiSelectV1MultiError) AllErrors() []error { return m }

// ApiSelectV1ValidationError is the validation error returned by
// ApiSelectV1.Validate if the designated constraints aren't met.
type ApiSelectV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApiSelectV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApiSelectV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApiSelectV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApiSelectV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApiSelectV1ValidationError) ErrorName() string { return "ApiSelectV1ValidationError" }

// Error satisfies the builtin error interface
func (e ApiSelectV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApiSelectV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApiSelectV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApiSelectV1ValidationError{}

// Validate checks the field values on ApiTree with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ApiTree) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApiTree with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ApiTreeMultiError, or nil if none found.
func (m *ApiTree) ValidateAll() error {
	return m.validate(true)
}

func (m *ApiTree) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Domain

	for idx, item := range m.GetModule() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ApiTreeValidationError{
						field:  fmt.Sprintf("Module[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ApiTreeValidationError{
						field:  fmt.Sprintf("Module[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ApiTreeValidationError{
					field:  fmt.Sprintf("Module[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for DomainName

	// no validation rules for DomainRemark

	if len(errors) > 0 {
		return ApiTreeMultiError(errors)
	}

	return nil
}

// ApiTreeMultiError is an error wrapping multiple validation errors returned
// by ApiTree.ValidateAll() if the designated constraints aren't met.
type ApiTreeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApiTreeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApiTreeMultiError) AllErrors() []error { return m }

// ApiTreeValidationError is the validation error returned by ApiTree.Validate
// if the designated constraints aren't met.
type ApiTreeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApiTreeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApiTreeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApiTreeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApiTreeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApiTreeValidationError) ErrorName() string { return "ApiTreeValidationError" }

// Error satisfies the builtin error interface
func (e ApiTreeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApiTree.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApiTreeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApiTreeValidationError{}

// Validate checks the field values on Module with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Module) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Module with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ModuleMultiError, or nil if none found.
func (m *Module) ValidateAll() error {
	return m.validate(true)
}

func (m *Module) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Module

	for idx, item := range m.GetApis() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ModuleValidationError{
						field:  fmt.Sprintf("Apis[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ModuleValidationError{
						field:  fmt.Sprintf("Apis[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ModuleValidationError{
					field:  fmt.Sprintf("Apis[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Name

	// no validation rules for Remark

	if len(errors) > 0 {
		return ModuleMultiError(errors)
	}

	return nil
}

// ModuleMultiError is an error wrapping multiple validation errors returned by
// Module.ValidateAll() if the designated constraints aren't met.
type ModuleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModuleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModuleMultiError) AllErrors() []error { return m }

// ModuleValidationError is the validation error returned by Module.Validate if
// the designated constraints aren't met.
type ModuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModuleValidationError) ErrorName() string { return "ModuleValidationError" }

// Error satisfies the builtin error interface
func (e ModuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModuleValidationError{}

// Validate checks the field values on SysLogV1Item with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SysLogV1Item) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysLogV1Item with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SysLogV1ItemMultiError, or
// nil if none found.
func (m *SysLogV1Item) ValidateAll() error {
	return m.validate(true)
}

func (m *SysLogV1Item) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Title

	// no validation rules for Content

	// no validation rules for ModuleId

	// no validation rules for ModuleName

	// no validation rules for CreatedAt

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SysLogV1ItemValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SysLogV1ItemValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SysLogV1ItemValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Action

	if len(errors) > 0 {
		return SysLogV1ItemMultiError(errors)
	}

	return nil
}

// SysLogV1ItemMultiError is an error wrapping multiple validation errors
// returned by SysLogV1Item.ValidateAll() if the designated constraints aren't met.
type SysLogV1ItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysLogV1ItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysLogV1ItemMultiError) AllErrors() []error { return m }

// SysLogV1ItemValidationError is the validation error returned by
// SysLogV1Item.Validate if the designated constraints aren't met.
type SysLogV1ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysLogV1ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysLogV1ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysLogV1ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysLogV1ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysLogV1ItemValidationError) ErrorName() string { return "SysLogV1ItemValidationError" }

// Error satisfies the builtin error interface
func (e SysLogV1ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysLogV1Item.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysLogV1ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysLogV1ItemValidationError{}
