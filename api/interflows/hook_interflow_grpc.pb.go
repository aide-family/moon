// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: interflows/hook_interflow.proto

package interflows

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HookInterflowClient is the client API for HookInterflow service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HookInterflowClient interface {
	Receive(ctx context.Context, in *ReceiveRequest, opts ...grpc.CallOption) (*ReceiveResponse, error)
}

type hookInterflowClient struct {
	cc grpc.ClientConnInterface
}

func NewHookInterflowClient(cc grpc.ClientConnInterface) HookInterflowClient {
	return &hookInterflowClient{cc}
}

func (c *hookInterflowClient) Receive(ctx context.Context, in *ReceiveRequest, opts ...grpc.CallOption) (*ReceiveResponse, error) {
	out := new(ReceiveResponse)
	err := c.cc.Invoke(ctx, "/api.interflows.HookInterflow/Receive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HookInterflowServer is the server API for HookInterflow service.
// All implementations must embed UnimplementedHookInterflowServer
// for forward compatibility
type HookInterflowServer interface {
	Receive(context.Context, *ReceiveRequest) (*ReceiveResponse, error)
	mustEmbedUnimplementedHookInterflowServer()
}

// UnimplementedHookInterflowServer must be embedded to have forward compatible implementations.
type UnimplementedHookInterflowServer struct {
}

func (UnimplementedHookInterflowServer) Receive(context.Context, *ReceiveRequest) (*ReceiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Receive not implemented")
}
func (UnimplementedHookInterflowServer) mustEmbedUnimplementedHookInterflowServer() {}

// UnsafeHookInterflowServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HookInterflowServer will
// result in compilation errors.
type UnsafeHookInterflowServer interface {
	mustEmbedUnimplementedHookInterflowServer()
}

func RegisterHookInterflowServer(s grpc.ServiceRegistrar, srv HookInterflowServer) {
	s.RegisterService(&HookInterflow_ServiceDesc, srv)
}

func _HookInterflow_Receive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HookInterflowServer).Receive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.interflows.HookInterflow/Receive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HookInterflowServer).Receive(ctx, req.(*ReceiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HookInterflow_ServiceDesc is the grpc.ServiceDesc for HookInterflow service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HookInterflow_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.interflows.HookInterflow",
	HandlerType: (*HookInterflowServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Receive",
			Handler:    _HookInterflow_Receive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "interflows/hook_interflow.proto",
}
