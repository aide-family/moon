// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: system/api.proto

package system

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	api "prometheus-manager/api"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = api.Action(0)
)

// Validate checks the field values on CreateApiRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateApiRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateApiRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateApiRequestMultiError, or nil if none found.
func (m *CreateApiRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateApiRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 2 || l > 20 {
		err := CreateApiRequestValidationError{
			field:  "Name",
			reason: "value length must be between 2 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPath()); l < 1 || l > 255 {
		err := CreateApiRequestValidationError{
			field:  "Path",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _CreateApiRequest_Method_InLookup[m.GetMethod()]; !ok {
		err := CreateApiRequestValidationError{
			field:  "Method",
			reason: "value must be in list [GET POST PUT DELETE HEAD PATCH OPTIONS]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRemark()) > 255 {
		err := CreateApiRequestValidationError{
			field:  "Remark",
			reason: "value length must be at most 255 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := api.ModuleType_name[int32(m.GetModule())]; !ok {
		err := CreateApiRequestValidationError{
			field:  "Module",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := api.DomainType_name[int32(m.GetDomain())]; !ok {
		err := CreateApiRequestValidationError{
			field:  "Domain",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateApiRequestMultiError(errors)
	}

	return nil
}

// CreateApiRequestMultiError is an error wrapping multiple validation errors
// returned by CreateApiRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateApiRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateApiRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateApiRequestMultiError) AllErrors() []error { return m }

// CreateApiRequestValidationError is the validation error returned by
// CreateApiRequest.Validate if the designated constraints aren't met.
type CreateApiRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateApiRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateApiRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateApiRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateApiRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateApiRequestValidationError) ErrorName() string { return "CreateApiRequestValidationError" }

// Error satisfies the builtin error interface
func (e CreateApiRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateApiRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateApiRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateApiRequestValidationError{}

var _CreateApiRequest_Method_InLookup = map[string]struct{}{
	"GET":     {},
	"POST":    {},
	"PUT":     {},
	"DELETE":  {},
	"HEAD":    {},
	"PATCH":   {},
	"OPTIONS": {},
}

// Validate checks the field values on CreateApiReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateApiReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateApiReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateApiReplyMultiError,
// or nil if none found.
func (m *CreateApiReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateApiReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateApiReplyMultiError(errors)
	}

	return nil
}

// CreateApiReplyMultiError is an error wrapping multiple validation errors
// returned by CreateApiReply.ValidateAll() if the designated constraints
// aren't met.
type CreateApiReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateApiReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateApiReplyMultiError) AllErrors() []error { return m }

// CreateApiReplyValidationError is the validation error returned by
// CreateApiReply.Validate if the designated constraints aren't met.
type CreateApiReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateApiReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateApiReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateApiReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateApiReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateApiReplyValidationError) ErrorName() string { return "CreateApiReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateApiReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateApiReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateApiReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateApiReplyValidationError{}

// Validate checks the field values on UpdateApiRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateApiRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateApiRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateApiRequestMultiError, or nil if none found.
func (m *UpdateApiRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateApiRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateApiRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 2 || l > 20 {
		err := UpdateApiRequestValidationError{
			field:  "Name",
			reason: "value length must be between 2 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPath()); l < 1 || l > 255 {
		err := UpdateApiRequestValidationError{
			field:  "Path",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _UpdateApiRequest_Method_InLookup[m.GetMethod()]; !ok {
		err := UpdateApiRequestValidationError{
			field:  "Method",
			reason: "value must be in list [GET POST PUT DELETE HEAD PATCH OPTIONS]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := api.Status_name[int32(m.GetStatus())]; !ok {
		err := UpdateApiRequestValidationError{
			field:  "Status",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRemark()) > 255 {
		err := UpdateApiRequestValidationError{
			field:  "Remark",
			reason: "value length must be at most 255 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := api.ModuleType_name[int32(m.GetModule())]; !ok {
		err := UpdateApiRequestValidationError{
			field:  "Module",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := api.DomainType_name[int32(m.GetDomain())]; !ok {
		err := UpdateApiRequestValidationError{
			field:  "Domain",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateApiRequestMultiError(errors)
	}

	return nil
}

// UpdateApiRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateApiRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateApiRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateApiRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateApiRequestMultiError) AllErrors() []error { return m }

// UpdateApiRequestValidationError is the validation error returned by
// UpdateApiRequest.Validate if the designated constraints aren't met.
type UpdateApiRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateApiRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateApiRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateApiRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateApiRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateApiRequestValidationError) ErrorName() string { return "UpdateApiRequestValidationError" }

// Error satisfies the builtin error interface
func (e UpdateApiRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateApiRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateApiRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateApiRequestValidationError{}

var _UpdateApiRequest_Method_InLookup = map[string]struct{}{
	"GET":     {},
	"POST":    {},
	"PUT":     {},
	"DELETE":  {},
	"HEAD":    {},
	"PATCH":   {},
	"OPTIONS": {},
}

// Validate checks the field values on UpdateApiReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateApiReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateApiReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateApiReplyMultiError,
// or nil if none found.
func (m *UpdateApiReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateApiReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return UpdateApiReplyMultiError(errors)
	}

	return nil
}

// UpdateApiReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateApiReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateApiReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateApiReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateApiReplyMultiError) AllErrors() []error { return m }

// UpdateApiReplyValidationError is the validation error returned by
// UpdateApiReply.Validate if the designated constraints aren't met.
type UpdateApiReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateApiReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateApiReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateApiReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateApiReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateApiReplyValidationError) ErrorName() string { return "UpdateApiReplyValidationError" }

// Error satisfies the builtin error interface
func (e UpdateApiReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateApiReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateApiReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateApiReplyValidationError{}

// Validate checks the field values on DeleteApiRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteApiRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteApiRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteApiRequestMultiError, or nil if none found.
func (m *DeleteApiRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteApiRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteApiRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteApiRequestMultiError(errors)
	}

	return nil
}

// DeleteApiRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteApiRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteApiRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteApiRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteApiRequestMultiError) AllErrors() []error { return m }

// DeleteApiRequestValidationError is the validation error returned by
// DeleteApiRequest.Validate if the designated constraints aren't met.
type DeleteApiRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteApiRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteApiRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteApiRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteApiRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteApiRequestValidationError) ErrorName() string { return "DeleteApiRequestValidationError" }

// Error satisfies the builtin error interface
func (e DeleteApiRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteApiRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteApiRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteApiRequestValidationError{}

// Validate checks the field values on DeleteApiReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteApiReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteApiReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteApiReplyMultiError,
// or nil if none found.
func (m *DeleteApiReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteApiReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteApiReplyMultiError(errors)
	}

	return nil
}

// DeleteApiReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteApiReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteApiReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteApiReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteApiReplyMultiError) AllErrors() []error { return m }

// DeleteApiReplyValidationError is the validation error returned by
// DeleteApiReply.Validate if the designated constraints aren't met.
type DeleteApiReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteApiReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteApiReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteApiReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteApiReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteApiReplyValidationError) ErrorName() string { return "DeleteApiReplyValidationError" }

// Error satisfies the builtin error interface
func (e DeleteApiReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteApiReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteApiReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteApiReplyValidationError{}

// Validate checks the field values on GetApiRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetApiRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetApiRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetApiRequestMultiError, or
// nil if none found.
func (m *GetApiRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetApiRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetApiRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetApiRequestMultiError(errors)
	}

	return nil
}

// GetApiRequestMultiError is an error wrapping multiple validation errors
// returned by GetApiRequest.ValidateAll() if the designated constraints
// aren't met.
type GetApiRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetApiRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetApiRequestMultiError) AllErrors() []error { return m }

// GetApiRequestValidationError is the validation error returned by
// GetApiRequest.Validate if the designated constraints aren't met.
type GetApiRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetApiRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetApiRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetApiRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetApiRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetApiRequestValidationError) ErrorName() string { return "GetApiRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetApiRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetApiRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetApiRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetApiRequestValidationError{}

// Validate checks the field values on GetApiReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetApiReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetApiReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetApiReplyMultiError, or
// nil if none found.
func (m *GetApiReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetApiReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetApiReplyValidationError{
					field:  "Detail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetApiReplyValidationError{
					field:  "Detail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetApiReplyValidationError{
				field:  "Detail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetApiReplyMultiError(errors)
	}

	return nil
}

// GetApiReplyMultiError is an error wrapping multiple validation errors
// returned by GetApiReply.ValidateAll() if the designated constraints aren't met.
type GetApiReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetApiReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetApiReplyMultiError) AllErrors() []error { return m }

// GetApiReplyValidationError is the validation error returned by
// GetApiReply.Validate if the designated constraints aren't met.
type GetApiReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetApiReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetApiReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetApiReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetApiReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetApiReplyValidationError) ErrorName() string { return "GetApiReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetApiReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetApiReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetApiReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetApiReplyValidationError{}

// Validate checks the field values on ListApiRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListApiRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListApiRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListApiRequestMultiError,
// or nil if none found.
func (m *ListApiRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListApiRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() == nil {
		err := ListApiRequestValidationError{
			field:  "Page",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListApiRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListApiRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListApiRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetKeyword()) > 20 {
		err := ListApiRequestValidationError{
			field:  "Keyword",
			reason: "value length must be at most 20 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListApiRequestMultiError(errors)
	}

	return nil
}

// ListApiRequestMultiError is an error wrapping multiple validation errors
// returned by ListApiRequest.ValidateAll() if the designated constraints
// aren't met.
type ListApiRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListApiRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListApiRequestMultiError) AllErrors() []error { return m }

// ListApiRequestValidationError is the validation error returned by
// ListApiRequest.Validate if the designated constraints aren't met.
type ListApiRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListApiRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListApiRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListApiRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListApiRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListApiRequestValidationError) ErrorName() string { return "ListApiRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListApiRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListApiRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListApiRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListApiRequestValidationError{}

// Validate checks the field values on ListApiReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListApiReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListApiReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListApiReplyMultiError, or
// nil if none found.
func (m *ListApiReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListApiReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListApiReplyValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListApiReplyValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListApiReplyValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListApiReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListApiReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListApiReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListApiReplyMultiError(errors)
	}

	return nil
}

// ListApiReplyMultiError is an error wrapping multiple validation errors
// returned by ListApiReply.ValidateAll() if the designated constraints aren't met.
type ListApiReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListApiReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListApiReplyMultiError) AllErrors() []error { return m }

// ListApiReplyValidationError is the validation error returned by
// ListApiReply.Validate if the designated constraints aren't met.
type ListApiReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListApiReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListApiReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListApiReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListApiReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListApiReplyValidationError) ErrorName() string { return "ListApiReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListApiReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListApiReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListApiReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListApiReplyValidationError{}

// Validate checks the field values on SelectApiRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SelectApiRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SelectApiRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SelectApiRequestMultiError, or nil if none found.
func (m *SelectApiRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SelectApiRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() == nil {
		err := SelectApiRequestValidationError{
			field:  "Page",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SelectApiRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SelectApiRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SelectApiRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetKeyword()) > 20 {
		err := SelectApiRequestValidationError{
			field:  "Keyword",
			reason: "value length must be at most 20 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SelectApiRequestMultiError(errors)
	}

	return nil
}

// SelectApiRequestMultiError is an error wrapping multiple validation errors
// returned by SelectApiRequest.ValidateAll() if the designated constraints
// aren't met.
type SelectApiRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SelectApiRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SelectApiRequestMultiError) AllErrors() []error { return m }

// SelectApiRequestValidationError is the validation error returned by
// SelectApiRequest.Validate if the designated constraints aren't met.
type SelectApiRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SelectApiRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SelectApiRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SelectApiRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SelectApiRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SelectApiRequestValidationError) ErrorName() string { return "SelectApiRequestValidationError" }

// Error satisfies the builtin error interface
func (e SelectApiRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSelectApiRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SelectApiRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SelectApiRequestValidationError{}

// Validate checks the field values on SelectApiReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SelectApiReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SelectApiReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SelectApiReplyMultiError,
// or nil if none found.
func (m *SelectApiReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SelectApiReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SelectApiReplyValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SelectApiReplyValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SelectApiReplyValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SelectApiReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SelectApiReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SelectApiReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SelectApiReplyMultiError(errors)
	}

	return nil
}

// SelectApiReplyMultiError is an error wrapping multiple validation errors
// returned by SelectApiReply.ValidateAll() if the designated constraints
// aren't met.
type SelectApiReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SelectApiReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SelectApiReplyMultiError) AllErrors() []error { return m }

// SelectApiReplyValidationError is the validation error returned by
// SelectApiReply.Validate if the designated constraints aren't met.
type SelectApiReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SelectApiReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SelectApiReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SelectApiReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SelectApiReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SelectApiReplyValidationError) ErrorName() string { return "SelectApiReplyValidationError" }

// Error satisfies the builtin error interface
func (e SelectApiReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSelectApiReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SelectApiReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SelectApiReplyValidationError{}

// Validate checks the field values on EditApiStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EditApiStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EditApiStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EditApiStatusRequestMultiError, or nil if none found.
func (m *EditApiStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EditApiStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetIds()); l < 1 || l > 100 {
		err := EditApiStatusRequestValidationError{
			field:  "Ids",
			reason: "value must contain between 1 and 100 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	_EditApiStatusRequest_Ids_Unique := make(map[uint32]struct{}, len(m.GetIds()))

	for idx, item := range m.GetIds() {
		_, _ = idx, item

		if _, exists := _EditApiStatusRequest_Ids_Unique[item]; exists {
			err := EditApiStatusRequestValidationError{
				field:  fmt.Sprintf("Ids[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_EditApiStatusRequest_Ids_Unique[item] = struct{}{}
		}

		if item <= 0 {
			err := EditApiStatusRequestValidationError{
				field:  fmt.Sprintf("Ids[%v]", idx),
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if _, ok := _EditApiStatusRequest_Status_NotInLookup[m.GetStatus()]; ok {
		err := EditApiStatusRequestValidationError{
			field:  "Status",
			reason: "value must not be in list [0]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := api.Status_name[int32(m.GetStatus())]; !ok {
		err := EditApiStatusRequestValidationError{
			field:  "Status",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return EditApiStatusRequestMultiError(errors)
	}

	return nil
}

// EditApiStatusRequestMultiError is an error wrapping multiple validation
// errors returned by EditApiStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type EditApiStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EditApiStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EditApiStatusRequestMultiError) AllErrors() []error { return m }

// EditApiStatusRequestValidationError is the validation error returned by
// EditApiStatusRequest.Validate if the designated constraints aren't met.
type EditApiStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditApiStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditApiStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditApiStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditApiStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditApiStatusRequestValidationError) ErrorName() string {
	return "EditApiStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EditApiStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditApiStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditApiStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditApiStatusRequestValidationError{}

var _EditApiStatusRequest_Status_NotInLookup = map[api.Status]struct{}{
	0: {},
}

// Validate checks the field values on EditApiStatusReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EditApiStatusReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EditApiStatusReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EditApiStatusReplyMultiError, or nil if none found.
func (m *EditApiStatusReply) ValidateAll() error {
	return m.validate(true)
}

func (m *EditApiStatusReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EditApiStatusReplyMultiError(errors)
	}

	return nil
}

// EditApiStatusReplyMultiError is an error wrapping multiple validation errors
// returned by EditApiStatusReply.ValidateAll() if the designated constraints
// aren't met.
type EditApiStatusReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EditApiStatusReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EditApiStatusReplyMultiError) AllErrors() []error { return m }

// EditApiStatusReplyValidationError is the validation error returned by
// EditApiStatusReply.Validate if the designated constraints aren't met.
type EditApiStatusReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditApiStatusReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditApiStatusReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditApiStatusReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditApiStatusReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditApiStatusReplyValidationError) ErrorName() string {
	return "EditApiStatusReplyValidationError"
}

// Error satisfies the builtin error interface
func (e EditApiStatusReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditApiStatusReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditApiStatusReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditApiStatusReplyValidationError{}

// Validate checks the field values on GetApiTreeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetApiTreeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetApiTreeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetApiTreeRequestMultiError, or nil if none found.
func (m *GetApiTreeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetApiTreeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetApiTreeRequestMultiError(errors)
	}

	return nil
}

// GetApiTreeRequestMultiError is an error wrapping multiple validation errors
// returned by GetApiTreeRequest.ValidateAll() if the designated constraints
// aren't met.
type GetApiTreeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetApiTreeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetApiTreeRequestMultiError) AllErrors() []error { return m }

// GetApiTreeRequestValidationError is the validation error returned by
// GetApiTreeRequest.Validate if the designated constraints aren't met.
type GetApiTreeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetApiTreeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetApiTreeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetApiTreeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetApiTreeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetApiTreeRequestValidationError) ErrorName() string {
	return "GetApiTreeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetApiTreeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetApiTreeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetApiTreeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetApiTreeRequestValidationError{}

// Validate checks the field values on GetApiTreeReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetApiTreeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetApiTreeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetApiTreeReplyMultiError, or nil if none found.
func (m *GetApiTreeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetApiTreeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTree() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetApiTreeReplyValidationError{
						field:  fmt.Sprintf("Tree[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetApiTreeReplyValidationError{
						field:  fmt.Sprintf("Tree[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetApiTreeReplyValidationError{
					field:  fmt.Sprintf("Tree[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetApiTreeReplyMultiError(errors)
	}

	return nil
}

// GetApiTreeReplyMultiError is an error wrapping multiple validation errors
// returned by GetApiTreeReply.ValidateAll() if the designated constraints
// aren't met.
type GetApiTreeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetApiTreeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetApiTreeReplyMultiError) AllErrors() []error { return m }

// GetApiTreeReplyValidationError is the validation error returned by
// GetApiTreeReply.Validate if the designated constraints aren't met.
type GetApiTreeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetApiTreeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetApiTreeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetApiTreeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetApiTreeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetApiTreeReplyValidationError) ErrorName() string { return "GetApiTreeReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetApiTreeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetApiTreeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetApiTreeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetApiTreeReplyValidationError{}

// Validate checks the field values on AuthorizeApiRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthorizeApiRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthorizeApiRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthorizeApiRequestMultiError, or nil if none found.
func (m *AuthorizeApiRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthorizeApiRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetModel()) < 1 {
		err := AuthorizeApiRequestValidationError{
			field:  "Model",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetModelId() <= 0 {
		err := AuthorizeApiRequestValidationError{
			field:  "ModelId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	_AuthorizeApiRequest_UserIds_Unique := make(map[uint32]struct{}, len(m.GetUserIds()))

	for idx, item := range m.GetUserIds() {
		_, _ = idx, item

		if _, exists := _AuthorizeApiRequest_UserIds_Unique[item]; exists {
			err := AuthorizeApiRequestValidationError{
				field:  fmt.Sprintf("UserIds[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_AuthorizeApiRequest_UserIds_Unique[item] = struct{}{}
		}

		if item <= 0 {
			err := AuthorizeApiRequestValidationError{
				field:  fmt.Sprintf("UserIds[%v]", idx),
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	_AuthorizeApiRequest_RoleIds_Unique := make(map[uint32]struct{}, len(m.GetRoleIds()))

	for idx, item := range m.GetRoleIds() {
		_, _ = idx, item

		if _, exists := _AuthorizeApiRequest_RoleIds_Unique[item]; exists {
			err := AuthorizeApiRequestValidationError{
				field:  fmt.Sprintf("RoleIds[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_AuthorizeApiRequest_RoleIds_Unique[item] = struct{}{}
		}

		if item <= 0 {
			err := AuthorizeApiRequestValidationError{
				field:  fmt.Sprintf("RoleIds[%v]", idx),
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if _, ok := api.Action_name[int32(m.GetOp())]; !ok {
		err := AuthorizeApiRequestValidationError{
			field:  "Op",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AuthorizeApiRequestMultiError(errors)
	}

	return nil
}

// AuthorizeApiRequestMultiError is an error wrapping multiple validation
// errors returned by AuthorizeApiRequest.ValidateAll() if the designated
// constraints aren't met.
type AuthorizeApiRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthorizeApiRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthorizeApiRequestMultiError) AllErrors() []error { return m }

// AuthorizeApiRequestValidationError is the validation error returned by
// AuthorizeApiRequest.Validate if the designated constraints aren't met.
type AuthorizeApiRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthorizeApiRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthorizeApiRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthorizeApiRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthorizeApiRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthorizeApiRequestValidationError) ErrorName() string {
	return "AuthorizeApiRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AuthorizeApiRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthorizeApiRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthorizeApiRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthorizeApiRequestValidationError{}

// Validate checks the field values on AuthorizeApiReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AuthorizeApiReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthorizeApiReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthorizeApiReplyMultiError, or nil if none found.
func (m *AuthorizeApiReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthorizeApiReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AuthorizeApiReplyMultiError(errors)
	}

	return nil
}

// AuthorizeApiReplyMultiError is an error wrapping multiple validation errors
// returned by AuthorizeApiReply.ValidateAll() if the designated constraints
// aren't met.
type AuthorizeApiReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthorizeApiReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthorizeApiReplyMultiError) AllErrors() []error { return m }

// AuthorizeApiReplyValidationError is the validation error returned by
// AuthorizeApiReply.Validate if the designated constraints aren't met.
type AuthorizeApiReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthorizeApiReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthorizeApiReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthorizeApiReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthorizeApiReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthorizeApiReplyValidationError) ErrorName() string {
	return "AuthorizeApiReplyValidationError"
}

// Error satisfies the builtin error interface
func (e AuthorizeApiReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthorizeApiReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthorizeApiReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthorizeApiReplyValidationError{}
