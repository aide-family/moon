syntax = "proto3";

package api.prom.strategy;

import "google/api/annotations.proto";
import "validate/validate.proto";
import "base.proto";
import "model.proto";

option go_package = "prometheus-manager/api/prom/strategy;strategy";
option java_multiple_files = true;
option java_package = "api.prom.strategy";

// 策略管理模块相关接口
service Strategy {
  // 创建策略
  rpc CreateStrategy (CreateStrategyRequest) returns (CreateStrategyReply) {
    option (google.api.http) = {
      post: "/api/v1/strategy/create"
      body: "*"
    };
  }

  // 更新策略
  rpc UpdateStrategy (UpdateStrategyRequest) returns (UpdateStrategyReply) {
    option (google.api.http) = {
      post: "/api/v1/strategy/update"
      body: "*"
    };
  }

  // 批量更新策略状态
  rpc BatchUpdateStrategyStatus (BatchUpdateStrategyStatusRequest) returns (BatchUpdateStrategyStatusReply) {
    option (google.api.http) = {
      post: "/api/v1/strategy/status/batch/update"
      body: "*"
    };
  }

  // 删除策略
  rpc DeleteStrategy (DeleteStrategyRequest) returns (DeleteStrategyReply) {
    option (google.api.http) = {
      post: "/api/v1/strategy/delete"
      body: "*"
    };
  }

  // 批量删除策略
  rpc BatchDeleteStrategy (BatchDeleteStrategyRequest) returns (BatchDeleteStrategyReply) {
    option (google.api.http) = {
      post: "/api/v1/strategy/batch/delete"
      body: "*"
    };
  }

  // 获取策略
  rpc GetStrategy (GetStrategyRequest) returns (GetStrategyReply) {
    option (google.api.http) = {
      post: "/api/v1/strategy/detail"
      body: "*"
    };
  }

  // 获取策略列表
  rpc ListStrategy (ListStrategyRequest) returns (ListStrategyReply) {
    option (google.api.http) = {
      post: "/api/v1/strategy/list"
      body: "*"
    };
  }

  // 获取策略下拉列表
  rpc SelectStrategy (SelectStrategyRequest) returns (SelectStrategyReply) {
    option (google.api.http) = {
      post: "/api/v1/strategy/select"
      body: "*"
    };
  }

  // ExportStrategy 导出策略
  rpc  ExportStrategy (ExportStrategyRequest) returns (ExportStrategyReply) {
    option (google.api.http) = {
      post: "/api/v1/strategy/export"
      body: "*"
    };
  }

  // 获取策略通知对象明细
  rpc GetStrategyNotifyObject (GetStrategyNotifyObjectRequest) returns (GetStrategyNotifyObjectReply) {
    option (google.api.http) = {
      post: "/api/v1/strategy/notify/object"
      body: "*"
    };
  }

  // 绑定通知对象
  rpc BindStrategyNotifyObject (BindStrategyNotifyObjectRequest) returns (BindStrategyNotifyObjectReply) {
    option (google.api.http) = {
      post: "/api/v1/strategy/notify/object/bind"
      body: "*"
    };
  }
}

// 创建策略请求参数
message CreateStrategyRequest {
  // 策略组ID, 必填, 所属的策略组ID信息
  uint32 groupId = 1 [(validate.rules).uint32.gt = 0];
  // 告警名称, 必填, 字符串, 长度限制: 1-255, 正则表达式: ^[a-zA-Z0-9_]+$
  string alert = 2 [(validate.rules).string = {min_len: 1, max_len: 255, pattern: "^[a-zA-Z0-9_]+$"}];
  // 表达式, 必填, promQL表达式
  string expr = 3 [(validate.rules).string.min_len = 1];
  // 持续时间,(1s,1m,1h,1d), 对应prometheus的持续时间单位for
  Duration duration = 4 [(validate.rules).message.required = true];
  // 标签, keys 长度限制: 1-32, 正则表达式: ^[a-zA-Z0-9_]+$
  map<string, string> labels = 5 [(validate.rules).map = {
    min_pairs: 1
    max_pairs: 100
    keys: {
      string: {pattern: "^[a-zA-Z0-9_]+$", min_len: 1, max_len: 32}
    }
  }];
  // 注解, keys 长度限制: 1-32, 正则表达式: ^[a-zA-Z0-9_]+$
  map<string, string> annotations = 6 [(validate.rules).map = {
    min_pairs: 1
    max_pairs: 100
    keys: {
      string: {pattern: "^[a-zA-Z0-9_]+$", min_len: 1, max_len: 32}
    }
  }];
  // 告警页面ID列表, 对应告警页面的ID
  repeated uint32 alarmPageIds = 7 [(validate.rules).repeated = {
    min_items: 1,
    unique: true,
    items: {
      uint32: {gt: 0}
    }
  }];
  // 分类ID列表, 对应字典表ID
  repeated uint32 categoryIds = 8 [(validate.rules).repeated = {
    min_items: 1,
    unique: true,
    items: {
      uint32: {gt: 0}
    }
  }];
  // 告警级别ID, 对应字典表ID(告警等级维护在字典表中)
  uint32 alarmLevelId = 9 [(validate.rules).uint32.gt = 0];
  // 备注, 长度限制: 0-255
  string remark = 10 [(validate.rules).string.max_len = 255];
  // 数据源
  uint32 dataSourceId = 11 [(validate.rules).uint32.gt = 0];
  // 最大抑制时常
  Duration maxSuppress = 12;
  // 告警通知间隔
  Duration sendInterval = 13;
  // 是否发送告警通知
  bool sendRecover = 14;
}
// 创建策略响应参数
message CreateStrategyReply {
  // id 策略ID, 成功返回策略ID
  uint32 id = 1;
}

// 更新策略请求参数
message UpdateStrategyRequest {
  // 策略ID, 路径参数, 必填, 大于0
  uint32 id = 1 [(validate.rules).uint32.gt = 0];
  // 策略组ID, 所属的策略组ID信息, 可以替换成新的, 如果不替换则使用原有的
  uint32 groupId = 2 [(validate.rules).uint32.gt = 0];
  // 告警名称, 必填, 字符串, 长度限制: 1-255, 正则表达式: ^[a-zA-Z0-9_]+$
  string alert = 3 [(validate.rules).string = {min_len: 1 max_len: 255, pattern: "^[a-zA-Z0-9_]+$"}];
  // 表达式, 必填, promQL表达式
  string expr = 4 [(validate.rules).string.min_len = 1];
  // 持续时间,(1s,1m,1h,1d), 对应prometheus的持续时间单位for
  Duration duration = 5 [(validate.rules).message.required = true];
  // 标签, keys 长度限制: 1-32, 正则表达式: ^[a-zA-Z0-9_]+$
  map<string, string> labels = 6 [(validate.rules).map = {
    min_pairs: 1
    max_pairs: 100
    keys: {
      string: {pattern: "^[a-zA-Z0-9_]+$", min_len: 1, max_len: 32}
    }
  }];
  // 注解, keys 长度限制: 1-32, 正则表达式: ^[a-zA-Z0-9_]+$
  map<string, string> annotations = 7 [(validate.rules).map = {
    min_pairs: 1
    max_pairs: 100
    keys: {
      string: {pattern: "^[a-zA-Z0-9_]+$", min_len: 1, max_len: 32}
    }
  }];
  // 告警页面ID列表
  repeated uint32 alarmPageIds = 8 [(validate.rules).repeated = {
    min_items: 1,
    unique: true,
    items: {uint32: {gt: 0}}
  }];
  // 分类ID列表, 对应字典表ID
  repeated uint32 categoryIds = 9 [(validate.rules).repeated = {
    min_items: 1,
    unique: true,
    items: {uint32: {gt: 0}}
  }];
  // 告警级别ID, 对应字典表ID(告警等级维护在字典表中)
  uint32 alarmLevelId = 10 [(validate.rules).uint32.gt = 0];
  // 备注, 长度限制: 0-255
  string remark = 11 [(validate.rules).string.max_len = 255];
  // 数据源
  uint32 dataSourceId = 12 [(validate.rules).uint32.gt = 0];
  // 最大抑制时常
  Duration maxSuppress = 13;
  // 告警通知间隔
  Duration sendInterval = 14;
  // 是否发送告警通知
  bool sendRecover = 15;
}
// 更新策略响应参数
message UpdateStrategyReply {
  // 策略ID, 成功返回策略ID
  uint32 id = 1;
}

// 批量更新策略状态请求参数
message BatchUpdateStrategyStatusRequest {
  // 策略ID列表, 最少1个, 必须大于0, 唯一
  repeated uint32 ids = 1 [(validate.rules).repeated = {
    min_items: 1,
    unique: true,
    items: {uint32: {gt: 0}}
  }];
  // 策略状态, 不能为0
  Status status = 2 [(validate.rules).enum = {defined_only: true, not_in: [0]}];
}
// 批量更新策略状态响应参数
message BatchUpdateStrategyStatusReply {
  // 策略ID列表, 成功后返回策略ID列表
  repeated uint32 ids = 1;
}

// 删除策略请求参数
message DeleteStrategyRequest {
  // 策略ID, 路径参数, 必填, 大于0
  uint32 id = 1 [(validate.rules).uint32.gt = 0];
}
// 删除策略响应参数
message DeleteStrategyReply {
  // 策略ID, 成功返回策略ID
  uint32 id = 1;
}

// 批量删除策略请求参数
message BatchDeleteStrategyRequest {
  // 策略ID列表, 最少1个, 必须大于0, 唯一
  repeated uint32 ids = 1 [(validate.rules).repeated = {
    min_items: 1,
    unique: true,
    items: {uint32: {gt: 0}}
  }];
}
// 批量删除策略响应参数
message BatchDeleteStrategyReply {
  // 策略ID列表, 成功后返回策略ID列表
  repeated uint32 ids = 1;
}

// 获取策略请求参数
message GetStrategyRequest {
  // 策略ID, 路径参数, 必填, 大于0
  uint32 id = 1 [(validate.rules).uint32.gt = 0];
}
// 获取策略响应参数
message GetStrategyReply {
  // 策略信息
  PromStrategyV1 detail = 1;
}

// 获取策略列表请求参数
message ListStrategyRequest {
  // 分页参数, 必填
  PageRequest page = 1 [(validate.rules).message.required = true];
  // 关键字, 可选, 长度限制: 0-255, 用于模糊查询
  string keyword = 2 [(validate.rules).string = {max_len: 255}];
  // 策略组ID, 可选, 用于查询指定策略组下的策略
  uint32 groupId = 3;
  // 分类ID列表, 可选, 用于查询指定分类下的策略
  repeated uint32 categoryIds = 4 [(validate.rules).repeated = {
    max_items: 10,
    unique: true,
    items: {uint32: {gt: 0}}
  }];
  // 告警级别ID, 可选, 用于查询指定告警级别下的策略
  uint32 alarmLevelId = 5;
  // 策略状态, 可选, 用于查询指定状态下的策略
  Status status = 6 [(validate.rules).enum = {defined_only: true}];
  // 是否获取已删除的策略
  bool isDeleted = 7;
  // 策略ID
  uint32 strategyId = 8;
}
// 获取策略列表响应参数
message ListStrategyReply {
  // 分页参数
  PageReply page = 1;
  // 策略列表
  repeated PromStrategyV1 list = 2;
}

// 获取策略下拉列表请求参数
message SelectStrategyRequest {
  // 分页参数
  PageRequest page = 1 [(validate.rules).message.required = true];
  // 关键字, 可选, 长度限制: 0-255, 用于模糊查询
  string keyword = 2 [(validate.rules).string = {max_len: 255}];
}
// 获取策略列表响应参数
message SelectStrategyReply {
  // 分页参数
  PageReply page = 1;
  // 策略下拉列表
  repeated PromStrategySelectV1 list = 2;
}

// 导出策略请求参数
message ExportStrategyRequest {
  // 需要导出的策略ID列表, 最少1个, 必须大于0, 唯一
  repeated uint32 ids = 1 [(validate.rules).repeated = {
    min_items: 1,
    unique: true,
    items: {uint32: {gt: 0}}
  }];
}
// 导出策略响应
message ExportStrategyReply {
  // 导出的策略文件bytes
  bytes file = 1;
  // 导出的策略文件名
  string fileName = 2;
}

// 获取策略通知对象请求参数
message GetStrategyNotifyObjectRequest {
  // 策略ID, 路径参数, 必填, 大于0
  uint32 id = 1 [(validate.rules).uint32.gt = 0];
}
// 获取策略通知对象响应参数
message GetStrategyNotifyObjectReply {
  // 策略通知对象列表
  PromStrategyV1 detail = 1;
  repeated NotifyV1 notifyObjectList = 2;
}

// 绑定通知对象请求参数
message BindStrategyNotifyObjectRequest {
  // 策略ID, 路径参数, 必填, 大于0
  uint32 id = 1 [(validate.rules).uint32.gt = 0];
  // 通知对象列表
  repeated uint32 notifyObjectIds = 2 [(validate.rules).repeated = {
    min_items: 1,
    unique: true,
  }];
}
// 绑定通知对象响应参数
message BindStrategyNotifyObjectReply {
  // 策略ID, 成功返回策略ID
  uint32 id = 1;
}