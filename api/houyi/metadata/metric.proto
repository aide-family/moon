syntax = "proto3";

package api.houyi.metadata;

import "google/api/annotations.proto";
import "buf/validate/validate.proto";
import "metadata.proto";
import "enum.proto";

option go_package = "github.com/aide-family/moon/api/houyi/metadata;metadata";
option java_multiple_files = true;
option java_package = "api.houyi.metadata";

// metric类型数据源元数据同步接口， 子服务需要实现该接口, 支持http和rpc两种同步方式
service Metric {
  // 同步元数据
  rpc SyncMetadata(SyncMetadataRequest) returns (SyncMetadataReply) {
    // TODO 需要做成异步的， 由palace服务发送拉取信号， houyi服务组装数据分批次推送元数据，解决数据量大， 引起传输失败的问题
    option (google.api.http) = {
      post: "/v1/metric/sync/metadata"
      body: "*"
    };
  }

  // 同步元数据V2
  rpc SyncMetadataV2(SyncMetadataV2Request) returns (SyncMetadataV2Reply) {
    option (google.api.http) = {
      post: "/v2/metric/sync/metadata"
      body: "*"
    };
  }

  // 查询
  rpc Query(QueryRequest) returns (QueryReply) {
    option (google.api.http) = {
      post: "/v1/metric/query"
      body: "*"
    };
  }
}

// TODO 前期先明文， 后面再考虑加密
message SyncMetadataRequest {
  // 数据源地址
  string endpoint = 1;
  // 配置信息
  string config = 2;
  // 存储类型
  StorageType storageType = 3;
}

message SyncMetadataReply {
  // 采集到的指标列表
  repeated MetricDetail metrics = 1;
}

message SyncMetadataV2Request {
  // 数据源地址
  string endpoint = 1;
  // 配置信息
  string config = 2;
  // 存储类型
  StorageType storageType = 3;
  // 数据源ID
  uint32 datasourceId = 4;
  // 团队ID
  uint32 teamId = 5;
}
message SyncMetadataV2Reply {}

message QueryRequest {
  // 查询语句
  string query = 1;
  // 查询时间范围
  repeated string range = 2 [(buf.validate.field).required = true, (buf.validate.field).cel = {
    message: "至少包含一个时间戳",
    expression: "this.size() > 0"
  }];
  // 步长
  uint32 step = 3;
  // 数据源
  string endpoint = 4;
  // 配置信息
  string config = 5;
  // 存储类型
  StorageType storageType = 6;
}
message QueryReply {
  repeated MetricQueryResult list = 1;
}